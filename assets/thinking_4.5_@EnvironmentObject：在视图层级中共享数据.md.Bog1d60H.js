import{_ as i,c as n,o as a,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"@EnvironmentObject：在视图层级中共享数据","description":"","frontmatter":{},"headers":[],"relativePath":"thinking/4.5_@EnvironmentObject：在视图层级中共享数据.md","filePath":"thinking/4.5_@EnvironmentObject：在视图层级中共享数据.md"}'),t={name:"thinking/4.5_@EnvironmentObject：在视图层级中共享数据.md"};function l(p,s,h,k,r,d){return a(),n("div",null,s[0]||(s[0]=[e(`<h1 id="environmentobject-在视图层级中共享数据" tabindex="-1">@EnvironmentObject：在视图层级中共享数据 <a class="header-anchor" href="#environmentobject-在视图层级中共享数据" aria-label="Permalink to &quot;@EnvironmentObject：在视图层级中共享数据&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，<code>@EnvironmentObject</code> 允许你在整个视图层级中轻松共享数据。这对于传递应用级别的状态或配置信息非常有用，避免了手动逐层传递数据的繁琐。你可以把它想象成一个全局可访问的“数据中心”，任何视图都可以从中获取所需的信息。</p></blockquote><h2 id="如何使用-environmentobject-🛠️" tabindex="-1">如何使用 @EnvironmentObject 🛠️ <a class="header-anchor" href="#如何使用-environmentobject-🛠️" aria-label="Permalink to &quot;如何使用 @EnvironmentObject 🛠️&quot;">​</a></h2><p>首先，你需要创建一个遵循 <code>ObservableObject</code> 协议的类。这个类将持有你想要共享的数据，并且当数据发生变化时，它会自动通知所有订阅的视图。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> themeColor: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;light&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来，在你的 App 结构体中，使用 <code>.environmentObject()</code> 修饰符将 <code>AppSettings</code> 的实例注入到环境当中。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AppSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">environmentObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(settings)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>现在，任何 <code>ContentView</code> 及其子视图都可以通过 <code>@EnvironmentObject</code> 属性包装器访问 <code>AppSettings</code> 的实例。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @EnvironmentObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings: AppSettings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;当前主题颜色: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">themeColor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(settings.themeColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;light&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .black </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .white)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="优势与应用场景-✨" tabindex="-1">优势与应用场景 ✨ <a class="header-anchor" href="#优势与应用场景-✨" aria-label="Permalink to &quot;优势与应用场景 ✨&quot;">​</a></h2><ul><li><strong>简化数据传递</strong>：避免了手动传递数据的麻烦，代码更简洁。</li><li><strong>全局状态管理</strong>：方便管理应用级别的状态，例如用户偏好设置、登录状态等。</li><li><strong>自动更新</strong>：当 <code>ObservableObject</code> 中的数据发生变化时，所有订阅的视图会自动更新。</li></ul><p>例如，你可以使用 <code>@EnvironmentObject</code> 来管理：</p><ol><li>用户的登录状态 🔑</li><li>应用的语言设置 🌐</li><li>主题颜色 🎨</li><li>网络请求的客户端实例 📡</li></ol><h2 id="注意事项-🤔" tabindex="-1">注意事项 🤔 <a class="header-anchor" href="#注意事项-🤔" aria-label="Permalink to &quot;注意事项 🤔&quot;">​</a></h2><ul><li>确保在视图层级中正确注入了 <code>EnvironmentObject</code>，否则会导致运行时错误。</li><li><code>EnvironmentObject</code> 适用于共享应用级别的状态，对于局部状态，使用 <code>@State</code> 或 <code>@Binding</code> 更合适。</li><li><code>@EnvironmentObject</code> 依赖于 <code>ObservableObject</code> 协议，因此你需要确保你的数据模型遵循该协议。</li></ul><p>总而言之，<code>@EnvironmentObject</code> 是一个强大的工具，可以帮助你更好地管理 SwiftUI 应用中的数据，提高代码的可维护性和可读性。 记住，合理利用它可以让你的开发工作事半功倍！🎉</p>`,16)]))}const E=i(t,[["render",l]]);export{o as __pageData,E as default};
