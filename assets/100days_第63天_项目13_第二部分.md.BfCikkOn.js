import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const g=JSON.parse('{"title":"第63天 项目 13 第二部分","description":"","frontmatter":{},"headers":[],"relativePath":"100days/第63天_项目13_第二部分.md","filePath":"100days/第63天_项目13_第二部分.md"}'),p={name:"100days/第63天_项目13_第二部分.md"};function l(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="第63天-项目-13-第二部分" tabindex="-1">第63天 项目 13 第二部分 <a class="header-anchor" href="#第63天-项目-13-第二部分" aria-label="Permalink to &quot;第63天 项目 13 第二部分&quot;">​</a></h1><p>今天，我们继续探讨项目所使用的技术，并且开始涉足一些 SwiftUI 用起来不那么顺手的领域。今天你将看到 Core Image 如何与 SwiftUI 集成，答案是“集成得并不好”。我们还将开始研究 UIKit 如何与 SwiftUI 集成，同样，答案也不尽如人意——我们需要付出相当多的努力，才能把 UIKit 这个“圆榫头”塞进 SwiftUI 这个“方榫眼”里。</p><p>我是否希望在这方面看到更好的解决方案？当然希望——或许在未来 SwiftUI 的更新中会实现。不过有句不知名的谚语我觉得很适合这里：“别让你渴望的东西，让你忘记你已拥有的东西。”</p><p>诚然，目前 SwiftUI 与其他框架的集成还不太稳定，但这并不意味着它会掩盖 SwiftUI 在其他方面为我们所做的出色工作。</p><p><strong>今天你只需学习两个主题，通过这些主题，你将学会如何使用 Core Image 处理图像，以及如何处理应用中的缺失内容。</strong></p><ul><li>Core Image 与 SwiftUI 的集成</li><li>使用 ContentUnavailableView 显示空状态</li></ul><p>如果有空闲时间，可以尝试用 Core Image 做些实验，看看能做出什么效果——截图分享总是很有趣的！</p><h2 id="core-image-与-swiftui-的集成" tabindex="-1">Core Image 与 SwiftUI 的集成 <a class="header-anchor" href="#core-image-与-swiftui-的集成" aria-label="Permalink to &quot;Core Image 与 SwiftUI 的集成&quot;">​</a></h2><p>保罗·哈德森 2023年12月8日</p><p>Core Image 是苹果用于处理图像的框架。这并非“绘图”（至少大部分情况下不是），而是对现有图像进行修改：比如应用锐化、模糊、晕影、像素化等效果。如果你用过苹果 Photo Booth 应用中的各种照片特效，就能很好地理解 Core Image 的用途了！</p><p>然而，Core Image 与 SwiftUI 的集成效果并不好。事实上，我甚至认为它与苹果较旧的 UIKit 框架集成得也不算好——尽管苹果做了一些工作提供辅助工具，但仍需要花费不少心思去琢磨。不过，请坚持下去：一旦理解了其中的原理，你会发现结果非常出色，而且未来这将为你的应用开启一系列全新的功能。</p><p>首先，我们要编写一些代码来创建一个基础图像。我会用一种略显特别的结构来编写，不过当我们融入 Core Image 后，你就会明白这样做的原因：我们将把 <code>Image</code> 视图创建为一个可选的 <code>@State</code> 属性，让它调整大小以适应屏幕尺寸，然后添加 <code>onAppear()</code> 修饰符来实际加载图像。</p><p>在资源目录中添加一个示例图像，然后将 <code>ContentView</code> 结构体修改为以下代码：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image: Image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaledToFit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: loadImage)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.example)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>首先，注意 SwiftUI 处理可选视图的方式非常流畅——它就是能正常工作！不过要注意，我将 <code>onAppear()</code> 修饰符附加到了图像周围的 <code>VStack</code> 上，因为如果可选图像为 <code>nil</code>，它就不会触发 <code>onAppear()</code> 函数。</p><p>无论如何，运行这段代码后，应该会显示你添加的示例图像，并且图像会巧妙地缩放以适应屏幕。</p><p>现在来看复杂的部分：<code>Image</code> 究竟是什么？正如你所知，它是一个“视图”，这意味着我们可以在 SwiftUI 视图层级结构中对其进行定位和调整大小。它还能处理从资源目录和 SF Symbols 加载图像的操作，也能从其他一些来源加载图像。然而，归根结底，它只是一个用于显示的元素——我们无法将其内容写入磁盘，除了应用一些简单的 SwiftUI 滤镜外，也无法对其进行其他转换。</p><p>如果我们想使用 Core Image，SwiftUI 的 <code>Image</code> 视图是一个很好的最终展示载体，但在其他环节中并不实用。也就是说，如果我们想动态创建图像、应用 Core Image 滤镜等，SwiftUI 的图像类型是无法胜任的。</p><p>苹果为我们提供了另外三种图像类型，巧妙的是，如果要使用 Core Image，这三种类型我们都需要用到。它们听起来可能有些相似，但彼此之间存在细微差别，要想从 Core Image 中获得有意义的结果，正确使用它们至关重要。</p><p>除了 SwiftUI 的 <code>Image</code> 视图外，另外三种图像类型分别是：</p><ul><li><code>UIImage</code>：来自 UIKit。这是一种功能极其强大的图像类型，能够处理多种图像格式，包括位图（如 PNG）、矢量图（如 SVG），甚至是构成动画的序列帧。<code>UIImage</code> 是 UIKit 的标准图像类型，在这三种类型中，它与 SwiftUI 的 <code>Image</code> 类型最为接近。</li><li><code>CGImage</code>：来自 Core Graphics。这是一种相对简单的图像类型，本质上就是一个二维像素数组。</li><li><code>CIImage</code>：来自 Core Image。它存储生成图像所需的所有信息，但除非明确要求，否则不会将这些信息转换为像素。苹果将 <code>CIImage</code> 称为“图像配方”，而不是实际的图像。</li></ul><p>这些不同的图像类型之间存在一定的互操作性：</p><ul><li>我们可以从 <code>CGImage</code> 创建 <code>UIImage</code>，也可以从 <code>UIImage</code> 创建 <code>CGImage</code>。</li><li>我们可以从 <code>UIImage</code> 和 <code>CGImage</code> 创建 <code>CIImage</code>，也可以从 <code>CIImage</code> 创建 <code>CGImage</code>。</li><li>我们可以从 <code>UIImage</code> 和 <code>CGImage</code> 创建 SwiftUI 的 <code>Image</code>。</li></ul><p>我知道这很令人困惑，但希望看到代码后你会感觉好一些。重要的是，这些图像类型都是纯粹的“数据”——我们不能将它们直接放入 SwiftUI 视图层级结构中，但可以自由地对其进行处理，然后将处理结果用 SwiftUI 的 <code>Image</code> 展示出来。</p><p>我们要修改 <code>loadImage()</code> 函数，使其从示例图像创建 <code>UIImage</code>，然后使用 Core Image 对其进行处理。更具体地说，我们首先要完成两项任务：</p><ol><li>将示例图像加载到 <code>UIImage</code> 中，<code>UIImage</code> 有一个名为 <code>UIImage(resource:)</code> 的初始化器，可以从资源目录加载图像。</li><li>将 <code>UIImage</code> 转换为 <code>CIImage</code>，因为 Core Image 需要使用这种类型进行操作。</li></ol><p>因此，首先用以下代码替换当前的 <code>loadImage()</code> 实现：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .example)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beginImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: inputImage)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 后续代码待添加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>下一步是创建 Core Image 上下文和 Core Image 滤镜。滤镜负责执行图像数据的实际转换工作，比如模糊、锐化、调整颜色等；而上下文则负责将处理后的数据转换为我们可以使用的 <code>CGImage</code>。</p><p>这两种数据类型都来自 Core Image，因此你需要添加两个导入语句，以便在代码中使用它们。请在 ContentView.swift 文件的顶部附近添加以下代码：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CoreImage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CoreImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CIFilterBuiltins</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接下来，我们创建上下文和滤镜。在这个示例中，我们将使用棕褐色调滤镜（sepia tone filter），该滤镜会给图像添加棕色色调，让照片看起来像是很久以前拍摄的。</p><p>因此，用以下代码替换注释“// 后续代码待添加”：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CIContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CIFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sepiaTone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在，我们可以自定义滤镜以改变其效果。棕褐色调滤镜比较简单，它只有两个关键属性：<code>inputImage</code> 是我们要处理的图像，<code>intensity</code> 是棕褐色效果的应用强度，取值范围在 0（原始图像）到 1（完全棕褐色）之间。</p><p>因此，在之前两行代码的下方添加以下两行：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.inputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beginImage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.intensity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>到目前为止，这些都不算太难，但接下来情况会有所变化：我们需要将滤镜的输出转换为可以在视图中显示的 SwiftUI <code>Image</code>。这时候，我们就需要同时用到这四种图像类型了，因为最简单的流程是：</p><ul><li>从滤镜中读取输出图像，其类型为 <code>CIImage</code>。这个操作可能会失败，因此返回的是可选类型。</li><li>请求上下文从该输出图像创建 <code>CGImage</code>。这个操作也可能失败，因此返回的也是可选类型。</li><li>将 <code>CGImage</code> 转换为 <code>UIImage</code>。</li><li>将 <code>UIImage</code> 转换为 SwiftUI 的 <code>Image</code>。</li></ul><p>你也可以直接从 <code>CGImage</code> 转换为 SwiftUI 的 <code>Image</code>，但这需要额外的参数，只会增加更多复杂性！</p><p>以下是 <code>loadImage()</code> 函数的完整代码：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从滤镜中获取 CIImage，若失败则退出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentFilter.outputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 尝试从 CIImage 创建 CGImage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cgImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createCGImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputImage, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: outputImage.extent) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 CGImage 转换为 UIImage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cgImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: cgImage)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 UIImage 转换为 SwiftUI 的 Image</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uiImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: uiImage)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>再次运行应用，你应该会看到示例图像现在应用了棕褐色效果，这一切都要归功于 Core Image。</p><p>现在，你可能会觉得，仅仅为了得到一个相对简单的效果，竟然需要做这么多工作。但一旦掌握了 Core Image 的这些基础知识，切换到其他滤镜就会相对容易了。</p><p>话虽如此，Core Image 多少有些……嗯，不妨说它“独具特色”。它早在 iOS 5.0 时就已推出，那时苹果内部已经在开发 Swift 了，但你完全看不出来这一点——长期以来，它的 API 是最不符合 Swift 风格的。尽管苹果逐渐对其进行了优化，但有时你还是不得不深入研究它的底层实现。</p><p>首先，我们来看现代 API——我们可以用像素化滤镜替换棕褐色调滤镜，代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CIFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pixellate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.inputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beginImage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>运行这段代码后，你会看到图像呈现出像素化效果。scale 值设为 100，理论上意味着每个像素的宽度为 100 点，但由于我的图像尺寸较大，所以像素看起来相对较小。</p><p>现在，我们尝试使用水晶效果滤镜，代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CIFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">crystallize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.inputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beginImage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或者，我们可以添加旋转扭曲滤镜，代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CIFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">twirlDistortion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.inputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beginImage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.center </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: inputImage.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: inputImage.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>由此可见，仅使用现代 API 我们就能实现很多效果。但在本项目中，我们将使用较旧的 API 来设置 <code>radius</code> 和 <code>scale</code> 等值，因为这种方式能让我们动态设置值——我们可以直接查询当前滤镜支持哪些值，然后将这些值传递进去。</p><p>具体代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CIFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">twirlDistortion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentFilter.inputImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beginImage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentFilter.inputKeys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputKeys.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kCIInputIntensityKey) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    currentFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: kCIInputIntensityKey) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputKeys.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kCIInputRadiusKey) { currentFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: kCIInputRadiusKey) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputKeys.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kCIInputScaleKey) { currentFilter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: kCIInputScaleKey) }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样设置后，你可以将旋转扭曲滤镜替换为任何其他滤镜，代码仍然能正常工作——只有当滤镜支持某个调整值时，该值才会被传递进去。</p><p>注意，这种方式依赖于通过键（key）来设置值，这可能会让你联想到 <code>UserDefaults</code> 的工作方式。实际上，所有这些 <code>kCIInput</code> 键在底层都是以字符串形式实现的，所以它们之间的相似性比你想象的还要高！</p><p>如果你要实现精确的 Core Image 调整，那么无疑应该使用较新的 API，因为它使用明确的属性名和类型。但在本项目中，较旧的 API 更为实用，因为无论使用哪种滤镜，它都能让我们传递调整值。</p><h2 id="使用-contentunavailableview-显示空状态" tabindex="-1">使用 ContentUnavailableView 显示空状态 <a class="header-anchor" href="#使用-contentunavailableview-显示空状态" aria-label="Permalink to &quot;使用 ContentUnavailableView 显示空状态&quot;">​</a></h2><p>保罗·哈德森 2023年12月8日</p><p>当应用没有内容可显示时，SwiftUI 的 <code>ContentUnavailableView</code> 会显示一个标准的用户界面。我知道，这听起来似乎有些多余——毕竟，如果没有内容可显示，那就什么都不显示好了！</p><p>但在某些情况下，<code>ContentUnavailableView</code> 非常实用，比如当应用依赖于用户尚未提供的信息时（例如用户尚未创建任何数据，或者用户搜索时没有找到结果）。</p><p>举个例子，如果你正在开发一个应用，让用户记录想要记住的 Swift 代码片段，那么默认情况下，应用启动时可能没有任何代码片段。这时，你可以像下面这样使用 <code>ContentUnavailableView</code>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContentUnavailableView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;没有代码片段&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;swift&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样会显示一个来自 SF Symbols 的大型 Swift 图标，图标下方是标题文本“没有代码片段”。</p><p>你还可以在下方添加一行描述文本，该文本以 <code>Text</code> 视图的形式指定，因此你可以添加额外的样式（如自定义字体或自定义颜色）：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContentUnavailableView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;没有代码片段&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;swift&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你目前还没有任何已保存的代码片段。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你想获得“完全”的控制权，可以为标题和描述分别提供单独的视图，同时添加一些按钮来帮助用户开始使用应用：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContentUnavailableView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;没有代码片段&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;swift&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你目前还没有任何已保存的代码片段。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;创建代码片段&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建代码片段的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buttonStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.borderedProminent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这是一个使用起来非常简单的视图，但它比用户首次打开应用时只显示空白屏幕要好得多！</p>`,70)]))}const c=i(p,[["render",l]]);export{g as __pageData,c as default};
