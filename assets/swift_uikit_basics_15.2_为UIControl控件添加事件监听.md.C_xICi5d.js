import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"15.2_为UIControl控件添加事件监听","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/15.2_为UIControl控件添加事件监听.md","filePath":"swift/uikit/basics/15.2_为UIControl控件添加事件监听.md"}'),l={name:"swift/uikit/basics/15.2_为UIControl控件添加事件监听.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_15-2-为uicontrol控件添加事件监听" tabindex="-1">15.2_为UIControl控件添加事件监听 <a class="header-anchor" href="#_15-2-为uicontrol控件添加事件监听" aria-label="Permalink to &quot;15.2_为UIControl控件添加事件监听&quot;">​</a></h1><h2 id="轻松掌握事件监听的核心-🚀" tabindex="-1">轻松掌握事件监听的核心！🚀 <a class="header-anchor" href="#轻松掌握事件监听的核心-🚀" aria-label="Permalink to &quot;轻松掌握事件监听的核心！🚀&quot;">​</a></h2><p>在iOS开发中，为<code>UIControl</code>控件添加事件监听是实现用户交互的关键一步。<code>UIControl</code>是许多UI元素的基类，例如按钮（<code>UIButton</code>）、滑块（<code>UISlider</code>）和开关（<code>UISwitch</code>）。理解如何正确地监听这些控件的事件，将让你能够构建出响应灵敏、用户友好的应用程序。</p><h2 id="addtarget-action-for-方法的魔力-✨" tabindex="-1"><code>addTarget(_:action:for:)</code> 方法的魔力 ✨ <a class="header-anchor" href="#addtarget-action-for-方法的魔力-✨" aria-label="Permalink to &quot;\`addTarget(_:action:for:)\` 方法的魔力 ✨&quot;">​</a></h2><p>要为<code>UIControl</code>控件添加事件监听，你主要会用到<code>addTarget(_:action:for:)</code>方法。这个方法是<code>Target-Action</code>设计模式的核心，它允许你指定当特定事件发生时，哪个对象（<code>target</code>）的哪个方法（<code>action</code>）应该被调用。这就像给你的应用安装了一个智能管家，当用户做出某个动作时，它会立即执行你预设的任务！</p><h3 id="参数详解" tabindex="-1">参数详解： <a class="header-anchor" href="#参数详解" aria-label="Permalink to &quot;参数详解：&quot;">​</a></h3><ul><li><code>target</code>: 接收事件的对象。通常是你的视图控制器（<code>UIViewController</code>），因为它负责处理视图的逻辑。</li><li><code>action</code>: 当事件发生时，<code>target</code>对象上将被调用的方法。这个方法必须使用<code>@objc</code>关键字标记，并且通常接受一个<code>sender</code>参数（事件的发送者）。</li><li><code>for</code>: 指定你想要监听的事件类型。<code>UIControl.Event</code>是一个枚举，提供了多种事件类型，例如<code>.touchUpInside</code>（手指在控件内部抬起）、<code>.valueChanged</code>（值改变）等。</li></ul><h2 id="实践出真知-按钮点击事件-🎯" tabindex="-1">实践出真知：按钮点击事件 🎯 <a class="header-anchor" href="#实践出真知-按钮点击事件-🎯" aria-label="Permalink to &quot;实践出真知：按钮点击事件 🎯&quot;">​</a></h2><p>让我们以最常见的<code>UIButton</code>为例，看看如何添加一个点击事件监听。假设你有一个名为<code>myButton</code>的按钮，并且你希望当用户点击它时执行一些操作。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myButton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .system)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        setupButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setupButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myButton.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myButton.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myButton)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 添加事件监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myButton.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buttonTapped), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .touchUpInside)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buttonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;按钮被点击了！🎉&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在这里你可以添加任何你希望在按钮点击时执行的代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 例如，更新UI、导航到另一个视图控制器等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在这个例子中，当用户在<code>myButton</code>内部抬起手指时（<code>.touchUpInside</code>事件），<code>MyViewController</code>实例的<code>buttonTapped</code>方法就会被调用。是不是非常直观？</p><h2 id="探索更多事件类型-🔍" tabindex="-1">探索更多事件类型 🔍 <a class="header-anchor" href="#探索更多事件类型-🔍" aria-label="Permalink to &quot;探索更多事件类型 🔍&quot;">​</a></h2><p><code>UIControl.Event</code>枚举提供了丰富的事件类型，让你能够精确地响应用户的各种交互。了解这些事件类型将极大地扩展你的应用交互能力。</p><ul><li><code>.touchDown</code>: 用户手指按下控件时。</li><li><code>.touchDownRepeat</code>: 用户手指连续按下控件时（例如，长按）。</li><li><code>.touchDragInside</code>: 用户手指在控件内部拖动时。</li><li><code>.touchDragOutside</code>: 用户手指在控件外部拖动时。</li><li><code>.touchUpInside</code>: 用户手指在控件内部抬起时。</li><li><code>.touchUpOutside</code>: 用户手指在控件外部抬起时。</li><li><code>.valueChanged</code>: 控件的值发生改变时（例如，<code>UISlider</code>或<code>UISwitch</code>）。</li></ul><p>通过组合使用这些事件类型，你可以创建出极其复杂的交互逻辑。例如，你可以监听<code>UISlider</code>的<code>.valueChanged</code>事件来实时更新一个标签的显示，或者监听<code>UISwitch</code>的<code>.valueChanged</code>事件来切换应用的某个设置。掌握这些事件，你的应用将变得生动起来！🚀</p>`,15)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
