import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"支持动态类型 (Dynamic Type)","description":"","frontmatter":{},"headers":[],"relativePath":"core/16.2_支持动态类型 (Dynamic Type).md","filePath":"core/16.2_支持动态类型 (Dynamic Type).md"}'),l={name:"core/16.2_支持动态类型 (Dynamic Type).md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="支持动态类型-dynamic-type" tabindex="-1">支持动态类型 (Dynamic Type) <a class="header-anchor" href="#支持动态类型-dynamic-type" aria-label="Permalink to &quot;支持动态类型 (Dynamic Type)&quot;">​</a></h1><blockquote><p>动态类型支持，让你的 SwiftUI 应用更贴心！🎉 动态类型允许用户根据自己的需求调整应用中的文本大小，这对视力不佳或有阅读障碍的用户来说至关重要。让我们一起看看如何在 SwiftUI 中轻松实现这一功能，让你的应用更具包容性。</p></blockquote><h2 id="拥抱-environment-属性" tabindex="-1">拥抱 <code>Environment</code> 属性 <a class="header-anchor" href="#拥抱-environment-属性" aria-label="Permalink to &quot;拥抱 \`Environment\` 属性&quot;">​</a></h2><p>SwiftUI 提供了强大的 <code>Environment</code> 属性，你可以利用它来获取当前的动态类型大小。使用 <code>@Environment(\\.sizeCategory)</code> 属性包装器，你可以轻松访问用户的首选文本大小。这就像拥有一个内置的“用户偏好雷达”，时刻准备着为你提供信息！</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.sizeCategory) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sizeCategory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="根据动态类型调整视图" tabindex="-1">根据动态类型调整视图 <a class="header-anchor" href="#根据动态类型调整视图" aria-label="Permalink to &quot;根据动态类型调整视图&quot;">​</a></h2><p>现在你已经可以访问动态类型大小了，接下来就是根据它来调整你的视图。你可以使用 <code>sizeCategory</code> 变量来修改字体大小、间距、布局等等。例如，你可以根据 <code>sizeCategory</code> 的值来调整文本的字体大小，确保文本在任何大小下都清晰可读。</p><ul><li>使用 <code>Font.scaled(_:)</code> 方法来缩放字体。</li><li>使用 <code>padding(_:)</code> 修饰符来调整间距。</li><li>使用 <code>if-else</code> 语句或 <code>switch</code> 语句来根据不同的 <code>sizeCategory</code> 值应用不同的布局。</li></ul><h2 id="示例代码-动态调整文本大小" tabindex="-1">示例代码：动态调整文本大小 <a class="header-anchor" href="#示例代码-动态调整文本大小" aria-label="Permalink to &quot;示例代码：动态调整文本大小&quot;">​</a></h2><p>让我们看一个简单的例子，演示如何根据动态类型调整文本大小。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DynamicTypeView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.sizeCategory) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sizeCategory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好，世界！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaledToFill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minimumScaleFactor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这个例子中，我们使用 <code>.scaledToFill()</code> 和 <code>.minimumScaleFactor(0.5)</code> 来确保文本在任何大小下都能完整显示，并且不会变得太小而难以阅读。这就像给你的文本穿上了一件“自适应盔甲”，确保它始终以最佳状态呈现！🛡️</p><h2 id="动态类型与可访问性的重要性" tabindex="-1">动态类型与可访问性的重要性 <a class="header-anchor" href="#动态类型与可访问性的重要性" aria-label="Permalink to &quot;动态类型与可访问性的重要性&quot;">​</a></h2><p>支持动态类型不仅仅是为了让你的应用看起来更好，更是为了让你的应用更具可访问性。根据世界卫生组织 (WHO) 的数据，全球有超过 2.2 亿人患有视力障碍。通过支持动态类型，你可以帮助这些用户更好地使用你的应用，提高他们的生活质量。这不仅是一项技术上的改进，更是一项社会责任！🤝</p>`,14)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
