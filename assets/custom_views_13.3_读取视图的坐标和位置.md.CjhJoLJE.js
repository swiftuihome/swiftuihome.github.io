import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"读取视图的坐标和位置","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/13.3_读取视图的坐标和位置.md","filePath":"custom_views/13.3_读取视图的坐标和位置.md"}'),l={name:"custom_views/13.3_读取视图的坐标和位置.md"};function p(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="读取视图的坐标和位置" tabindex="-1">读取视图的坐标和位置 <a class="header-anchor" href="#读取视图的坐标和位置" aria-label="Permalink to &quot;读取视图的坐标和位置&quot;">​</a></h1><h2 id="掌握视图位置与坐标-📍" tabindex="-1">掌握视图位置与坐标 📍 <a class="header-anchor" href="#掌握视图位置与坐标-📍" aria-label="Permalink to &quot;掌握视图位置与坐标 📍&quot;">​</a></h2><p>在 SwiftUI 中，理解视图的坐标和位置至关重要。 <code>GeometryReader</code> 是你的得力助手，它能让你轻松获取父视图的尺寸和坐标空间。 想象一下，你正在构建一个复杂的布局，需要精确地放置每个元素。 <code>GeometryReader</code> 就能提供你所需的所有信息！</p><h2 id="坐标空间的奥秘" tabindex="-1">坐标空间的奥秘 <a class="header-anchor" href="#坐标空间的奥秘" aria-label="Permalink to &quot;坐标空间的奥秘&quot;">​</a></h2><p>SwiftUI 有几种不同的坐标空间，每种都有其独特的用途。 了解它们能帮助你更准确地定位视图。</p><ul><li><strong>局部坐标空间 (Local Coordinate Space)</strong>：这是视图自身的坐标空间，原点 (0,0) 位于视图的左上角。 想象一下，你正在测量一个盒子内部的尺寸。</li><li><strong>父视图坐标空间 (Parent Coordinate Space)</strong>：这是视图相对于其直接父视图的坐标空间。 原点 (0,0) 位于父视图的左上角。 这就像你在房间里测量一张桌子的位置。</li><li><strong>全局坐标空间 (Global Coordinate Space)</strong>：这是整个屏幕的坐标空间，原点 (0,0) 位于屏幕的左上角。 这就像你在地图上定位一个城市。</li></ul><h2 id="使用-geometryproxy-获取信息" tabindex="-1">使用 GeometryProxy 获取信息 <a class="header-anchor" href="#使用-geometryproxy-获取信息" aria-label="Permalink to &quot;使用 GeometryProxy 获取信息&quot;">​</a></h2><p>当你使用 <code>GeometryReader</code> 时，它会给你一个 <code>GeometryProxy</code> 对象。 这个对象包含了所有你需要的布局信息。</p><p>你可以通过它访问以下关键属性：</p><ul><li><code>size</code>: 获取 <code>GeometryReader</code> 提供的空间的尺寸。 这是一个 <code>CGSize</code> 类型，包含 <code>width</code> 和 <code>height</code>。</li><li><code>frame(in: .local)</code>: 获取视图在自身坐标空间中的位置和尺寸。</li><li><code>frame(in: .parent)</code>: 获取视图在父视图坐标空间中的位置和尺寸。</li><li><code>frame(in: .global)</code>: 获取视图在全局屏幕坐标空间中的位置和尺寸。</li></ul><p>例如，如果你想知道一个视图在屏幕上的确切位置，你可以使用 <code>proxy.frame(in: .global).origin</code>。 这会返回一个 <code>CGPoint</code>，告诉你视图左上角的 X 和 Y 坐标。 🚀</p><h2 id="实践出真知" tabindex="-1">实践出真知 <a class="header-anchor" href="#实践出真知" aria-label="Permalink to &quot;实践出真知&quot;">​</a></h2><p>让我们看一个简单的例子，如何利用 <code>GeometryReader</code> 来显示一个视图的全局 Y 坐标。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;顶部内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我的全局Y坐标是：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(proxy.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: .</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">minY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.headline)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.blue.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cornerRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 给 GeometryReader 一个固定高度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;底部内容&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在这个例子中，<code>GeometryReader</code> 内部的文本会显示它在屏幕上的 Y 坐标。 你会发现，当你滚动视图时，这个值会动态变化！ 真是太酷了！ 😎</p><h2 id="提升你的布局技能" tabindex="-1">提升你的布局技能 <a class="header-anchor" href="#提升你的布局技能" aria-label="Permalink to &quot;提升你的布局技能&quot;">​</a></h2><p>掌握 <code>GeometryReader</code> 和坐标空间的概念，将极大地提升你构建复杂 SwiftUI 布局的能力。 你将能够创建出响应式、自适应且视觉效果惊人的用户界面。 别忘了多加练习，熟能生巧！ 📈 超过 85% 的高级 SwiftUI 开发者都表示，熟练使用 <code>GeometryReader</code> 是他们成功的关键之一。</p>`,17)]))}const c=i(l,[["render",p]]);export{o as __pageData,c as default};
