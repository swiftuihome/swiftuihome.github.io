import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"使用GeometryReader获取父视图尺寸","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/13.1_使用GeometryReader获取父视图尺寸.md","filePath":"custom_views/13.1_使用GeometryReader获取父视图尺寸.md"}'),t={name:"custom_views/13.1_使用GeometryReader获取父视图尺寸.md"};function l(h,s,r,p,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用geometryreader获取父视图尺寸" tabindex="-1">使用GeometryReader获取父视图尺寸 <a class="header-anchor" href="#使用geometryreader获取父视图尺寸" aria-label="Permalink to &quot;使用GeometryReader获取父视图尺寸&quot;">​</a></h1><h2 id="探索-geometryreader-的魔力-✨" tabindex="-1">探索 GeometryReader 的魔力 ✨ <a class="header-anchor" href="#探索-geometryreader-的魔力-✨" aria-label="Permalink to &quot;探索 GeometryReader 的魔力 ✨&quot;">​</a></h2><p><code>GeometryReader</code> 是 SwiftUI 中一个极其强大的工具，它能让你轻松获取父视图的尺寸和坐标空间信息。 想象一下，你的视图可以根据可用空间智能地调整自身大小和布局，这简直太棒了！ 🚀</p><p>使用 <code>GeometryReader</code>，你可以构建出真正响应式的 UI。 无论你的应用运行在什么设备上，或者屏幕方向如何变化，你的组件都能完美适应。</p><h2 id="获取父视图尺寸的奥秘-📏" tabindex="-1">获取父视图尺寸的奥秘 📏 <a class="header-anchor" href="#获取父视图尺寸的奥秘-📏" aria-label="Permalink to &quot;获取父视图尺寸的奥秘 📏&quot;">​</a></h2><p>当你将一个视图放入 <code>GeometryReader</code> 中时，它会为你提供一个 <code>GeometryProxy</code> 对象。 这个代理对象包含了父视图的各种几何信息。</p><p>其中最常用的就是 <code>size</code> 属性，它会告诉你父视图的宽度和高度。 比如，你可以用 <code>geometry.size.width</code> 来获取父视图的宽度。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我的父视图宽度是 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">width</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 占据父视图宽度的80%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.white)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个例子展示了如何让文本视图的宽度动态地适应其父视图的宽度。 你可以根据这些尺寸信息，灵活地调整子视图的布局和大小。</p><h2 id="动态调整子视图布局-📐" tabindex="-1">动态调整子视图布局 📐 <a class="header-anchor" href="#动态调整子视图布局-📐" aria-label="Permalink to &quot;动态调整子视图布局 📐&quot;">​</a></h2><p><code>GeometryReader</code> 不仅仅能获取尺寸，它还能帮助你根据这些尺寸来动态调整子视图的布局。 这对于创建自适应组件至关重要。</p><p>例如，你可能希望一个图片在小屏幕上显示为正方形，而在大屏幕上显示为矩形。 <code>GeometryReader</code> 让这一切变得轻而易举。</p><ul><li><strong>步骤一：</strong> 将你的子视图包裹在 <code>GeometryReader</code> 中。</li><li><strong>步骤二：</strong> 使用 <code>geometry.size</code> 来计算子视图的理想尺寸。</li><li><strong>步骤三：</strong> 将计算出的尺寸应用到子视图的 <code>frame</code> 修饰符上。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myImage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aspectRatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contentMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .fit)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.green)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个例子中，图片会根据父视图的尺寸，动态地调整自身大小，始终占据父视图一半的宽度和高度。 这种灵活性是构建专业级 SwiftUI 应用的关键。</p><h2 id="实际应用场景-💡" tabindex="-1">实际应用场景 💡 <a class="header-anchor" href="#实际应用场景-💡" aria-label="Permalink to &quot;实际应用场景 💡&quot;">​</a></h2><p><code>GeometryReader</code> 在实际开发中有着广泛的应用。 它可以帮助你解决许多复杂的布局问题。</p><ul><li><strong>创建响应式网格布局：</strong> 根据可用空间动态调整每行或每列的元素数量。</li><li><strong>实现自定义进度条：</strong> 进度条的长度可以根据父视图的宽度进行调整。</li><li><strong>构建可滚动视图中的视差效果：</strong> 根据滚动位置和视图尺寸计算偏移量。</li><li><strong>制作自适应文本：</strong> 根据可用宽度调整字体大小或文本截断方式。</li></ul><p>掌握 <code>GeometryReader</code> 将极大地提升你构建 SwiftUI 界面时的能力。 它是你工具箱中不可或缺的一部分！ 🛠️ 赶紧尝试一下吧，你会爱上它的！ ❤️</p>`,19)]))}const g=i(t,[["render",l]]);export{E as __pageData,g as default};
