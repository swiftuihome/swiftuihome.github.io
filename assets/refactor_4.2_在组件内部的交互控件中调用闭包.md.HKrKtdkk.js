import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"在组件内部的交互控件中调用闭包","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/4.2_在组件内部的交互控件中调用闭包.md","filePath":"refactor/4.2_在组件内部的交互控件中调用闭包.md"}'),e={name:"refactor/4.2_在组件内部的交互控件中调用闭包.md"};function p(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="在组件内部的交互控件中调用闭包" tabindex="-1">在组件内部的交互控件中调用闭包 <a class="header-anchor" href="#在组件内部的交互控件中调用闭包" aria-label="Permalink to &quot;在组件内部的交互控件中调用闭包&quot;">​</a></h1><p>在 SwiftUI 中，闭包是一种强大的工具，可以让你在组件内部的交互控件（例如按钮、滑块等）触发特定事件时执行自定义代码。这使得组件能够灵活地响应用户的操作，并将这些操作的结果传递给父视图或其他部分。让我们一起看看如何实现吧！🎉</p><h2 id="闭包属性的声明与调用" tabindex="-1">闭包属性的声明与调用 <a class="header-anchor" href="#闭包属性的声明与调用" aria-label="Permalink to &quot;闭包属性的声明与调用&quot;">​</a></h2><p>首先，你需要在组件中声明一个闭包属性。这个属性定义了组件可以执行的动作。例如，一个自定义按钮组件可能有一个 <code>onTap</code> 闭包，当按钮被点击时调用。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onTap: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Void</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 声明一个无参数的闭包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            onTap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在按钮点击时调用闭包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个例子中，<code>onTap</code> 是一个无参数的闭包，当按钮被点击时，它会被调用。你可以根据需要定义带参数的闭包，以便传递更多信息。</p><h2 id="在交互控件中触发闭包" tabindex="-1">在交互控件中触发闭包 <a class="header-anchor" href="#在交互控件中触发闭包" aria-label="Permalink to &quot;在交互控件中触发闭包&quot;">​</a></h2><p>在组件的 <code>body</code> 中，你需要将闭包与交互控件关联起来。通常，这涉及到在控件的 action 中调用闭包。就像上面的例子展示的那样，<code>Button</code> 的 <code>action</code> 接收一个闭包，当按钮被点击时，这个闭包会被执行。</p><ul><li>确保闭包的调用与用户的交互行为相对应。</li><li>考虑使用 <code>debounce</code> 或 <code>throttle</code> 技术来限制闭包的调用频率，尤其是在处理连续的交互事件时。</li></ul><h2 id="传递数据到闭包" tabindex="-1">传递数据到闭包 <a class="header-anchor" href="#传递数据到闭包" aria-label="Permalink to &quot;传递数据到闭包&quot;">​</a></h2><p>如果需要在闭包中传递数据，你可以定义带参数的闭包。例如，一个滑块组件可能需要将滑块的值传递给父视图。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySlider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sliderValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onValueChanged: (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Void</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 声明一个带 Double 参数的闭包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Slider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $sliderValue, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onEditingChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            onValueChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sliderValue) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在滑块值改变时调用闭包，并传递值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这个例子中，<code>onValueChanged</code> 闭包接收一个 <code>Double</code> 类型的参数，表示滑块的值。当滑块的值改变时，闭包会被调用，并将新的值传递给父视图。</p><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p>闭包在 SwiftUI 组件中有很多实际应用场景。例如：</p><ol><li><strong>自定义按钮</strong>：可以定义 <code>onTap</code> 闭包来处理按钮的点击事件。</li><li><strong>表单输入</strong>：可以定义 <code>onTextChanged</code> 闭包来处理文本框的文本变化事件。</li><li><strong>列表选择</strong>：可以定义 <code>onItemSelected</code> 闭包来处理列表项的选择事件。</li></ol><p>通过使用闭包，你可以创建高度可定制和可重用的 SwiftUI 组件，从而提高开发效率和代码质量。记住，清晰地定义闭包的参数和返回值类型，可以使你的代码更易于理解和维护。🚀</p>`,17)]))}const c=i(e,[["render",p]]);export{o as __pageData,c as default};
