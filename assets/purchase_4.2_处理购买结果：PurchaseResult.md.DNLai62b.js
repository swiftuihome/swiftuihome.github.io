import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"处理购买结果：PurchaseResult","description":"","frontmatter":{},"headers":[],"relativePath":"purchase/4.2_处理购买结果：PurchaseResult.md","filePath":"purchase/4.2_处理购买结果：PurchaseResult.md"}'),l={name:"purchase/4.2_处理购买结果：PurchaseResult.md"};function t(h,s,p,r,k,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="处理购买结果-purchaseresult" tabindex="-1">处理购买结果：PurchaseResult <a class="header-anchor" href="#处理购买结果-purchaseresult" aria-label="Permalink to &quot;处理购买结果：PurchaseResult&quot;">​</a></h1><p>当用户完成购买流程后，StoreKit 会返回一个 <code>PurchaseResult</code>。这个结果至关重要，因为它决定了你的应用如何响应。理解 <code>PurchaseResult</code> 的不同状态是成功处理购买的关键。你将看到它如何简化复杂的购买逻辑。</p><h2 id="理解-purchaseresult-的状态" tabindex="-1">理解 PurchaseResult 的状态 <a class="header-anchor" href="#理解-purchaseresult-的状态" aria-label="Permalink to &quot;理解 PurchaseResult 的状态&quot;">​</a></h2><p><code>PurchaseResult</code> 枚举有几个不同的案例，每个都代表了购买交易的不同阶段或结果。正确处理这些状态能确保你的应用提供流畅的用户体验。例如，一个成功的购买会立即解锁内容。</p><ul><li><strong><code>.success(Product.Purchase)</code></strong>: 🥳 这表示购买已成功完成。你现在可以为用户解锁他们购买的内容或服务了。这是最令人兴奋的结果！</li><li><strong><code>.pending</code></strong>: ⏳ 购买正在等待外部操作，例如“询问购买”或家长批准。你需要等待进一步的通知才能完成交易。</li><li><strong><code>.cancelled</code></strong>: ❌ 用户取消了购买。在这种情况下，你不需要采取任何行动，只需保持原样即可。</li><li><strong><code>.failed(Error)</code></strong>: 😟 购买失败了，并附带一个错误。你需要处理这个错误，并可能向用户显示一条消息。</li></ul><h2 id="处理成功的购买" tabindex="-1">处理成功的购买 <a class="header-anchor" href="#处理成功的购买" aria-label="Permalink to &quot;处理成功的购买&quot;">​</a></h2><p>当 <code>PurchaseResult</code> 返回 <code>.success</code> 时，你将获得一个 <code>Product.Purchase</code> 对象。这个对象包含了所有关于已完成交易的详细信息。你需要验证这个购买，并将其记录下来。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> purchase)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 验证并处理购买</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;购买成功！交易ID: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(purchase.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 接下来，你需要验证这个购买并更新用户权限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .pending</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;购买待处理，等待外部操作。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .cancelled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;购买已取消。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">failed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;购买失败: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localizedDescription</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="验证与更新用户权限" tabindex="-1">验证与更新用户权限 <a class="header-anchor" href="#验证与更新用户权限" aria-label="Permalink to &quot;验证与更新用户权限&quot;">​</a></h2><p>在收到成功的 <code>PurchaseResult</code> 后，下一步是验证购买并更新用户的订阅状态。这通常涉及检查交易的有效性，并将其持久化到你的应用数据中。大约 99% 的成功购买都需要这一步。</p><ol><li><strong>验证交易</strong>: 确保交易是真实的，并且没有被篡改。StoreKit 2 提供了内置的验证机制。</li><li><strong>更新用户界面</strong>: 根据购买结果更新 UI，例如显示“已订阅”状态。</li><li><strong>持久化数据</strong>: 将购买信息保存到本地或远程服务器，以便用户下次打开应用时仍能访问其内容。</li></ol><p>通过精心处理 <code>PurchaseResult</code> 的每种情况，你将构建一个健壮且用户友好的订阅系统。这不仅提升了用户满意度，也确保了你的应用内购流程的可靠性。🚀</p>`,12)]))}const u=i(l,[["render",t]]);export{o as __pageData,u as default};
