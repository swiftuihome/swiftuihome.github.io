import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"实现 sizeThatFits 方法计算容器大小","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/3.2_实现 sizeThatFits 方法计算容器大小.md","filePath":"advanced/3.2_实现 sizeThatFits 方法计算容器大小.md"}'),h={name:"advanced/3.2_实现 sizeThatFits 方法计算容器大小.md"};function e(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="实现-sizethatfits-方法计算容器大小" tabindex="-1">实现 sizeThatFits 方法计算容器大小 <a class="header-anchor" href="#实现-sizethatfits-方法计算容器大小" aria-label="Permalink to &quot;实现 sizeThatFits 方法计算容器大小&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，自定义布局协议允许你完全掌控视图的排列方式。<code>sizeThatFits</code> 方法是这个协议的核心，它决定了你的自定义布局容器应该占据多大的空间。让我们深入了解如何实现它！🚀</p></blockquote><h2 id="理解-sizethatfits-方法" tabindex="-1">理解 <code>sizeThatFits</code> 方法 <a class="header-anchor" href="#理解-sizethatfits-方法" aria-label="Permalink to &quot;理解 \`sizeThatFits\` 方法&quot;">​</a></h2><p><code>sizeThatFits</code> 方法的目标是根据给定的提案（<code>proposal</code>）计算并返回布局容器的最佳尺寸。这个提案本质上是父视图建议的可用空间。你需要考虑子视图的大小和布局规则，来确定最合适的容器尺寸。</p><ul><li><strong>提案（<code>proposal</code>）</strong>: 包含了父视图建议的宽度和高度。</li><li><strong>子视图</strong>: 布局容器内的所有视图。</li><li><strong>返回值</strong>: 一个 <code>CGSize</code> 值，表示布局容器期望的尺寸。</li></ul><h2 id="实现-sizethatfits-的关键步骤" tabindex="-1">实现 <code>sizeThatFits</code> 的关键步骤 <a class="header-anchor" href="#实现-sizethatfits-的关键步骤" aria-label="Permalink to &quot;实现 \`sizeThatFits\` 的关键步骤&quot;">​</a></h2><p>实现 <code>sizeThatFits</code> 方法需要仔细考虑以下几个方面：</p><ol><li><strong>遍历子视图</strong>: 你需要遍历布局容器中的每一个子视图，并确定它们各自需要的尺寸。</li><li><strong>考虑布局规则</strong>: 根据你的布局逻辑（例如，水平排列、垂直排列、网格排列等），计算子视图在容器中的位置和大小。</li><li><strong>计算容器尺寸</strong>: 根据子视图的尺寸和布局规则，计算出能够容纳所有子视图的最小容器尺寸。</li></ol><p>例如，如果你正在创建一个水平布局，你需要计算所有子视图宽度的总和，以及最大子视图的高度。容器的宽度就是所有子视图宽度的总和，高度就是最大子视图的高度。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sizeThatFits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proposal: ProposedViewSize, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Subviews, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CacheData) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGSize {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 遍历子视图，获取它们的尺寸</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subviewSizes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subviews.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sizeThatFits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.unspecified) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 计算总宽度和最大高度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subviewSizes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subviewSizes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height })</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. 返回容器尺寸</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: totalWidth, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: maxHeight)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="优化-sizethatfits-的性能" tabindex="-1">优化 <code>sizeThatFits</code> 的性能 <a class="header-anchor" href="#优化-sizethatfits-的性能" aria-label="Permalink to &quot;优化 \`sizeThatFits\` 的性能&quot;">​</a></h2><p><code>sizeThatFits</code> 方法可能会被频繁调用，因此优化其性能至关重要。以下是一些建议：</p><ul><li><strong>缓存</strong>: 如果子视图的尺寸不会频繁变化，你可以将它们的尺寸缓存起来，避免重复计算。</li><li><strong>避免不必要的计算</strong>: 只在必要时才进行计算。例如，如果提案的尺寸没有变化，你可以直接返回缓存的容器尺寸。</li><li><strong>使用高效的算法</strong>: 选择合适的算法来计算容器尺寸。例如，使用 <code>reduce</code> 方法来计算总宽度，使用 <code>max(by:)</code> 方法来查找最大高度。</li></ul><p>通过精心设计 <code>sizeThatFits</code> 方法，你可以创建出高效且灵活的自定义布局，让你的 SwiftUI 应用更加出色！🎉</p>`,14)]))}const g=i(h,[["render",e]]);export{o as __pageData,g as default};
