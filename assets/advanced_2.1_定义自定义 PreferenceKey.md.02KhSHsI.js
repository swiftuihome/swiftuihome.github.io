import{_ as s,c as a,o as i,ag as n}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"定义自定义 PreferenceKey","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/2.1_定义自定义 PreferenceKey.md","filePath":"advanced/2.1_定义自定义 PreferenceKey.md"}'),r={name:"advanced/2.1_定义自定义 PreferenceKey.md"};function l(t,e,p,c,h,d){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="定义自定义-preferencekey" tabindex="-1">定义自定义 PreferenceKey <a class="header-anchor" href="#定义自定义-preferencekey" aria-label="Permalink to &quot;定义自定义 PreferenceKey&quot;">​</a></h1><h2 id="理解-preferencekey-的核心概念" tabindex="-1">理解 PreferenceKey 的核心概念 <a class="header-anchor" href="#理解-preferencekey-的核心概念" aria-label="Permalink to &quot;理解 PreferenceKey 的核心概念&quot;">​</a></h2><p>定义自定义 <code>PreferenceKey</code> 是 SwiftUI 中实现逆向数据流的关键一步。 🚀 它允许子视图向父视图传递信息，这在传统的数据流中是无法直接实现的。 你会发现这对于构建复杂的用户界面非常有用。</p><p><code>PreferenceKey</code> 本质上是一个协议，你需要创建一个遵循此协议的结构体。 这个结构体定义了你想要传递的数据类型以及如何合并多个相同类型的偏好值。</p><h2 id="创建你的第一个-preferencekey" tabindex="-1">创建你的第一个 PreferenceKey <a class="header-anchor" href="#创建你的第一个-preferencekey" aria-label="Permalink to &quot;创建你的第一个 PreferenceKey&quot;">​</a></h2><p>要定义一个 <code>PreferenceKey</code>，你需要指定两个关联类型：<code>Value</code> 和 <code>reduce(value:nextValue:)</code> 方法。 <code>Value</code> 是你希望在视图层级中传递的数据类型。 例如，你可以传递一个 <code>CGFloat</code> 来表示高度，或者一个 <code>String</code> 来表示标题。</p><p><code>reduce(value:nextValue:)</code> 方法至关重要。 当视图层级中有多个视图设置了相同的 <code>PreferenceKey</code> 时，系统需要知道如何将这些值合并成一个最终值。 你可以根据需求选择不同的合并策略。</p><p>例如，如果你想获取所有子视图的最大高度，你可以在 <code>reduce</code> 方法中返回两个值中的较大者。 如果你想要连接所有子视图的字符串，你可以将它们拼接起来。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPreferenceKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferenceKey </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultValue: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGFloat, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGFloat) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个例子中，<code>defaultValue</code> 是当没有视图设置此 <code>PreferenceKey</code> 时使用的默认值。 <code>reduce</code> 方法将当前值与下一个值进行比较，并保留最大值。 这是一个非常常见的用例，尤其是在测量视图尺寸时。</p><h2 id="preferencekey-的实际应用" tabindex="-1">PreferenceKey 的实际应用 <a class="header-anchor" href="#preferencekey-的实际应用" aria-label="Permalink to &quot;PreferenceKey 的实际应用&quot;">​</a></h2><p><code>PreferenceKey</code> 的强大之处在于它能够让你在视图层级中“向上”传递信息。 想象一下，你有一个复杂的布局，其中子视图的尺寸会影响父视图的布局。 使用 <code>PreferenceKey</code>，子视图可以将其尺寸信息传递给父视图，从而实现动态调整。</p><ul><li><strong>同步子视图尺寸</strong>: 你可以定义一个 <code>PreferenceKey</code> 来收集所有子视图的宽度或高度，然后父视图可以使用这些信息来统一它们的尺寸。</li><li><strong>动态导航栏标题</strong>: 子视图可以向父视图传递一个字符串，父视图将其用作导航栏的标题。 🤩</li><li><strong>实现滚动视差效果</strong>: 通过传递滚动偏移量，你可以创建出令人惊叹的视差效果。</li></ul><p><code>PreferenceKey</code> 提供了一种优雅且强大的方式来管理 SwiftUI 中的逆向数据流。 掌握它将极大地提升你构建复杂和响应式界面的能力。 这是一个非常值得投入时间学习的 SwiftUI 高级概念！ 💯</p>`,14)]))}const y=s(r,[["render",l]]);export{o as __pageData,y as default};
