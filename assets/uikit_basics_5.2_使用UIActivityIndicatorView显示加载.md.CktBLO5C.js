import{_ as s,c as a,o as n,ag as t}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"5.2_使用UIActivityIndicatorView显示加载","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/5.2_使用UIActivityIndicatorView显示加载.md","filePath":"uikit/basics/5.2_使用UIActivityIndicatorView显示加载.md"}'),e={name:"uikit/basics/5.2_使用UIActivityIndicatorView显示加载.md"};function l(p,i,r,h,d,c){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="_5-2-使用uiactivityindicatorview显示加载" tabindex="-1">5.2_使用UIActivityIndicatorView显示加载 <a class="header-anchor" href="#_5-2-使用uiactivityindicatorview显示加载" aria-label="Permalink to &quot;5.2_使用UIActivityIndicatorView显示加载&quot;">​</a></h1><h2 id="什么是uiactivityindicatorview" tabindex="-1">什么是UIActivityIndicatorView？ <a class="header-anchor" href="#什么是uiactivityindicatorview" aria-label="Permalink to &quot;什么是UIActivityIndicatorView？&quot;">​</a></h2><p>当你开发iOS应用时，用户体验至关重要。想象一下，你的应用正在从网络加载数据，或者执行一个耗时的操作。如果屏幕没有任何反馈，用户可能会感到困惑甚至认为应用卡住了。这就是 <code>UIActivityIndicatorView</code> 发挥作用的地方！ 🚀 它是一个标准的UIKit控件，用于向用户显示一个旋转的加载指示器，表明有任务正在后台进行。</p><p>它非常直观，能够有效地传达“请稍候”的信息。</p><h2 id="创建和配置uiactivityindicatorview" tabindex="-1">创建和配置UIActivityIndicatorView <a class="header-anchor" href="#创建和配置uiactivityindicatorview" aria-label="Permalink to &quot;创建和配置UIActivityIndicatorView&quot;">​</a></h2><p>在不使用Storyboard的情况下，创建 <code>UIActivityIndicatorView</code> 就像创建其他任何视图一样简单。你可以在代码中实例化它，并将其添加到你的视图层级中。</p><ol><li><p><strong>实例化</strong>:</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activityIndicator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIActivityIndicatorView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .large)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，<code>.large</code> 样式提供了一个更大的指示器，而 <code>.medium</code> 则更小巧。</p></li><li><p><strong>设置位置</strong>:</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">activityIndicator.center </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view.center</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通常，你会希望加载指示器显示在屏幕的中央，这样用户可以清晰地看到它。</p></li><li><p><strong>添加到视图</strong>:</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activityIndicator)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>别忘了这一步，否则它不会显示出来！</p></li><li><p><strong>隐藏时停止动画</strong>:</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">activityIndicator.hidesWhenStopped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是一个非常实用的属性。当指示器停止动画时，它会自动从视图中隐藏，省去了你手动移除或设置 <code>isHidden</code> 的麻烦。</p></li></ol><h2 id="控制加载动画" tabindex="-1">控制加载动画 <a class="header-anchor" href="#控制加载动画" aria-label="Permalink to &quot;控制加载动画&quot;">​</a></h2><p><code>UIActivityIndicatorView</code> 的核心功能就是它的动画。你可以通过两个简单的方法来控制它：</p><ul><li><code>startAnimating()</code>: 调用此方法会启动加载指示器的旋转动画。通常在开始执行耗时任务之前调用。</li><li><code>stopAnimating()</code>: 当任务完成时，调用此方法会停止动画。如果 <code>hidesWhenStopped</code> 设置为 <code>true</code>，指示器也会随之隐藏。</li></ul><p>例如，当你点击一个按钮开始网络请求时：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    activityIndicator.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startAnimating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始加载动画</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模拟网络请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DispatchQueue.main.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asyncAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">deadline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.activityIndicator.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stopAnimating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 停止加载动画</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数据加载完成！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个例子中，我们用 <code>DispatchQueue.main.asyncAfter</code> 模拟了3秒的网络延迟。</p><h2 id="最佳实践与用户体验" tabindex="-1">最佳实践与用户体验 <a class="header-anchor" href="#最佳实践与用户体验" aria-label="Permalink to &quot;最佳实践与用户体验&quot;">​</a></h2><p>使用 <code>UIActivityIndicatorView</code> 时，有几个最佳实践可以显著提升用户体验：</p><ul><li><strong>及时显示与隐藏</strong>: 确保在任务开始时立即显示指示器，并在任务结束时立即隐藏。延迟显示或过早隐藏都会让用户感到困惑。</li><li><strong>避免长时间显示</strong>: 如果任务需要很长时间（例如超过10-15秒），考虑提供一个进度条 (<code>UIProgressView</code>) 或其他更详细的反馈，而不是仅仅一个旋转的指示器。</li><li><strong>禁用用户交互</strong>: 在加载过程中，你可能希望禁用一些用户交互，例如按钮点击，以防止用户重复操作或产生意外行为。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.isUserInteractionEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 禁用整个视图的交互</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... 任务完成后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.isUserInteractionEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 重新启用交互</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>这能有效避免“幽灵点击”问题。</li></ul><p>通过遵循这些简单的指导原则，你将能够有效地利用 <code>UIActivityIndicatorView</code>，为你的iOS应用带来更流畅、更专业的加载体验。 🌟 你的用户一定会感谢你的细心！</p>`,17)]))}const g=s(e,[["render",l]]);export{o as __pageData,g as default};
