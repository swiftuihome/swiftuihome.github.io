import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const d=JSON.parse('{"title":"掌握 UIViewControllerRepresentable 协议","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/12.2_实现 UIViewControllerRepresentable 协议.md","filePath":"advanced/12.2_实现 UIViewControllerRepresentable 协议.md"}'),l={name:"advanced/12.2_实现 UIViewControllerRepresentable 协议.md"};function t(p,s,r,h,k,E){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="掌握-uiviewcontrollerrepresentable-协议" tabindex="-1">掌握 UIViewControllerRepresentable 协议 <a class="header-anchor" href="#掌握-uiviewcontrollerrepresentable-协议" aria-label="Permalink to &quot;掌握 UIViewControllerRepresentable 协议&quot;">​</a></h1><blockquote><p>UIViewControllerRepresentable 协议是 SwiftUI 与 UIKit 之间的一座桥梁，它允许你在 SwiftUI 视图中无缝集成 UIKit 的视图控制器。这为你打开了无限可能，让你能够利用 UIKit 强大的功能，例如使用 UIKit 独有的控件或集成现有的 UIKit 代码库。</p></blockquote><h2 id="协议的核心要求" tabindex="-1">协议的核心要求 <a class="header-anchor" href="#协议的核心要求" aria-label="Permalink to &quot;协议的核心要求&quot;">​</a></h2><p>要实现 UIViewControllerRepresentable 协议，你需要遵循以下两个关键步骤：</p><ol><li><p><strong>创建 UIViewController</strong>: 你需要创建一个继承自 UIViewController 的类，并在这个类中实现你想要的 UIKit 视图控制器的功能。</p></li><li><p><strong>实现 makeUIViewController(context:) 方法</strong>: 这个方法负责创建并返回你的 UIKit 视图控制器实例。这是 SwiftUI 如何知道要显示哪个 UIKit 视图控制器的关键。</p></li><li><p><strong>实现 updateUIViewController(_:context:) 方法</strong>: 这个方法允许你在 SwiftUI 视图的状态发生变化时更新你的 UIKit 视图控制器。例如，你可以根据 SwiftUI 的绑定变量来更新 UIKit 视图控制器的属性。</p></li></ol><h2 id="实际应用示例-💡" tabindex="-1">实际应用示例 💡 <a class="header-anchor" href="#实际应用示例-💡" aria-label="Permalink to &quot;实际应用示例 💡&quot;">​</a></h2><p>假设你想在 SwiftUI 中使用 UIKit 的 UIImagePickerController 来让用户选择照片。你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImagePicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewControllerRepresentable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image: UIImage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.presentationMode) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> presentationMode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIImagePickerController {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> picker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIImagePickerController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        picker.delegate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.coordinator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> picker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiViewController: UIImagePickerController, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeCoordinator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Coordinator {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Coordinator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Coordinator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIImagePickerControllerDelegate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UINavigationControllerDelegate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent: ImagePicker</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent: ImagePicker) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> imagePickerController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> picker: UIImagePickerController, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">didFinishPickingMediaWithInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info: [UIImagePickerController.InfoKey : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info[.originalImage] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIImage {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                parent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiImage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            parent.presentationMode.wrappedValue.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dismiss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>在这个例子中，<code>ImagePicker</code> 结构体实现了 UIViewControllerRepresentable 协议，并使用 UIImagePickerController 来让用户选择照片。<code>Coordinator</code> 类处理 UIImagePickerController 的代理回调，并将选择的图像传递回 SwiftUI 视图。</p><h2 id="深入理解-context-🧐" tabindex="-1">深入理解 Context 🧐 <a class="header-anchor" href="#深入理解-context-🧐" aria-label="Permalink to &quot;深入理解 Context 🧐&quot;">​</a></h2><p>在 makeUIViewController(context:) 和 updateUIViewController(_:context:) 方法中，你会看到一个 context 参数。这个 context 参数提供了关于 SwiftUI 环境的信息，例如：</p><ul><li><strong>coordinator</strong>: 你可以使用 coordinator 来处理 UIKit 视图控制器的代理回调。</li><li><strong>environment</strong>: 你可以访问 SwiftUI 的环境值，例如颜色方案或设备方向。</li></ul><h2 id="总结-🎉" tabindex="-1">总结 🎉 <a class="header-anchor" href="#总结-🎉" aria-label="Permalink to &quot;总结 🎉&quot;">​</a></h2><p>UIViewControllerRepresentable 协议是 SwiftUI 与 UIKit 交互的关键。通过理解并掌握这个协议，你可以充分利用 UIKit 的强大功能，并在 SwiftUI 应用中创建更丰富、更强大的用户界面。记住，实践是最好的老师！尝试不同的 UIKit 视图控制器，并探索如何将它们集成到你的 SwiftUI 应用中。你会发现，这为你打开了一个充满可能性的新世界！</p>`,14)]))}const c=i(l,[["render",t]]);export{d as __pageData,c as default};
