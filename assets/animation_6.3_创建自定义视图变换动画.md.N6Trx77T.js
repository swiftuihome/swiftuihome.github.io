import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"6.3_创建自定义视图变换动画","description":"","frontmatter":{},"headers":[],"relativePath":"animation/6.3_创建自定义视图变换动画.md","filePath":"animation/6.3_创建自定义视图变换动画.md"}'),t={name:"animation/6.3_创建自定义视图变换动画.md"};function l(h,s,p,r,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_6-3-创建自定义视图变换动画" tabindex="-1">6.3_创建自定义视图变换动画 <a class="header-anchor" href="#_6-3-创建自定义视图变换动画" aria-label="Permalink to &quot;6.3_创建自定义视图变换动画&quot;">​</a></h1><h2 id="创建自定义视图变换动画" tabindex="-1">创建自定义视图变换动画 <a class="header-anchor" href="#创建自定义视图变换动画" aria-label="Permalink to &quot;创建自定义视图变换动画&quot;">​</a></h2><p>想要让你的 SwiftUI 视图动起来吗？🎉 使用 <code>GeometryEffect</code> 协议，你可以创建令人惊叹的自定义视图变换动画！这就像给你的视图施了魔法，让它们可以旋转、缩放、移动，甚至扭曲成各种形状。准备好释放你的创造力了吗？🚀</p><h2 id="探索-geometryeffect-的奥秘" tabindex="-1">探索 <code>GeometryEffect</code> 的奥秘 <a class="header-anchor" href="#探索-geometryeffect-的奥秘" aria-label="Permalink to &quot;探索 \`GeometryEffect\` 的奥秘&quot;">​</a></h2><p><code>GeometryEffect</code> 协议允许你修改视图的几何形状。它通过改变视图的坐标空间来实现动画效果。你可以使用它来创建各种各样的动画，例如旋转、缩放、平移和倾斜。想象一下，你可以让一个按钮在被点击时旋转放大，或者让一个列表项在出现时从屏幕外滑动进来。可能性是无限的！✨</p><ul><li><code>GeometryEffect</code> 协议的核心在于 <code>effectValue(size:)</code> 方法。</li><li>这个方法接收视图的大小作为输入，并返回一个 <code>ProjectionTransform</code> 结构体。</li><li><code>ProjectionTransform</code> 描述了如何变换视图的坐标空间。</li></ul><h2 id="实现自定义变换" tabindex="-1">实现自定义变换 <a class="header-anchor" href="#实现自定义变换" aria-label="Permalink to &quot;实现自定义变换&quot;">​</a></h2><p>要创建一个自定义视图变换动画，你需要：</p><ol><li>创建一个符合 <code>GeometryEffect</code> 协议的结构体。</li><li>在这个结构体中，定义一个或多个属性来控制动画。</li><li>实现 <code>effectValue(size:)</code> 方法，根据属性值计算 <code>ProjectionTransform</code>。</li></ol><p>例如，你可以创建一个 <code>RotationEffect</code> 结构体，它有一个 <code>angle</code> 属性来控制旋转角度。在 <code>effectValue(size:)</code> 方法中，你可以使用 <code>CGAffineTransform</code> 来创建一个旋转变换，并将其转换为 <code>ProjectionTransform</code>。</p><h2 id="让动画更流畅" tabindex="-1">让动画更流畅 <a class="header-anchor" href="#让动画更流畅" aria-label="Permalink to &quot;让动画更流畅&quot;">​</a></h2><p>为了让动画看起来更流畅，你可以使用 SwiftUI 的 <code>withAnimation</code> 函数。<code>withAnimation</code> 函数允许你指定动画的持续时间、缓动函数和其他选项。例如，你可以使用 <code>.easeInOut</code> 缓动函数来创建一个缓入缓出的动画效果。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RotationEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GeometryEffect </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> angle: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> effectValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGSize) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProjectionTransform {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGAffineTransform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotationAngle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(angle))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ProjectionTransform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rotation)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transform</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;旋转&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 改变状态，触发动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">modifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RotationEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: currentAngle))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="实践出真知" tabindex="-1">实践出真知 <a class="header-anchor" href="#实践出真知" aria-label="Permalink to &quot;实践出真知&quot;">​</a></h2><p>现在，轮到你动手实践了！尝试创建一些简单的自定义视图变换动画，例如缩放、平移或倾斜。然后，尝试将这些动画组合起来，创建更复杂的动画效果。记住，实践是最好的老师！💪 祝你玩得开心！🎉</p>`,16)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
