import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"使用@IBDesignable和@IBInspectable预览自定义视图","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/9.4_使用@IBDesignable和@IBInspectable预览.md","filePath":"swift/uikit/advanced/9.4_使用@IBDesignable和@IBInspectable预览.md"}'),l={name:"swift/uikit/advanced/9.4_使用@IBDesignable和@IBInspectable预览.md"};function p(t,s,r,h,d,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用-ibdesignable和-ibinspectable预览自定义视图" tabindex="-1">使用@IBDesignable和@IBInspectable预览自定义视图 <a class="header-anchor" href="#使用-ibdesignable和-ibinspectable预览自定义视图" aria-label="Permalink to &quot;使用@IBDesignable和@IBInspectable预览自定义视图&quot;">​</a></h1><blockquote><p>想不想在Interface Builder中直接看到你的自定义视图的效果，而不用每次都运行App？<code>@IBDesignable</code>就是你的秘密武器！ 它可以让你在设计时就预览自定义视图，大大提高开发效率。 想象一下，实时调整颜色、大小，简直不要太方便！</p></blockquote><h2 id="什么是-ibdesignable" tabindex="-1">什么是<code>@IBDesignable</code>？ <a class="header-anchor" href="#什么是-ibdesignable" aria-label="Permalink to &quot;什么是\`@IBDesignable\`？&quot;">​</a></h2><p><code>@IBDesignable</code>是一个编译器指令，告诉Xcode你的自定义<code>UIView</code>或<code>NSView</code>可以在Interface Builder中渲染。 简单来说，就是让你的代码和设计稿无缝衔接。 这样，你就可以在设计阶段就看到最终效果，减少不必要的调试时间。</p><h2 id="如何使用-ibdesignable" tabindex="-1">如何使用<code>@IBDesignable</code>？ <a class="header-anchor" href="#如何使用-ibdesignable" aria-label="Permalink to &quot;如何使用\`@IBDesignable\`？&quot;">​</a></h2><p>使用方法非常简单！ 只需要在你的自定义视图类声明前加上<code>@IBDesignable</code>即可。 例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@IBDesignable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIView </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 你的自定义视图代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>加上这行代码后，打开你的Storyboard或XIB文件，选中你的自定义视图，Xcode就会自动渲染它。 如果你的视图没有立即更新，可以尝试Build一下项目 (Command + B)。</p><h2 id="使用-ibinspectable添加可配置属性" tabindex="-1">使用<code>@IBInspectable</code>添加可配置属性 <a class="header-anchor" href="#使用-ibinspectable添加可配置属性" aria-label="Permalink to &quot;使用\`@IBInspectable\`添加可配置属性&quot;">​</a></h2><p>光能预览还不够，如果能在Interface Builder中直接修改属性就更棒了！ <code>@IBInspectable</code>可以让你在属性面板中直接调整自定义视图的属性。 比如，你可以添加一个<code>borderColor</code>属性，让设计师直接在Interface Builder中修改边框颜色。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@IBDesignable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIView </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> borderColor: UIColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        didSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            layer.borderColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> borderColor.cgColor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> borderWidth: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        didSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            layer.borderWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> borderWidth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个例子中，我们添加了<code>borderColor</code>和<code>borderWidth</code>两个属性，并使用<code>@IBInspectable</code>标记。 现在，在Interface Builder中选中<code>MyCustomView</code>，你就可以在属性面板中看到这两个属性，并直接修改它们的值。 记得在<code>didSet</code>中更新视图的layer属性，这样修改才能生效。</p><h2 id="常见问题和注意事项" tabindex="-1">常见问题和注意事项 <a class="header-anchor" href="#常见问题和注意事项" aria-label="Permalink to &quot;常见问题和注意事项&quot;">​</a></h2><ul><li><strong>性能问题：</strong> 频繁的渲染可能会影响Interface Builder的性能。 尽量避免在<code>draw(_:)</code>方法中进行复杂的计算。</li><li><strong>代码错误：</strong> 如果你的代码有错误，Interface Builder可能无法正确渲染视图。 仔细检查你的代码，确保没有语法错误或逻辑错误。</li><li><strong>自动更新：</strong> 有时候Interface Builder可能不会自动更新视图。 尝试Build一下项目，或者重启Xcode。</li><li><strong>约束冲突：</strong> 确保你的视图有正确的Auto Layout约束，否则可能无法正确显示。</li></ul><h2 id="实例演示-创建一个可配置的圆角按钮" tabindex="-1">实例演示：创建一个可配置的圆角按钮 <a class="header-anchor" href="#实例演示-创建一个可配置的圆角按钮" aria-label="Permalink to &quot;实例演示：创建一个可配置的圆角按钮&quot;">​</a></h2><p>让我们创建一个可配置圆角按钮的例子，来加深理解。</p><ol><li>创建一个新的<code>UIView</code>子类，命名为<code>RoundedButton</code>。</li><li>在类声明前加上<code>@IBDesignable</code>。</li><li>添加一个<code>cornerRadius</code>属性，并使用<code>@IBInspectable</code>标记。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@IBDesignable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RoundedButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIButton </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @IBInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cornerRadius: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        didSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            layer.cornerRadius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cornerRadius</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            layer.masksToBounds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cornerRadius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>现在，你可以在Interface Builder中拖拽一个<code>UIButton</code>，将其类设置为<code>RoundedButton</code>，然后在属性面板中修改<code>cornerRadius</code>的值，实时看到圆角效果！ 🎉</p><p>通过使用<code>@IBDesignable</code>和<code>@IBInspectable</code>，你可以极大地提高你的UI开发效率，让你的自定义视图在Interface Builder中完美呈现。 赶紧尝试一下吧！</p>`,20)]))}const b=i(l,[["render",p]]);export{o as __pageData,b as default};
