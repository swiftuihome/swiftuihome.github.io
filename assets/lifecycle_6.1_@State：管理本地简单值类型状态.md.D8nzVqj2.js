import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"SwiftUI 中的 @State：本地状态管理的利器 🚀","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/6.1_@State：管理本地简单值类型状态.md","filePath":"lifecycle/6.1_@State：管理本地简单值类型状态.md"}'),n={name:"lifecycle/6.1_@State：管理本地简单值类型状态.md"};function l(p,s,h,r,o,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="swiftui-中的-state-本地状态管理的利器-🚀" tabindex="-1">SwiftUI 中的 @State：本地状态管理的利器 🚀 <a class="header-anchor" href="#swiftui-中的-state-本地状态管理的利器-🚀" aria-label="Permalink to &quot;SwiftUI 中的 @State：本地状态管理的利器 🚀&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，<code>@State</code> 是一个强大的属性包装器，专门用于管理视图内部的简单值类型状态。它允许你轻松地在视图中存储和修改数据，并自动触发视图的更新，从而实现动态的用户界面。是不是很棒？🎉</p></blockquote><h2 id="什么是-state" tabindex="-1">什么是 @State？ <a class="header-anchor" href="#什么是-state" aria-label="Permalink to &quot;什么是 @State？&quot;">​</a></h2><p><code>@State</code> 实际上是一个“状态容器”，它持有视图需要跟踪的数据。当这个数据发生变化时，SwiftUI 会自动重新渲染视图，以反映最新的状态。这使得构建响应式 UI 变得非常简单！</p><ul><li><code>@State</code> 只能用于 <code>struct</code> 类型的视图，因为 <code>struct</code> 是值类型，每次修改都会创建一个新的实例。</li><li><code>@State</code> 声明的属性应该是 <code>private</code> 的，以防止从外部直接修改状态。</li></ul><h2 id="如何使用-state" tabindex="-1">如何使用 @State？ <a class="header-anchor" href="#如何使用-state" aria-label="Permalink to &quot;如何使用 @State？&quot;">​</a></h2><p>使用 <code>@State</code> 非常简单。你只需要在声明一个属性时，在其前面加上 <code>@State</code> 即可。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;计数器：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(counter)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;增加&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个例子中，<code>counter</code> 是一个 <code>@State</code> 属性，它存储了一个整数值。当点击“增加”按钮时，<code>counter</code> 的值会增加，SwiftUI 会自动更新 <code>Text</code> 视图，显示新的计数器值。</p><h2 id="state-的重要特性" tabindex="-1">@State 的重要特性 <a class="header-anchor" href="#state-的重要特性" aria-label="Permalink to &quot;@State 的重要特性&quot;">​</a></h2><ul><li><strong>自动更新视图：</strong> 当 <code>@State</code> 属性的值发生变化时，SwiftUI 会自动重新渲染视图，以反映最新的状态。</li><li><strong>本地状态管理：</strong> <code>@State</code> 用于管理视图自身的本地状态，不应该用于在多个视图之间共享数据。</li><li><strong>简单易用：</strong> 使用 <code>@State</code> 非常简单，只需要在声明属性时加上 <code>@State</code> 即可。</li></ul><h2 id="使用-state-的注意事项" tabindex="-1">使用 @State 的注意事项 <a class="header-anchor" href="#使用-state-的注意事项" aria-label="Permalink to &quot;使用 @State 的注意事项&quot;">​</a></h2><ol><li><strong>只用于简单值类型：</strong> <code>@State</code> 最适合用于管理简单的值类型，例如 <code>Int</code>、<code>String</code>、<code>Bool</code> 等。对于更复杂的数据类型，可以考虑使用 <code>@StateObject</code> 或 <code>@ObservedObject</code>。</li><li><strong>避免过度使用：</strong> 不要将所有的数据都声明为 <code>@State</code> 属性。只将那些需要触发视图更新的数据声明为 <code>@State</code> 属性。</li><li><strong>初始化：</strong> 确保 <code>@State</code> 属性在声明时进行初始化，避免出现意外的错误。</li></ol><p>总而言之，<code>@State</code> 是 SwiftUI 中一个非常重要的属性包装器，它可以帮助你轻松地管理视图的本地状态，并构建动态的用户界面。掌握 <code>@State</code> 的使用，将使你的 SwiftUI 开发更加高效！👍</p>`,14)]))}const E=a(n,[["render",l]]);export{k as __pageData,E as default};
