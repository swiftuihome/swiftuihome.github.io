import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"11.1_loadView方法的用途","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/11.1_loadView方法的用途.md","filePath":"uikit/basics/11.1_loadView方法的用途.md"}'),l={name:"uikit/basics/11.1_loadView方法的用途.md"};function t(d,s,h,p,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_11-1-loadview方法的用途" tabindex="-1">11.1_loadView方法的用途 <a class="header-anchor" href="#_11-1-loadview方法的用途" aria-label="Permalink to &quot;11.1_loadView方法的用途&quot;">​</a></h1><h2 id="loadview-方法的核心作用" tabindex="-1"><code>loadView</code> 方法的核心作用 <a class="header-anchor" href="#loadview-方法的核心作用" aria-label="Permalink to &quot;\`loadView\` 方法的核心作用&quot;">​</a></h2><p><code>loadView</code> 方法是 <code>UIViewController</code> 生命周期中一个至关重要的环节。它负责创建视图控制器所管理的根视图 (<code>self.view</code>)。当视图控制器的 <code>view</code> 属性被访问，但尚未创建时，系统就会调用 <code>loadView</code>。这是一个绝佳的机会，让你完全掌控视图的创建过程！🚀</p><h2 id="手动创建视图的强大之处" tabindex="-1">手动创建视图的强大之处 <a class="header-anchor" href="#手动创建视图的强大之处" aria-label="Permalink to &quot;手动创建视图的强大之处&quot;">​</a></h2><p>默认情况下，<code>UIViewController</code> 会创建一个空白的 <code>UIView</code> 作为其根视图。然而，通过重写 <code>loadView</code>，你可以用自定义的视图替换这个默认行为。这对于那些不使用 Interface Builder 或 Storyboard 的项目来说，简直是太棒了！你可以完全通过代码来构建你的 UI。</p><h2 id="何时重写-loadview" tabindex="-1">何时重写 <code>loadView</code>？ <a class="header-anchor" href="#何时重写-loadview" aria-label="Permalink to &quot;何时重写 \`loadView\`？&quot;">​</a></h2><p>你通常会在以下几种情况重写 <code>loadView</code>：</p><ul><li><strong>完全通过代码构建 UI</strong>：当你希望完全摆脱 Interface Builder，从零开始用代码构建所有视图时。</li><li><strong>使用自定义视图类作为根视图</strong>：如果你的视图控制器需要一个特定类型的自定义视图（例如，一个 <code>GLKView</code> 或一个自定义的 <code>UIScrollView</code> 子类）作为其根视图。</li><li><strong>优化视图层级</strong>：在某些性能敏感的场景下，你可能需要更精细地控制根视图的创建，以减少不必要的视图层级。</li></ul><h2 id="loadview-的实现细节与注意事项" tabindex="-1"><code>loadView</code> 的实现细节与注意事项 <a class="header-anchor" href="#loadview-的实现细节与注意事项" aria-label="Permalink to &quot;\`loadView\` 的实现细节与注意事项&quot;">​</a></h2><p>在 <code>loadView</code> 方法中，你<strong>绝不能</strong>调用 <code>super.loadView()</code>。这是因为 <code>super.loadView()</code> 的默认实现就是创建那个空白的 <code>UIView</code>。如果你调用了它，然后又创建了自己的视图，就会造成不必要的资源浪费。记住，你的目标是替换它！</p><p>以下是一个简单的 <code>loadView</code> 实现示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customView.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .systemBlue</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customView</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个例子中，我们创建了一个蓝色的 <code>UIView</code>，并将其赋值给 <code>self.view</code>。就是这么简单！✨</p><h2 id="loadview-与-viewdidload-的区别" tabindex="-1"><code>loadView</code> 与 <code>viewDidLoad</code> 的区别 <a class="header-anchor" href="#loadview-与-viewdidload-的区别" aria-label="Permalink to &quot;\`loadView\` 与 \`viewDidLoad\` 的区别&quot;">​</a></h2><p>理解 <code>loadView</code> 和 <code>viewDidLoad</code> 的区别至关重要。</p><ul><li><code>loadView</code> 的职责是<strong>创建</strong>视图控制器的根视图。</li><li><code>viewDidLoad</code> 的职责是在视图<strong>加载完成</strong>后进行额外的配置和设置。</li></ul><p>这意味着，在 <code>viewDidLoad</code> 被调用时，<code>self.view</code> 已经存在并且可用了。你可以在 <code>viewDidLoad</code> 中添加子视图、设置约束、加载数据等。例如，你可以在 <code>viewDidLoad</code> 中向 <code>self.view</code> 添加一个 <code>UILabel</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;欢迎来到我的自定义视图！&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.textColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .white</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.centerXAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.centerXAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.centerYAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.centerYAnchor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>通过这种方式，你能够清晰地分离视图的创建和配置逻辑，让你的代码更加整洁和易于维护。💪 掌握 <code>loadView</code> 的用途，将让你在 UIKit 编程中拥有更强大的控制力！</p>`,19)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
