import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bw-5EFTY.js";const g=JSON.parse('{"title":"实现请求重试逻辑","description":"","frontmatter":{},"headers":[],"relativePath":"network/11.3_实现请求重试逻辑.md","filePath":"network/11.3_实现请求重试逻辑.md"}'),h={name:"network/11.3_实现请求重试逻辑.md"};function t(p,s,k,e,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="实现请求重试逻辑" tabindex="-1">实现请求重试逻辑 <a class="header-anchor" href="#实现请求重试逻辑" aria-label="Permalink to &quot;实现请求重试逻辑&quot;">​</a></h1><p>当然！让我们一起深入探讨如何在SwiftUI网络请求中实现请求重试逻辑。这可是处理网络不稳定性的一大利器！🚀</p><h2 id="请求重试策略的重要性" tabindex="-1">请求重试策略的重要性 <a class="header-anchor" href="#请求重试策略的重要性" aria-label="Permalink to &quot;请求重试策略的重要性&quot;">​</a></h2><p>网络请求并非总是顺利的，可能会因为各种原因失败，例如服务器繁忙、网络中断等。实现请求重试逻辑可以显著提高应用的稳定性和用户体验。想象一下，如果你的应用在用户点击按钮后，因为网络问题而没有任何反应，用户体验会大打折扣。重试机制就像一个“再试一次”按钮，自动处理这些临时性问题。</p><ul><li>提高应用稳定性。</li><li>改善用户体验。</li><li>自动处理临时性网络问题。</li></ul><h2 id="实现重试逻辑的方法" tabindex="-1">实现重试逻辑的方法 <a class="header-anchor" href="#实现重试逻辑的方法" aria-label="Permalink to &quot;实现重试逻辑的方法&quot;">​</a></h2><p>你可以使用多种方法来实现请求重试逻辑。一种常见的方法是使用递归函数，在请求失败时，延迟一段时间后再次发起请求。另一种方法是使用<code>DispatchQueue.asyncAfter</code>来延迟重试。无论哪种方法，都需要设置最大重试次数，以避免无限循环。</p><ol><li><strong>递归函数</strong>：简单直接，但要注意堆栈溢出风险。</li><li><strong><code>DispatchQueue.asyncAfter</code></strong>：更安全，避免堆栈溢出。</li><li><strong>设置最大重试次数</strong>：防止无限循环。</li></ol><h2 id="代码示例与最佳实践" tabindex="-1">代码示例与最佳实践 <a class="header-anchor" href="#代码示例与最佳实践" aria-label="Permalink to &quot;代码示例与最佳实践&quot;">​</a></h2><p>以下是一个使用<code>DispatchQueue.asyncAfter</code>实现请求重试的示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> retryRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: URL, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxRetries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentRetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    URLSession.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: url) { data, response, error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求失败：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localizedDescription</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            guard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentRetry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxRetries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;达到最大重试次数，放弃请求&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delay </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentRetry)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指数退避</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;将在</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(delay)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">秒后重试...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            DispatchQueue.main.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asyncAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">deadline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delay) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                retryRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: url, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">maxRetries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: maxRetries, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">currentRetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: currentRetry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求成功！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 处理数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在这个例子中，我们使用了指数退避策略，即每次重试的延迟时间都会增加。这可以避免在服务器繁忙时，大量重试请求同时到达，加剧服务器负担。</p><ul><li><strong>指数退避</strong>：减少服务器压力。</li><li><strong>错误处理</strong>：清晰的错误信息。</li><li><strong>最大重试次数</strong>：防止无限循环。</li></ul><h2 id="考虑因素与高级技巧" tabindex="-1">考虑因素与高级技巧 <a class="header-anchor" href="#考虑因素与高级技巧" aria-label="Permalink to &quot;考虑因素与高级技巧&quot;">​</a></h2><p>在实现请求重试逻辑时，还需要考虑以下因素：</p><ul><li><strong>幂等性</strong>：确保重试不会导致重复操作。例如，对于支付请求，需要确保重试不会导致重复支付。</li><li><strong>用户体验</strong>：在重试期间，向用户显示友好的提示信息，告知他们应用正在尝试重新连接。</li><li><strong>监控与日志</strong>：记录重试次数和失败原因，以便分析和优化重试策略。</li></ul><p>通过以上方法和技巧，你可以构建出健壮且用户友好的网络请求重试机制。加油！💪</p>`,17)]))}const y=i(h,[["render",t]]);export{g as __pageData,y as default};
