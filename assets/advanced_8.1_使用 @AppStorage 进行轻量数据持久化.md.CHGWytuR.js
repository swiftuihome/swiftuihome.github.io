import{_ as e,c as o,o as t,ag as s}from"./chunks/framework.Bw-5EFTY.js";const h=JSON.parse('{"title":"使用 @AppStorage 进行轻量数据持久化","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/8.1_使用 @AppStorage 进行轻量数据持久化.md","filePath":"advanced/8.1_使用 @AppStorage 进行轻量数据持久化.md"}'),r={name:"advanced/8.1_使用 @AppStorage 进行轻量数据持久化.md"};function i(p,a,l,d,n,c){return t(),o("div",null,a[0]||(a[0]=[s('<h1 id="使用-appstorage-进行轻量数据持久化" tabindex="-1">使用 @AppStorage 进行轻量数据持久化 <a class="header-anchor" href="#使用-appstorage-进行轻量数据持久化" aria-label="Permalink to &quot;使用 @AppStorage 进行轻量数据持久化&quot;">​</a></h1><h2 id="什么是-appstorage" tabindex="-1">什么是 @AppStorage？ <a class="header-anchor" href="#什么是-appstorage" aria-label="Permalink to &quot;什么是 @AppStorage？&quot;">​</a></h2><p><code>@AppStorage</code> 是 SwiftUI 提供的一个属性包装器。它能让你轻松地将用户默认设置存储到 <code>UserDefaults</code> 中。这对于存储少量、简单的数据非常方便。比如，你可以保存用户的偏好设置或应用状态。</p><p>它就像一个轻量级的数据库。你不需要复杂的设置。只需几行代码就能实现数据持久化。这大大简化了开发流程。</p><h2 id="如何使用-appstorage" tabindex="-1">如何使用 @AppStorage？ <a class="header-anchor" href="#如何使用-appstorage" aria-label="Permalink to &quot;如何使用 @AppStorage？&quot;">​</a></h2><p>使用 <code>@AppStorage</code> 非常直观。你只需要声明一个属性。然后用 <code>@AppStorage</code> 包装它。并提供一个键名。这个键名用于在 <code>UserDefaults</code> 中识别你的数据。</p><p>例如，你可以这样声明一个布尔值：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@AppStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isDarkMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isDarkMode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当 <code>isDarkMode</code> 的值改变时，<code>UserDefaults</code> 会自动更新。反之，应用启动时也会自动加载。</p><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>@AppStorage</code> 在许多场景下都非常有用。</p><ul><li><strong>用户偏好设置</strong>：比如主题模式（深色/浅色）、字体大小等。</li><li><strong>应用状态</strong>：例如，用户是否已经完成了新手引导。</li><li><strong>小数据缓存</strong>：存储一些不经常变动的小数据。</li></ul><p>它非常适合那些不需要复杂关系型数据库的场景。大约 80% 的应用可能只需要这种轻量级存储。</p><h2 id="appstorage-的优势" tabindex="-1">@AppStorage 的优势 <a class="header-anchor" href="#appstorage-的优势" aria-label="Permalink to &quot;@AppStorage 的优势&quot;">​</a></h2><p><code>@AppStorage</code> 提供了许多显著的优势。</p><ul><li><strong>简单易用</strong>：无需复杂的配置或第三方库。</li><li><strong>自动同步</strong>：数据更改会自动保存和加载。</li><li><strong>跨应用共享</strong>：如果配置得当，数据可以在同一开发者账户下的应用间共享。</li><li><strong>性能高效</strong>：对于小数据量，读写速度非常快。</li></ul><p>它极大地提升了开发效率。让你能更专注于核心业务逻辑。</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>尽管 <code>@AppStorage</code> 功能强大，但也有一些限制。</p><ul><li><strong>数据类型限制</strong>：它只能存储 <code>UserDefaults</code> 支持的基本数据类型。例如 <code>String</code>, <code>Int</code>, <code>Bool</code>, <code>Double</code>, <code>URL</code>, <code>Data</code>。</li><li><strong>不适合大量数据</strong>：不建议存储大量数据或复杂对象。这会影响性能。</li><li><strong>安全性</strong>：<code>UserDefaults</code> 数据不是加密的。不要存储敏感信息。</li></ul><p>对于更复杂的数据需求，你可能需要考虑 Core Data 或 SwiftData。但对于轻量级持久化，<code>@AppStorage</code> 绝对是首选。它能让你快速实现功能。🚀</p>',21)]))}const k=e(r,[["render",i]]);export{h as __pageData,k as default};
