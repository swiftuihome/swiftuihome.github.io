import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const g=JSON.parse('{"title":"探索 SwiftUI 径向布局的奥秘","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/3.5_创建自定义径向布局 (Radial Layout).md","filePath":"advanced/3.5_创建自定义径向布局 (Radial Layout).md"}'),h={name:"advanced/3.5_创建自定义径向布局 (Radial Layout).md"};function p(t,s,k,e,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="探索-swiftui-径向布局的奥秘" tabindex="-1">探索 SwiftUI 径向布局的奥秘 <a class="header-anchor" href="#探索-swiftui-径向布局的奥秘" aria-label="Permalink to &quot;探索 SwiftUI 径向布局的奥秘&quot;">​</a></h1><blockquote><p>径向布局，也称为圆形布局，是一种将子视图围绕中心点排列的强大方式。它能创造出引人注目的视觉效果，非常适合展示菜单、仪表盘或其他需要强调中心元素的界面。让我们一起深入了解如何在 SwiftUI 中创建自定义径向布局！</p></blockquote><h2 id="径向布局的核心要素" tabindex="-1">径向布局的核心要素 <a class="header-anchor" href="#径向布局的核心要素" aria-label="Permalink to &quot;径向布局的核心要素&quot;">​</a></h2><p>要构建径向布局，你需要考虑以下几个关键因素：</p><ol><li><strong>中心点：</strong> 这是所有子视图围绕旋转的基准点。</li><li><strong>半径：</strong> 决定了子视图距离中心点的距离。</li><li><strong>角度：</strong> 每个子视图相对于中心点的角度位置。</li><li><strong>子视图数量：</strong> 影响每个子视图之间的角度间隔。</li></ol><h2 id="实现径向布局的步骤" tabindex="-1">实现径向布局的步骤 <a class="header-anchor" href="#实现径向布局的步骤" aria-label="Permalink to &quot;实现径向布局的步骤&quot;">​</a></h2><ol><li><p><strong>计算角度：</strong> 首先，你需要根据子视图的数量计算出每个子视图的角度。例如，如果有 6 个子视图，那么每个子视图的角度间隔就是 360 度 / 6 = 60 度。</p></li><li><p><strong>计算位置：</strong> 使用三角函数（sin 和 cos）根据角度和半径计算出每个子视图的 x 和 y 坐标。</p><ul><li>x 坐标 = 中心点 x + 半径 * cos(角度)</li><li>y 坐标 = 中心点 y + 半径 * sin(角度)</li></ul></li><li><p><strong>放置子视图：</strong> 使用 <code>place(at:proposal:)</code> 方法将每个子视图放置在计算出的位置上。</p></li></ol><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RadialLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Layout </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius: CGFloat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sizeThatFits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proposal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ProposedViewSize, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Subviews, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGSize {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 返回一个足够大的尺寸来容纳所有子视图</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeSubviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bounds: CGRect, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proposal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ProposedViewSize, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Subviews, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subviews.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> angleIncrement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 计算角度增量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index, subview) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subviews.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enumerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> angle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> angleIncrement </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 计算每个子视图的角度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bounds.midX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(angle) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 计算 x 坐标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bounds.midY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(angle) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 计算 y 坐标</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            subview.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">place</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: point, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">proposal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .unspecified) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 放置子视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="实际应用与技巧" tabindex="-1">实际应用与技巧 <a class="header-anchor" href="#实际应用与技巧" aria-label="Permalink to &quot;实际应用与技巧&quot;">​</a></h2><ul><li><strong>动态调整半径：</strong> 你可以根据屏幕尺寸或其他因素动态调整半径，使布局更具响应性。</li><li><strong>添加动画效果：</strong> 使用 SwiftUI 的动画功能，让子视图在径向布局中旋转或缩放，增加视觉吸引力。✨</li><li><strong>自定义角度偏移：</strong> 通过调整起始角度，可以改变径向布局的起始位置。</li><li><strong>使用 GeometryReader：</strong> GeometryReader 可以帮助你获取父视图的尺寸，从而更精确地计算中心点和半径。📐</li></ul><p>通过掌握这些技巧，你就能创建出各种各样的自定义径向布局，为你的 SwiftUI 应用增添独特的魅力！🎉</p>`,12)]))}const y=i(h,[["render",p]]);export{g as __pageData,y as default};
