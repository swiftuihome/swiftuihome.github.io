import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"在 SwiftUI 中嵌入 WKWebView","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/12.5_在 SwiftUI 中嵌入 WKWebView.md","filePath":"advanced/12.5_在 SwiftUI 中嵌入 WKWebView.md"}'),l={name:"advanced/12.5_在 SwiftUI 中嵌入 WKWebView.md"};function t(p,s,h,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="在-swiftui-中嵌入-wkwebview" tabindex="-1">在 SwiftUI 中嵌入 WKWebView <a class="header-anchor" href="#在-swiftui-中嵌入-wkwebview" aria-label="Permalink to &quot;在 SwiftUI 中嵌入 WKWebView&quot;">​</a></h1><h2 id="整合-wkwebview" tabindex="-1">整合 WKWebView <a class="header-anchor" href="#整合-wkwebview" aria-label="Permalink to &quot;整合 WKWebView&quot;">​</a></h2><p>在 SwiftUI 中嵌入 <code>WKWebView</code> 是一个非常实用的技巧，它允许你在 SwiftUI 应用中展示网页内容。 🚀 这对于需要显示动态网页、集成第三方服务或展示富文本内容的场景至关重要。</p><p>通过 <code>UIViewRepresentable</code> 协议，你可以轻松地将 <code>WKWebView</code> 这个 UIKit 组件桥接到 SwiftUI 视图层级中。 这种无缝集成能力极大地扩展了 SwiftUI 的应用范围。</p><h2 id="实现-wkwebviewrepresentable" tabindex="-1">实现 WKWebViewRepresentable <a class="header-anchor" href="#实现-wkwebviewrepresentable" aria-label="Permalink to &quot;实现 WKWebViewRepresentable&quot;">​</a></h2><p>首先，你需要创建一个遵循 <code>UIViewRepresentable</code> 协议的结构体。 这个结构体将负责创建和配置 <code>WKWebView</code> 实例。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WKWebViewRepresentable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewRepresentable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url: URL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WKWebView {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> WKWebView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiView: WKWebView, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> URLRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uiView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在 <code>makeUIView</code> 方法中，你初始化并返回一个 <code>WKWebView</code> 实例。 而 <code>updateUIView</code> 方法则负责加载指定的 URL。</p><h2 id="在-swiftui-视图中使用" tabindex="-1">在 SwiftUI 视图中使用 <a class="header-anchor" href="#在-swiftui-视图中使用" aria-label="Permalink to &quot;在 SwiftUI 视图中使用&quot;">​</a></h2><p>一旦你创建了 <code>WKWebViewRepresentable</code>，就可以像使用任何其他 SwiftUI 视图一样在你的应用中嵌入它了。 想象一下，只需几行代码就能在你的应用中展示一个完整的网页！</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WKWebViewRepresentable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.apple.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">edgesIgnoringSafeArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.all)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这段代码将会在你的 SwiftUI 视图中显示 Apple 官网。 你可以轻松地替换 URL 来加载任何你想要的网页。 🌐</p><h2 id="高级配置与交互" tabindex="-1">高级配置与交互 <a class="header-anchor" href="#高级配置与交互" aria-label="Permalink to &quot;高级配置与交互&quot;">​</a></h2><p><code>WKWebView</code> 提供了丰富的配置选项和代理方法，可以实现更高级的功能。 例如，你可以：</p><ul><li><strong>处理导航事件</strong>: 通过 <code>WKNavigationDelegate</code> 协议，你可以控制网页的加载行为，例如阻止某些链接的跳转。</li><li><strong>执行 JavaScript</strong>: 使用 <code>evaluateJavaScript</code> 方法，你可以在网页中执行 JavaScript 代码，实现 SwiftUI 与网页之间的双向通信。</li><li><strong>管理 Cookie</strong>: <code>WKWebsiteDataStore</code> 允许你管理网页的缓存和 Cookie 数据。</li></ul><p>这些高级功能使得 <code>WKWebView</code> 不仅仅是一个简单的网页显示器，更是一个强大的交互工具。 🚀 掌握这些技巧，你将能够构建出功能更加丰富的 SwiftUI 应用。 事实上，超过 70% 的 iOS 开发者在需要展示网页内容时会选择 <code>WKWebView</code>。</p>`,16)]))}const o=i(l,[["render",t]]);export{c as __pageData,o as default};
