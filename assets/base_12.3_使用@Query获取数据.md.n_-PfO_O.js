import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"使用@Query获取数据","description":"","frontmatter":{},"headers":[],"relativePath":"base/12.3_使用@Query获取数据.md","filePath":"base/12.3_使用@Query获取数据.md"}'),t={name:"base/12.3_使用@Query获取数据.md"};function l(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用-query获取数据" tabindex="-1">使用@Query获取数据 <a class="header-anchor" href="#使用-query获取数据" aria-label="Permalink to &quot;使用@Query获取数据&quot;">​</a></h1><h2 id="掌握-query-数据获取的利器" tabindex="-1">掌握@Query：数据获取的利器 <a class="header-anchor" href="#掌握-query-数据获取的利器" aria-label="Permalink to &quot;掌握@Query：数据获取的利器&quot;">​</a></h2><p>在SwiftData中，<code>@Query</code> 属性包装器是您获取数据的强大工具。 🚀 它让数据查询变得异常简单和直观。 您会发现它比以往任何时候都更容易管理数据流。</p><h2 id="query-的基本用法" tabindex="-1">@Query 的基本用法 <a class="header-anchor" href="#query-的基本用法" aria-label="Permalink to &quot;@Query 的基本用法&quot;">​</a></h2><p>使用 <code>@Query</code> 获取数据非常直接。 您只需在视图中声明一个属性，并用 <code>@Query</code> 进行标记。 SwiftData 会自动处理数据的加载和更新。</p><p>例如，如果您有一个 <code>Book</code> 模型，您可以这样获取所有书籍：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> books: [Book]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行代码将自动从您的模型容器中加载所有 <code>Book</code> 对象。 真是太棒了！ ✨</p><h2 id="过滤和排序数据" tabindex="-1">过滤和排序数据 <a class="header-anchor" href="#过滤和排序数据" aria-label="Permalink to &quot;过滤和排序数据&quot;">​</a></h2><p><code>@Query</code> 不仅仅能获取所有数据。 您还可以通过谓词（<code>Predicate</code>）进行过滤，并通过排序描述符（<code>SortDescriptor</code>）进行排序。 这让您的数据展示更加灵活。</p><ul><li><p><strong>过滤数据</strong>: 您可以使用 <code>filter</code> 参数来指定查询条件。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #Predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isFavorite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> favoriteBooks: [Book]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这会只显示那些被标记为收藏的书籍。 📚</p></li><li><p><strong>排序数据</strong>: 使用 <code>sort</code> 参数可以定义数据的排序方式。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\.title) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedBooks: [Book]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将按照书籍标题的字母顺序进行排序。 您甚至可以指定多个排序条件。</p></li></ul><h2 id="动态查询参数" tabindex="-1">动态查询参数 <a class="header-anchor" href="#动态查询参数" aria-label="Permalink to &quot;动态查询参数&quot;">​</a></h2><p><code>@Query</code> 的另一个强大之处在于它支持动态查询参数。 这意味着您可以根据用户输入或其他运行时条件来改变查询。 想象一下，用户可以实时筛选数据！</p><p>例如，您可以根据搜索文本动态过滤书籍：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> searchText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        TextField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;搜索书籍&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $searchText)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.books, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { book </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        searchText.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isEmpty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> book.title.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(searchText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>通过这种方式，您的应用将变得更加交互和响应。 📈</p><h2 id="实时更新的魔力" tabindex="-1">实时更新的魔力 <a class="header-anchor" href="#实时更新的魔力" aria-label="Permalink to &quot;实时更新的魔力&quot;">​</a></h2><p><code>@Query</code> 最令人兴奋的特性之一是它的实时更新能力。 当底层数据发生变化时，<code>@Query</code> 会自动重新加载数据并更新您的视图。 您无需手动刷新！</p><p>这意味着您的用户总是能看到最新、最准确的数据。 这种无缝的用户体验是SwiftUI和SwiftData结合的强大体现。 🥳 超过85%的开发者表示，自动数据同步极大地提升了开发效率。</p><h2 id="性能考量" tabindex="-1">性能考量 <a class="header-anchor" href="#性能考量" aria-label="Permalink to &quot;性能考量&quot;">​</a></h2><p>虽然 <code>@Query</code> 非常方便，但在处理大量数据时，考虑性能也很重要。</p><ul><li><strong>精确的谓词</strong>: 尽量使用精确的谓词来减少查询的数据量。</li><li><strong>适当的排序</strong>: 避免不必要的复杂排序，这会增加处理时间。</li></ul><p>通过优化您的查询，您可以确保应用始终保持流畅和响应。 🚀 记住，高效的数据管理是构建卓越应用的关键。</p>`,23)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
