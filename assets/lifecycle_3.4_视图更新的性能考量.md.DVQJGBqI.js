import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"视图更新的性能考量","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/3.4_视图更新的性能考量.md","filePath":"lifecycle/3.4_视图更新的性能考量.md"}'),l={name:"lifecycle/3.4_视图更新的性能考量.md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="视图更新的性能考量" tabindex="-1">视图更新的性能考量 <a class="header-anchor" href="#视图更新的性能考量" aria-label="Permalink to &quot;视图更新的性能考量&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，视图更新的性能至关重要，直接影响用户体验。优化视图更新，确保应用流畅运行，是每个 SwiftUI 开发者的目标。🚀</p></blockquote><h2 id="减少不必要的更新" tabindex="-1">减少不必要的更新 <a class="header-anchor" href="#减少不必要的更新" aria-label="Permalink to &quot;减少不必要的更新&quot;">​</a></h2><p>SwiftUI 的依赖追踪系统非常智能，但有时也会触发不必要的更新。你可以通过以下方式减少它们：</p><ul><li><strong>使用 <code>Equatable</code> 协议：</strong> 让你的数据模型遵循 <code>Equatable</code> 协议，SwiftUI 可以更准确地判断数据是否真的发生了变化。</li><li><strong><code>@State</code> 的合理使用：</strong> 仅将影响视图显示的数据声明为 <code>@State</code>。避免将不相关的属性声明为 <code>@State</code>。</li><li><strong><code>@Binding</code> 的谨慎传递：</strong> 确保 <code>@Binding</code> 只传递给真正需要修改状态的子视图。</li></ul><h2 id="优化计算复杂度" tabindex="-1">优化计算复杂度 <a class="header-anchor" href="#优化计算复杂度" aria-label="Permalink to &quot;优化计算复杂度&quot;">​</a></h2><p>视图的 <code>body</code> 是一个计算属性，每次更新都会重新计算。复杂的计算会显著降低性能。</p><ol><li><strong>避免在 <code>body</code> 中进行耗时操作：</strong> 例如，网络请求或大量数据处理。这些操作应该放在后台线程中进行。</li><li><strong>使用 <code>LazyVStack</code> 和 <code>LazyHStack</code>：</strong> 对于大量数据的列表，使用 <code>LazyVStack</code> 和 <code>LazyHStack</code> 可以实现按需加载，避免一次性渲染所有视图。</li><li><strong>缓存计算结果：</strong> 如果某些计算结果可以被缓存，可以使用 <code>@State</code> 或 <code>@Environment</code> 来存储，避免重复计算。</li></ol><h2 id="利用-swiftui-的性能工具" tabindex="-1">利用 SwiftUI 的性能工具 <a class="header-anchor" href="#利用-swiftui-的性能工具" aria-label="Permalink to &quot;利用 SwiftUI 的性能工具&quot;">​</a></h2><p>SwiftUI 提供了强大的性能分析工具，帮助你找出性能瓶颈。</p><ul><li><strong>Instruments：</strong> 使用 Instruments 可以分析 CPU 使用率、内存分配和渲染性能。</li><li><strong>SwiftUI Inspector：</strong> SwiftUI Inspector 可以实时查看视图的更新情况，帮助你找出不必要的更新。</li></ul><h2 id="实例分析" tabindex="-1">实例分析 <a class="header-anchor" href="#实例分析" aria-label="Permalink to &quot;实例分析&quot;">​</a></h2><p>假设你有一个显示用户列表的视图。如果每次用户列表的数据源发生变化，整个列表都会重新渲染，这会非常耗时。你可以通过以下方式优化：</p><ul><li><strong>使用 <code>Identifiable</code> 协议：</strong> 让你的用户模型遵循 <code>Identifiable</code> 协议，SwiftUI 可以更准确地识别哪些用户发生了变化，只更新这些用户对应的视图。</li><li><strong>使用 <code>List</code> 的 <code>ForEach</code> 初始化器：</strong> 使用 <code>List</code> 的 <code>ForEach</code> 初始化器，并提供一个唯一的 <code>id</code>，SwiftUI 可以更高效地管理列表中的视图。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Identifiable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserListView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users: [User] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;王五&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users) { user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>通过以上优化，你可以显著提高 SwiftUI 视图更新的性能，让你的应用更加流畅和响应迅速。🎉</p>`,16)]))}const E=i(l,[["render",t]]);export{o as __pageData,E as default};
