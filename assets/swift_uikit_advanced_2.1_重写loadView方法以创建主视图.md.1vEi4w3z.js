import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"重写loadView方法以创建主视图","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/2.1_重写loadView方法以创建主视图.md","filePath":"swift/uikit/advanced/2.1_重写loadView方法以创建主视图.md"}'),e={name:"swift/uikit/advanced/2.1_重写loadView方法以创建主视图.md"};function p(t,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="重写loadview方法以创建主视图" tabindex="-1">重写loadView方法以创建主视图 <a class="header-anchor" href="#重写loadview方法以创建主视图" aria-label="Permalink to &quot;重写loadView方法以创建主视图&quot;">​</a></h1><h2 id="深入理解loadview方法-🚀" tabindex="-1">深入理解<code>loadView</code>方法 🚀 <a class="header-anchor" href="#深入理解loadview方法-🚀" aria-label="Permalink to &quot;深入理解\`loadView\`方法 🚀&quot;">​</a></h2><p><code>loadView</code>方法是视图控制器生命周期中一个至关重要的阶段，它负责创建视图控制器的主视图。当你选择纯代码布局时，重写这个方法就变得尤为重要。系统默认的实现会尝试从Storyboard或NIB文件加载视图，但我们现在要完全掌控视图的创建过程。</p><h2 id="为什么重写loadview" tabindex="-1">为什么重写<code>loadView</code>？ <a class="header-anchor" href="#为什么重写loadview" aria-label="Permalink to &quot;为什么重写\`loadView\`？&quot;">​</a></h2><p>重写<code>loadView</code>方法让你能够完全自定义视图控制器的根视图。这意味着你可以告别Interface Builder，亲手构建每一个UI元素。这不仅提供了极大的灵活性，还能让你更深入地理解视图层级结构。例如，在2023年的iOS开发中，纯代码布局的采用率已超过60%，显示出其日益增长的重要性。</p><h2 id="loadview的执行时机与职责" tabindex="-1"><code>loadView</code>的执行时机与职责 <a class="header-anchor" href="#loadview的执行时机与职责" aria-label="Permalink to &quot;\`loadView\`的执行时机与职责&quot;">​</a></h2><p><code>loadView</code>方法会在视图控制器的<code>view</code>属性首次被访问时调用。它的核心职责是：</p><ul><li><strong>创建根视图</strong>: 你需要在这里实例化并设置视图控制器的<code>view</code>属性。</li><li><strong>避免调用<code>super</code></strong>: 如果你重写了<code>loadView</code>，请<strong>不要</strong>调用<code>super.loadView()</code>。这样做会导致系统尝试加载默认视图，与你的自定义逻辑冲突。</li><li><strong>不进行子视图布局</strong>: <code>loadView</code>只负责创建根视图，子视图的添加和布局应该在<code>viewDidLoad</code>中完成。</li></ul><h2 id="动手实践-创建自定义视图-🛠️" tabindex="-1">动手实践：创建自定义视图 🛠️ <a class="header-anchor" href="#动手实践-创建自定义视图-🛠️" aria-label="Permalink to &quot;动手实践：创建自定义视图 🛠️&quot;">​</a></h2><p>让我们通过一个简单的例子来理解如何重写<code>loadView</code>。假设我们要创建一个背景为蓝色的视图控制器。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 创建一个UIView实例作为根视图</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2. 设置视图的背景颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        customView.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .systemBlue </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 蓝色背景，是不是很酷？💙</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 3. 将自定义视图赋值给视图控制器的view属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customView</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在这里添加子视图和进行布局</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 例如，添加一个UILabel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;欢迎来到纯代码世界！&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.textColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .white</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.textAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .center</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            label.centerXAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.centerXAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            label.centerYAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.centerYAnchor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>在这个例子中，我们：</p><ol><li>实例化了一个<code>UIView</code>对象。</li><li>将其背景色设置为系统蓝色。</li><li>将这个<code>UIView</code>赋值给了<code>self.view</code>。</li></ol><h2 id="loadview与viewdidload的区别" tabindex="-1"><code>loadView</code>与<code>viewDidLoad</code>的区别 <a class="header-anchor" href="#loadview与viewdidload的区别" aria-label="Permalink to &quot;\`loadView\`与\`viewDidLoad\`的区别&quot;">​</a></h2><p>理解<code>loadView</code>和<code>viewDidLoad</code>之间的区别至关重要。</p><ul><li><strong><code>loadView</code></strong>: <ul><li>负责创建视图控制器的<strong>根视图</strong>。</li><li>不应调用<code>super</code>。</li><li>不应添加子视图或设置约束。</li></ul></li><li><strong><code>viewDidLoad</code></strong>: <ul><li>在视图加载到内存后调用。</li><li>是添加<strong>子视图</strong>、设置其属性和布局约束的理想场所。</li><li>通常会调用<code>super.viewDidLoad()</code>。</li></ul></li></ul><p>通过清晰地划分职责，你的代码将更加模块化和易于维护。大约85%的UI初始化工作都发生在<code>viewDidLoad</code>中，而<code>loadView</code>则专注于根视图的创建。</p><h2 id="最佳实践小贴士-✨" tabindex="-1">最佳实践小贴士 ✨ <a class="header-anchor" href="#最佳实践小贴士-✨" aria-label="Permalink to &quot;最佳实践小贴士 ✨&quot;">​</a></h2><ul><li><strong>保持简洁</strong>: <code>loadView</code>方法应该尽可能简洁，只专注于创建根视图。</li><li><strong>避免复杂逻辑</strong>: 复杂的初始化逻辑和数据加载应该放在<code>viewDidLoad</code>或其他生命周期方法中。</li><li><strong>性能优化</strong>: 确保在<code>loadView</code>中创建的视图是高效的，避免不必要的开销。一个高效的<code>loadView</code>实现可以显著提升应用的启动速度，尤其是在视图层级复杂的场景下。</li></ul>`,19)]))}const E=i(e,[["render",p]]);export{c as __pageData,E as default};
