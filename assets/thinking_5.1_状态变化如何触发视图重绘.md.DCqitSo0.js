import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"SwiftUI 中状态变化如何触发视图重绘","description":"","frontmatter":{},"headers":[],"relativePath":"thinking/5.1_状态变化如何触发视图重绘.md","filePath":"thinking/5.1_状态变化如何触发视图重绘.md"}'),e={name:"thinking/5.1_状态变化如何触发视图重绘.md"};function l(p,s,r,h,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="swiftui-中状态变化如何触发视图重绘" tabindex="-1">SwiftUI 中状态变化如何触发视图重绘 <a class="header-anchor" href="#swiftui-中状态变化如何触发视图重绘" aria-label="Permalink to &quot;SwiftUI 中状态变化如何触发视图重绘&quot;">​</a></h1><blockquote><p>SwiftUI 的核心在于<strong>数据驱动</strong>，这意味着你的 UI 会自动响应数据的变化。当状态发生改变时，SwiftUI 会智能地更新视图，让你无需手动操作 DOM 或进行复杂的 UI 管理。是不是很棒？🎉</p></blockquote><h2 id="状态变化与依赖关系" tabindex="-1">状态变化与依赖关系 <a class="header-anchor" href="#状态变化与依赖关系" aria-label="Permalink to &quot;状态变化与依赖关系&quot;">​</a></h2><p>在 SwiftUI 中，视图的重绘是由状态的变化驱动的。当一个被 <code>@State</code>、<code>@Binding</code>、<code>@ObservedObject</code>、<code>@StateObject</code> 或 <code>@EnvironmentObject</code> 修饰的属性发生改变时，SwiftUI 会追踪到这些变化，并标记所有依赖于这些状态的视图为“需要更新”。</p><ul><li><strong>状态属性</strong>: 这些属性是驱动 UI 变化的源头。</li><li><strong>依赖关系</strong>: SwiftUI 会建立一个视图依赖关系图，清楚地知道哪些视图依赖于哪些状态。</li></ul><h2 id="视图更新的流程" tabindex="-1">视图更新的流程 <a class="header-anchor" href="#视图更新的流程" aria-label="Permalink to &quot;视图更新的流程&quot;">​</a></h2><ol><li><strong>状态改变</strong>: 某个状态属性的值发生变化。</li><li><strong>依赖追踪</strong>: SwiftUI 识别所有依赖于该状态的视图。</li><li><strong>视图重绘</strong>: SwiftUI 重新执行这些视图的 <code>body</code> 属性，生成新的视图结构。</li><li><strong>Diff 算法</strong>: SwiftUI 使用高效的 Diff 算法，比较新旧视图结构，找出需要更新的部分。</li><li><strong>UI 更新</strong>: SwiftUI 只更新实际发生改变的 UI 元素，从而实现高效的 UI 渲染。</li></ol><h2 id="优化视图重绘" tabindex="-1">优化视图重绘 <a class="header-anchor" href="#优化视图重绘" aria-label="Permalink to &quot;优化视图重绘&quot;">​</a></h2><p>为了获得最佳性能，你需要注意以下几点：</p><ul><li><strong>避免不必要的更新</strong>: 只有当数据真正发生改变时才更新状态。</li><li><strong>使用 <code>Equatable</code> 协议</strong>: 让你的数据类型遵循 <code>Equatable</code> 协议，SwiftUI 可以更准确地判断数据是否真的发生了变化。</li><li><strong>使用 <code>Identifiable</code> 协议</strong>: 在 <code>List</code> 等集合视图中，让你的数据类型遵循 <code>Identifiable</code> 协议，可以帮助 SwiftUI 更高效地更新列表。</li></ul><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Counter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(counter)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Increment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个例子中，<code>counter</code> 是一个 <code>@State</code> 属性。当你点击 &quot;Increment&quot; 按钮时，<code>counter</code> 的值会增加，SwiftUI 会自动更新 <code>Text</code> 视图，显示新的计数器值。是不是很简单？🚀</p><p>通过理解状态变化如何触发视图重绘，你可以更好地掌握 SwiftUI 的数据驱动机制，编写出更高效、更流畅的 UI 代码。加油！💪</p>`,14)]))}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
