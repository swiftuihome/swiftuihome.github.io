import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"14.1_使用present方法模态弹出视图控制器","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/14.1_使用present方法模态弹出视图控制器.md","filePath":"swift/uikit/basics/14.1_使用present方法模态弹出视图控制器.md"}'),t={name:"swift/uikit/basics/14.1_使用present方法模态弹出视图控制器.md"};function l(p,s,r,h,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_14-1-使用present方法模态弹出视图控制器" tabindex="-1">14.1_使用present方法模态弹出视图控制器 <a class="header-anchor" href="#_14-1-使用present方法模态弹出视图控制器" aria-label="Permalink to &quot;14.1_使用present方法模态弹出视图控制器&quot;">​</a></h1><h2 id="模态呈现的魅力-✨" tabindex="-1">模态呈现的魅力 ✨ <a class="header-anchor" href="#模态呈现的魅力-✨" aria-label="Permalink to &quot;模态呈现的魅力 ✨&quot;">​</a></h2><p>在 iOS 开发中，模态呈现（Modal Presentation）是一种非常强大的方式，用于在当前视图控制器之上展示一个全新的视图控制器。想象一下，你正在浏览一个应用，突然弹出一个登录界面或者一个设置选项，这就是模态呈现的典型应用场景。它能有效中断用户当前流程，引导他们专注于新任务。</p><h2 id="present-方法的核心机制" tabindex="-1"><code>present</code> 方法的核心机制 <a class="header-anchor" href="#present-方法的核心机制" aria-label="Permalink to &quot;\`present\` 方法的核心机制&quot;">​</a></h2><p>要实现模态弹出视图控制器，你将主要依赖 <code>UIViewController</code> 的 <code>present(_:animated:completion:)</code> 方法。这个方法是 UIKit 框架的核心组成部分，让你能够以编程方式控制视图控制器的显示。它提供了极大的灵活性，让你完全掌控用户界面的流程。</p><h2 id="如何使用-present-方法-🚀" tabindex="-1">如何使用 <code>present</code> 方法 🚀 <a class="header-anchor" href="#如何使用-present-方法-🚀" aria-label="Permalink to &quot;如何使用 \`present\` 方法 🚀&quot;">​</a></h2><p>使用 <code>present</code> 方法非常直观。首先，你需要创建一个你想要呈现的视图控制器实例。例如，你可以创建一个名为 <code>DetailViewController</code> 的新视图控制器。然后，在你的当前视图控制器中，调用 <code>present</code> 方法，并将 <code>DetailViewController</code> 实例作为第一个参数传递进去。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> detailVC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DetailViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">present</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(detailVC, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">completion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>detailVC</code>: 这是你想要模态弹出的视图控制器实例。</li><li><code>animated</code>: 一个布尔值，决定了视图控制器弹出时是否带有动画效果。设置为 <code>true</code> 通常能提供更好的用户体验。</li><li><code>completion</code>: 这是一个可选的闭包，当模态呈现完成时会被调用。你可以在这里执行一些清理工作或者更新 UI。</li></ul><h2 id="实际应用场景举例-💡" tabindex="-1">实际应用场景举例 💡 <a class="header-anchor" href="#实际应用场景举例-💡" aria-label="Permalink to &quot;实际应用场景举例 💡&quot;">​</a></h2><p>假设你正在开发一个电商应用，用户点击了“购买”按钮。这时，你可能需要弹出一个订单确认页面。</p><ol><li><strong>创建订单确认视图控制器</strong>:<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderConfirmationViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 你的订单确认界面元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><strong>在主界面中调用 <code>present</code></strong>:<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buyButtonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orderVC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OrderConfirmationViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    orderVC.modalPresentationStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .pageSheet </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置呈现样式</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">present</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(orderVC, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;订单确认页面已成功弹出！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>在这个例子中，我们还设置了 <code>modalPresentationStyle</code> 为 <code>.pageSheet</code>，这会让弹出的视图控制器以卡片形式从底部滑出，非常符合现代 iOS 应用的设计趋势。大约有 70% 的 iOS 应用会选择这种或类似的模态呈现样式来增强用户体验。</li></ol><h2 id="模态呈现的优势与注意事项-🎯" tabindex="-1">模态呈现的优势与注意事项 🎯 <a class="header-anchor" href="#模态呈现的优势与注意事项-🎯" aria-label="Permalink to &quot;模态呈现的优势与注意事项 🎯&quot;">​</a></h2><p>模态呈现的优势在于它能够：</p><ul><li><strong>强制用户关注</strong>: 确保用户在继续之前完成特定任务。</li><li><strong>提供独立工作流</strong>: 为用户提供一个独立于主应用流程的子任务。</li><li><strong>简化导航</strong>: 避免在复杂导航堆栈中添加临时视图。</li></ul><p>然而，过度使用模态呈现可能会导致用户迷失方向，因此请谨慎使用。确保每次模态呈现都有明确的目的，并且用户知道如何返回。记住，良好的用户体验是成功的关键！</p>`,16)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
