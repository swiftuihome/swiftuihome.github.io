import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"使用dataTask发送GET请求","description":"","frontmatter":{},"headers":[],"relativePath":"network/2.3_使用dataTask发送GET请求.md","filePath":"network/2.3_使用dataTask发送GET请求.md"}'),t={name:"network/2.3_使用dataTask发送GET请求.md"};function l(p,s,d,h,r,k){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="使用datatask发送get请求" tabindex="-1">使用dataTask发送GET请求 <a class="header-anchor" href="#使用datatask发送get请求" aria-label="Permalink to &quot;使用dataTask发送GET请求&quot;">​</a></h1><p>使用 <code>URLSession</code> 发送 GET 请求是网络通信的基石。它允许你从服务器获取数据，就像在浏览器中访问网页一样。这个过程非常直接，让你能轻松地与远程资源交互。</p><p>你将学会如何构建一个请求，并使用 <code>dataTask</code> 来执行它。这就像给服务器发送一个“请给我数据”的信号。</p><h2 id="构建你的第一个数据任务-🚀" tabindex="-1">构建你的第一个数据任务 🚀 <a class="header-anchor" href="#构建你的第一个数据任务-🚀" aria-label="Permalink to &quot;构建你的第一个数据任务 🚀&quot;">​</a></h2><p>首先，你需要一个 <code>URL</code> 对象来指定你要请求的资源。这就像告诉你的应用程序要去哪里找数据。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;无效的URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来，你将使用 <code>URLSession.shared</code> 创建一个数据任务。这是最常用的方式，因为它提供了默认的会话配置。</p><ul><li><code>URLSession.shared</code> 是一个单例，非常方便。</li><li>它处理了许多底层网络细节。</li><li>你不需要手动配置会话。</li></ul><h2 id="深入datatask的奥秘-🕵️‍♀️" tabindex="-1">深入dataTask的奥秘 🕵️‍♀️ <a class="header-anchor" href="#深入datatask的奥秘-🕵️‍♀️" aria-label="Permalink to &quot;深入dataTask的奥秘 🕵️‍♀️&quot;">​</a></h2><p><code>dataTask(with:completionHandler:)</code> 方法是你的核心工具。它接受一个 <code>URL</code> 或 <code>URLRequest</code>，并提供一个闭包来处理响应。</p><p>这个闭包会在网络请求完成后被调用，无论成功还是失败。它会给你三个重要的参数：</p><ol><li><code>Data?</code>: 服务器返回的数据，如果请求成功。</li><li><code>URLResponse?</code>: 包含HTTP状态码和头部信息。</li><li><code>Error?</code>: 如果请求失败，会包含错误信息。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> task </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> URLSession.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: url) { data, response, error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里处理响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="启动任务并获取数据-📊" tabindex="-1">启动任务并获取数据 📊 <a class="header-anchor" href="#启动任务并获取数据-📊" aria-label="Permalink to &quot;启动任务并获取数据 📊&quot;">​</a></h2><p>创建了 <code>dataTask</code> 后，你必须调用 <code>resume()</code> 方法来启动它。这就像按下“开始”按钮，让网络请求真正发送出去。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>记住，网络请求通常在后台线程执行。这意味着你的UI不会因为等待数据而卡顿。这是一个非常重要的设计模式，确保了用户体验的流畅性。</p><ul><li><code>resume()</code> 启动任务。</li><li>任务在后台执行。</li><li>UI线程保持响应。</li></ul><p>通过这些步骤，你已经成功地使用 <code>URLSession</code> 发送了一个 GET 请求。这是一个强大的基础，为你后续更复杂的网络操作铺平了道路！你已经掌握了网络请求的关键一步，真是太棒了！🎉</p>`,19)]))}const E=a(t,[["render",l]]);export{c as __pageData,E as default};
