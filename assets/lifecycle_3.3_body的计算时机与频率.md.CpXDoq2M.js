import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"body的计算时机与频率","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/3.3_body的计算时机与频率.md","filePath":"lifecycle/3.3_body的计算时机与频率.md"}'),l={name:"lifecycle/3.3_body的计算时机与频率.md"};function t(h,s,p,d,r,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="body的计算时机与频率" tabindex="-1">body的计算时机与频率 <a class="header-anchor" href="#body的计算时机与频率" aria-label="Permalink to &quot;body的计算时机与频率&quot;">​</a></h1><blockquote><p>SwiftUI 视图的 <code>body</code> 属性，是构建用户界面的核心！理解它的计算时机和频率，对优化性能至关重要。让我们一起深入探索吧！🚀</p></blockquote><h2 id="body-的计算时机" tabindex="-1"><code>body</code> 的计算时机 <a class="header-anchor" href="#body-的计算时机" aria-label="Permalink to &quot;\`body\` 的计算时机&quot;">​</a></h2><p><code>body</code> 的计算并非一成不变，而是在特定时机触发。状态改变是主要因素。当视图依赖的 <code>@State</code>、<code>@Binding</code> 或 <code>@ObservedObject</code> 等属性发生变化时，SwiftUI 会重新计算 <code>body</code>。</p><ul><li><strong>状态更新：</strong> 任何影响视图显示的状态变化都会触发 <code>body</code> 的重新计算。</li><li><strong>外部数据变化：</strong> 来自 ObservableObject 的数据更新也会导致视图刷新。</li><li><strong>系统事件：</strong> 某些系统事件，如设备方向改变，也可能触发 <code>body</code> 的计算。</li></ul><h2 id="body-的计算频率" tabindex="-1"><code>body</code> 的计算频率 <a class="header-anchor" href="#body-的计算频率" aria-label="Permalink to &quot;\`body\` 的计算频率&quot;">​</a></h2><p><code>body</code> 的计算频率直接影响应用的性能。频繁的计算可能导致界面卡顿，因此需要谨慎处理。</p><ul><li><strong>避免不必要的更新：</strong> 尽量减少状态的频繁变化，只在必要时更新状态。</li><li><strong>使用 <code>Equatable</code>：</strong> 让你的数据模型遵循 <code>Equatable</code> 协议，SwiftUI 可以更精确地判断是否需要更新视图。</li><li><strong><code>@State</code> 的局部性：</strong> 尽量将状态变量定义在需要更新的最小视图范围内。</li></ul><h2 id="优化-body-计算" tabindex="-1">优化 <code>body</code> 计算 <a class="header-anchor" href="#优化-body-计算" aria-label="Permalink to &quot;优化 \`body\` 计算&quot;">​</a></h2><p>优化 <code>body</code> 的计算，可以显著提升应用的响应速度和用户体验。</p><ol><li><strong>减少依赖：</strong> 尽量减少 <code>body</code> 中依赖的状态变量数量。</li><li><strong>使用 <code>View</code> 的 <code>Equatable</code> 一致性：</strong> 通过让视图遵循 <code>Equatable</code> 协议，可以避免不必要的 <code>body</code> 计算。</li><li><strong>避免复杂计算：</strong> 尽量避免在 <code>body</code> 中进行复杂的计算，可以将计算结果缓存起来。</li></ol><h2 id="实例分析" tabindex="-1">实例分析 <a class="header-anchor" href="#实例分析" aria-label="Permalink to &quot;实例分析&quot;">​</a></h2><p>假设你有一个显示用户信息的视图，用户信息存储在 <code>@ObservedObject</code> 中。如果用户头像的 URL 发生变化，<code>body</code> 会重新计算，更新头像显示。如果用户信息中的其他字段（如年龄）发生变化，但头像 URL 没有变，你可以通过让视图遵循 <code>Equatable</code> 协议，避免不必要的头像更新。🎉</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Equatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ObservedObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user: User</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: user.avatarURL) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只在 avatarURL 变化时更新</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(user.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Age: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(user.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UserView, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UserView) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lhs.user.avatarURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.user.avatarURL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>通过以上优化，你可以确保 <code>body</code> 只在必要时才进行计算，从而提升应用的性能。记住，理解 <code>body</code> 的计算时机和频率，是成为 SwiftUI 大师的关键一步！💪</p>`,15)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
