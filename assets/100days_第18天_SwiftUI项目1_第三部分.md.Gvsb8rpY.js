import{_ as s,c as t,o as e,ag as a}from"./chunks/framework.ymCRTBvy.js";const g=JSON.parse('{"title":"第18天 SwiftUI 项目1 第三部分","description":"","frontmatter":{},"headers":[],"relativePath":"100days/第18天_SwiftUI项目1_第三部分.md","filePath":"100days/第18天_SwiftUI项目1_第三部分.md"}'),l={name:"100days/第18天_SwiftUI项目1_第三部分.md"};function n(o,i,r,p,d,c){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="第18天-swiftui-项目1-第三部分" tabindex="-1">第18天 SwiftUI 项目1 第三部分 <a class="header-anchor" href="#第18天-swiftui-项目1-第三部分" aria-label="Permalink to &quot;第18天 SwiftUI 项目1 第三部分&quot;">​</a></h1><p>你刚刚完成了你的第一个 SwiftUI 应用程序开发，一切顺利的话，你可能会惊讶于这个过程竟如此简单。你甚至可能会疑惑，我之前花了那么多时间讲解结构体、闭包、可选类型等等内容，可最终我们写的代码却相当简单。</p><p>其实，首先要记住，这只是第一个项目，我特意把它设计得比较简单，这样你就能更快地用自己的代码动手实践。相信我，后续的内容会越来越复杂 —— 事实上，明天你就要独立完成一个属于自己的项目了，所以别太放松！</p><p>其次，你其实已经在使用一些高级特性了。实际上，你在不知不觉中已经用到了 Swift 所提供的所有最核心的高级特性。我们一直都在使用闭包，看看下面这样的代码就知道了：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Picker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tip percentage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $tipPercentage) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tipPercentages, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: \\.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .percent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>你注意到里面的 <code>$0</code> 了吗？这是闭包参数的简写语法，因为我们正处于一个闭包内部。</p><p>无论如何，既然这个应用程序已经完成，现在就来快速回顾一下你学到的内容，做一个小测试确保你理解了所教的知识，然后迎接你的第一个挑战 —— 这些练习的目的是让你尽快开始自己编写代码。</p><p><strong>我不会提供这些挑战的答案。</strong> 这样做是有意为之：我希望你自己去摸索解决，而不是直接看别人的成果。就像马文・菲利普斯（Marvin Phillips）所说：“尝试（try）和成功（triumph）之间，差的只是多一点点的努力（umph）。”</p><p><strong>今天，你需要完成项目 1 的总结章节，做完其中的复习内容，然后完成所有三个挑战。</strong></p><ul><li>WeSplit 项目总结</li><li>WeSplit 项目练习题</li></ul><p>完成这些之后，去告诉其他人吧：你已经完成了第一个 SwiftUI 项目，通过了测试，甚至还用自己的代码对项目进行了扩展。</p><p>你应该为自己取得的成就感到骄傲 —— 干得好！</p><h2 id="wesplit-项目总结" tabindex="-1">WeSplit 项目总结 <a class="header-anchor" href="#wesplit-项目总结" aria-label="Permalink to &quot;WeSplit 项目总结&quot;">​</a></h2><p><em>作者：Paul Hudson 2023 年 10 月 8 日</em></p><p>你已经完成了你的第一个 SwiftUI 应用 —— 干得好！我们涵盖了很多内容，但我也尽量放慢节奏，确保你能完全理解 —— 未来的项目中我们还有更多内容要学习，所以现在多花一点时间是值得的。</p><p>在这个项目中，你学习了 SwiftUI 应用的基本结构、如何构建表单（forms）和分组（sections）、创建导航栈（navigation stacks）和导航栏标题（navigation bar titles）、如何使用<code>@State</code>和<code>@FocusState</code>属性包装器存储程序状态、如何创建<code>TextField</code>和<code>Picker</code>等用户界面控件，以及如何使用<code>ForEach</code>循环创建视图。更棒的是，通过努力，你现在有了一个可以展示的实际项目。</p><h2 id="回顾所学内容" tabindex="-1">回顾所学内容 <a class="header-anchor" href="#回顾所学内容" aria-label="Permalink to &quot;回顾所学内容&quot;">​</a></h2><p>任何人都能看完一个教程，但要记住所学的知识则需要实际付出努力。我的职责是确保你能从这些教程中收获尽可能多的内容，通过完成后面的练习题，帮助你检验自己的学习成果。</p><h2 id="挑战任务" tabindex="-1">挑战任务 <a class="header-anchor" href="#挑战任务" aria-label="Permalink to &quot;挑战任务&quot;">​</a></h2><p>学习编程最好的方法之一就是尽可能多地自己编写代码，因此我为你准备了三种扩展这个应用的方式，确保你能完全理解其中的原理：</p><ol><li>给第三个分组添加一个标题，内容为 “每人应付金额”</li><li>新增一个分组，显示账单的总金额 —— 即原始金额加上小费金额，不除以人数</li><li>将小费比例选择器（picker）改为跳转到新屏幕显示，而不是使用分段控制器（segmented control），并提供更广泛的选项范围 —— 从 0% 到 100% 的所有比例。提示：使用<code>0..&lt;101</code>这个范围，而不是固定的数组。</li></ol><h2 id="wesplit-项目练习题" tabindex="-1">WeSplit 项目练习题 <a class="header-anchor" href="#wesplit-项目练习题" aria-label="Permalink to &quot;WeSplit 项目练习题&quot;">​</a></h2><p>问题 1/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> <code>VStack</code>可以包含任意数量的子视图。</li><li><strong>选项 2：</strong> 所有 SwiftUI 视图都必须继承自<code>ContentView</code>协议。</li></ul><p>问题 2/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 格式化器（Formatters）可以让我们控制<code>Text</code>视图中数字的显示方式。</li><li><strong>选项 2：</strong> 我们应该始终强制用户使用特定的货币代码。</li></ul><p>问题 3/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> SwiftUI 视图不能包含计算属性。</li><li><strong>选项 2：</strong> 在 SwiftUI 中，分段控制器（segmented controls）是通过选择器视图（picker views）创建的。</li></ul><p>问题 4/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 表单（Forms）可以滚动。</li><li><strong>选项 2：</strong> <code>NavigationBar</code>视图可以让我们显示新视图，还能在屏幕顶部放置文本。</li></ul><p>问题 5/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> <code>keyboardType()</code>修饰符可以让我们在文本框（text field）处于激活状态时，更改显示的键盘类型。</li><li><strong>选项 2：</strong> 所有表单分组（form sections）都必须有标题。</li></ul><p>问题 6/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 创建文本框（text field）时，我们需要提供一些占位文本（placeholder text）。</li><li><strong>选项 2：</strong> 在 iOS 中，选择器（Pickers）始终以滚轮形式显示。</li></ul><p>问题 7/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 我们可以使用<code>@</code>符号声明双向绑定，例如<code>@name</code>。</li><li><strong>选项 2：</strong> 所有 SwiftUI 视图都必须有<code>body</code>属性。</li></ul><p>问题 8/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 我们可以向<code>navigationTitle()</code>修饰符传递一个字符串，在导航视图顶部显示标题。</li><li><strong>选项 2：</strong> 空合运算符（nil coalescing operator）用于确保使用值之前该值为 nil。</li></ul><p>问题 9/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 如果想要修改一个属性，需要使用<code>@Property</code>这类 SwiftUI 属性包装器。</li><li><strong>选项 2：</strong> 如果想要修改一个属性，需要使用<code>@State</code>这类 SwiftUI 属性包装器。</li></ul><p>问题 10/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> <code>ForEach</code>视图可以让我们遍历范围（ranges）和数组（arrays）。</li><li><strong>选项 2：</strong> <code>ForEach</code>视图最多只能遍历 10 个项目，因为 SwiftUI 不允许遍历更多项目。</li></ul><p>问题 11/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 每当<code>@State</code>属性发生变化时，Swift 都会重新调用我们的<code>body</code>属性。</li><li><strong>选项 2：</strong> Apple 建议<code>@State</code>属性应使用公开访问控制（public access control）。</li></ul><p>问题 12/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 我们总是需要将文本框（text fields）与字符串（strings）进行绑定。</li><li><strong>选项 2：</strong> 如果我们将应用提交到 App Store，SwiftUI 的预览（previews）不会包含在应用中。</li></ul>`,46)]))}const k=s(l,[["render",n]]);export{g as __pageData,k as default};
