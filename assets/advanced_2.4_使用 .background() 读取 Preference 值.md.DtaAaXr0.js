import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"使用 .background() 读取 Preference 值","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/2.4_使用 .background() 读取 Preference 值.md","filePath":"advanced/2.4_使用 .background() 读取 Preference 值.md"}'),l={name:"advanced/2.4_使用 .background() 读取 Preference 值.md"};function p(h,s,k,r,t,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用-background-读取-preference-值" tabindex="-1">使用 .background() 读取 Preference 值 <a class="header-anchor" href="#使用-background-读取-preference-值" aria-label="Permalink to &quot;使用 .background() 读取 Preference 值&quot;">​</a></h1><h2 id="理解-preferencekey-与-background" tabindex="-1">理解 PreferenceKey 与 .background() <a class="header-anchor" href="#理解-preferencekey-与-background" aria-label="Permalink to &quot;理解 PreferenceKey 与 .background()&quot;">​</a></h2><p>在 SwiftUI 中，<code>PreferenceKey</code> 提供了一种强大的机制，允许子视图向上层视图传递数据。这就像一个秘密通道，让深层视图能够与它们的祖先视图“对话”。而 <code>.background()</code> 修饰符在这里扮演着一个关键角色。</p><p>它不仅仅是用来设置背景颜色或视图的。更重要的是，<code>.background()</code> 能够创建一个新的视图层级。这个新的层级可以读取其内容视图所设置的 <code>PreferenceKey</code> 值。</p><h2 id="background-的工作原理" tabindex="-1">.background() 的工作原理 <a class="header-anchor" href="#background-的工作原理" aria-label="Permalink to &quot;.background() 的工作原理&quot;">​</a></h2><p>当您将 <code>.background()</code> 应用到一个视图时，SwiftUI 会在原始视图的下方插入一个新的视图。这个背景视图可以访问到原始视图及其子视图通过 <code>PreferenceKey</code> 传递的所有信息。这使得它成为读取 Preference 值的理想场所。</p><p>想象一下，您有一个复杂的视图层次结构。您可能希望某个深层子视图的尺寸信息能够被顶层视图感知。使用 <code>.background()</code> 结合 <code>PreferenceKey</code>，这变得轻而易举。</p><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p>使用 <code>.background()</code> 读取 Preference 值在许多场景下都非常有用。例如，您可以：</p><ul><li><strong>动态调整布局</strong>: 根据子视图的实际内容调整父视图的布局。</li><li><strong>实现自定义动画</strong>: 基于子视图的位置或大小创建复杂的动画效果。</li><li><strong>同步视图状态</strong>: 确保不同视图之间的数据保持一致。</li></ul><p>一个常见的例子是，您可能需要获取一个文本视图的实际渲染高度。您可以在文本视图上设置一个 <code>PreferenceKey</code> 来发布其高度，然后在 <code>.background()</code> 中读取这个高度。</p><h2 id="结合-preferencekey-的强大功能" tabindex="-1">结合 PreferenceKey 的强大功能 <a class="header-anchor" href="#结合-preferencekey-的强大功能" aria-label="Permalink to &quot;结合 PreferenceKey 的强大功能&quot;">​</a></h2><p>当您在 <code>.background()</code> 中读取 <code>PreferenceKey</code> 值时，您通常会使用 <code>.onPreferenceChange()</code> 修饰符来监听这些值的变化。一旦值发生变化，您就可以执行相应的逻辑。</p><p>例如，您可以将读取到的尺寸信息存储在一个 <code>@State</code> 变量中，然后用它来调整其他视图的布局。这种模式在构建响应式和自适应的用户界面时非常有效。大约有 70% 的复杂布局问题可以通过这种方式优雅地解决。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> childHeight: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是一个子视图，它的高度会被测量。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    Color.clear.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">preference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: MyHeightPreferenceKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onPreferenceChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyHeightPreferenceKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { newHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.childHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newHeight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;子视图的高度是：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(childHeight, specifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%.2f&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyHeightPreferenceKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferenceKey </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultValue: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGFloat, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGFloat) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这个例子展示了如何通过 <code>GeometryReader</code> 在 <code>.background()</code> 中获取子视图的高度，并通过 <code>PreferenceKey</code> 将其传递给父视图。这真是太棒了！✨</p>`,16)]))}const g=i(l,[["render",p]]);export{E as __pageData,g as default};
