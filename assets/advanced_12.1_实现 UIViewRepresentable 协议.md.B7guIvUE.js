import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"实现 UIViewRepresentable 协议","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/12.1_实现 UIViewRepresentable 协议.md","filePath":"advanced/12.1_实现 UIViewRepresentable 协议.md"}'),l={name:"advanced/12.1_实现 UIViewRepresentable 协议.md"};function t(p,s,h,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="实现-uiviewrepresentable-协议" tabindex="-1">实现 UIViewRepresentable 协议 <a class="header-anchor" href="#实现-uiviewrepresentable-协议" aria-label="Permalink to &quot;实现 UIViewRepresentable 协议&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，想要使用 UIKit 的强大功能吗？🤔 <code>UIViewRepresentable</code> 协议就是你的秘密武器！它允许你将 UIKit 视图无缝集成到你的 SwiftUI 界面中，是不是很酷？😎 让我们一起探索如何使用它吧！</p></blockquote><h2 id="什么是-uiviewrepresentable" tabindex="-1">什么是 UIViewRepresentable？ <a class="header-anchor" href="#什么是-uiviewrepresentable" aria-label="Permalink to &quot;什么是 UIViewRepresentable？&quot;">​</a></h2><p><code>UIViewRepresentable</code> 是一个 SwiftUI 协议，它允许你创建 SwiftUI 视图，这些视图实际上是 UIKit 视图的包装器。这意味着你可以在 SwiftUI 中使用 UIKit 的 <code>UIView</code> 子类，例如 <code>UILabel</code>、<code>UITextField</code> 或自定义的 UIKit 视图。这为你提供了极大的灵活性，尤其是在需要使用 SwiftUI 中尚未提供的 UIKit 功能时。</p><h2 id="如何实现-uiviewrepresentable-协议" tabindex="-1">如何实现 UIViewRepresentable 协议？ <a class="header-anchor" href="#如何实现-uiviewrepresentable-协议" aria-label="Permalink to &quot;如何实现 UIViewRepresentable 协议？&quot;">​</a></h2><p>实现 <code>UIViewRepresentable</code> 协议非常简单！你需要创建一个结构体，并让它遵循该协议。这个结构体需要实现两个方法：</p><ol><li><code>makeUIView(context:)</code>: 这个方法负责创建并返回一个 UIKit 视图实例。</li><li><code>updateUIView(_:context:)</code>: 这个方法负责在 SwiftUI 视图更新时，更新 UIKit 视图的状态。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewRepresentable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIViewType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UILabel </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明要包装的 UIKit 视图类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UILabel {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建并返回一个 UILabel 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello from UIKit!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiView: UILabel, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 SwiftUI 视图更新时，更新 UILabel 的状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uiView.textColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="在-swiftui-中使用-uiviewrepresentable" tabindex="-1">在 SwiftUI 中使用 UIViewRepresentable <a class="header-anchor" href="#在-swiftui-中使用-uiviewrepresentable" aria-label="Permalink to &quot;在 SwiftUI 中使用 UIViewRepresentable&quot;">​</a></h2><p>一旦你实现了 <code>UIViewRepresentable</code> 协议，你就可以像使用任何其他 SwiftUI 视图一样使用你的自定义视图了！🎉</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        MyCustomView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用自定义的 UIKit 视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>是不是很简单？通过 <code>UIViewRepresentable</code>，你可以轻松地将 UIKit 的强大功能带入你的 SwiftUI 项目中。这为你打开了无限的可能性，让你能够创建更加丰富和强大的应用程序。🚀</p><p>以下是一些你可以使用 <code>UIViewRepresentable</code> 的场景：</p><ul><li>使用 UIKit 的高级文本排版功能。</li><li>集成第三方 UIKit 库。</li><li>创建自定义的交互式视图。</li></ul><p>记住，<code>UIViewRepresentable</code> 是一个强大的工具，可以帮助你充分利用 UIKit 和 SwiftUI 的优势。💪 祝你编码愉快！</p>`,15)]))}const b=i(l,[["render",t]]);export{c as __pageData,b as default};
