import{_ as a,c as s,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"2.5_UIApplication与AppDelegate生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/2.5_UIApplication与AppDelegate生命周期.md","filePath":"uikit/basics/2.5_UIApplication与AppDelegate生命周期.md"}'),l={name:"uikit/basics/2.5_UIApplication与AppDelegate生命周期.md"};function p(t,i,h,o,r,d){return n(),s("div",null,i[0]||(i[0]=[e(`<h1 id="_2-5-uiapplication与appdelegate生命周期" tabindex="-1">2.5_UIApplication与AppDelegate生命周期 <a class="header-anchor" href="#_2-5-uiapplication与appdelegate生命周期" aria-label="Permalink to &quot;2.5_UIApplication与AppDelegate生命周期&quot;">​</a></h1><h2 id="uiapplication-的角色与职责" tabindex="-1">UIApplication 的角色与职责 <a class="header-anchor" href="#uiapplication-的角色与职责" aria-label="Permalink to &quot;UIApplication 的角色与职责&quot;">​</a></h2><p>UIApplication 是每个 iOS 应用的<strong>核心</strong>，它负责管理应用的生命周期、处理用户事件，并提供应用运行所需的关键服务。你可以把它想象成应用的“大脑”，协调各个组件的工作，确保应用平稳运行。🎉</p><ul><li>管理应用的事件循环 (run loop)。</li><li>处理应用的启动和关闭。</li><li>提供应用级别的配置信息。</li><li>管理应用的界面和窗口。</li></ul><h2 id="appdelegate-的重要性" tabindex="-1">AppDelegate 的重要性 <a class="header-anchor" href="#appdelegate-的重要性" aria-label="Permalink to &quot;AppDelegate 的重要性&quot;">​</a></h2><p>AppDelegate 是一个<strong>代理对象</strong>，它负责响应 UIApplication 发出的各种事件，例如应用启动、进入后台、回到前台等。你可以把它看作是 UIApplication 的“助手”，帮助它处理各种杂务。</p><ul><li>应用启动时，AppDelegate 会收到 <code>application:didFinishLaunchingWithOptions:</code> 消息，你可以在这里进行应用的初始化设置。</li><li>当应用进入后台时，AppDelegate 会收到 <code>applicationWillResignActive:</code> 和 <code>applicationDidEnterBackground:</code> 消息，你可以在这里保存应用的状态。</li><li>当应用回到前台时，AppDelegate 会收到 <code>applicationWillEnterForeground:</code> 和 <code>applicationDidBecomeActive:</code> 消息，你可以在这里恢复应用的状态。</li></ul><h2 id="应用的生命周期阶段" tabindex="-1">应用的生命周期阶段 <a class="header-anchor" href="#应用的生命周期阶段" aria-label="Permalink to &quot;应用的生命周期阶段&quot;">​</a></h2><p>iOS 应用的生命周期包括以下几个阶段：</p><ol><li><strong>Not Running (未运行)</strong>：应用尚未启动或已被系统终止。</li><li><strong>Inactive (未激活)</strong>：应用在前台运行，但未接收到事件。例如，用户锁屏或收到电话时。</li><li><strong>Active (激活)</strong>：应用在前台运行，并接收到事件。这是应用正常运行的状态。</li><li><strong>Background (后台)</strong>：应用在后台运行，可以执行一些任务，例如播放音乐或下载文件。</li><li><strong>Suspended (暂停)</strong>：应用在后台暂停，不执行任何任务。系统可能会在内存不足时终止暂停的应用。</li></ol><h2 id="appdelegate-中的关键方法" tabindex="-1">AppDelegate 中的关键方法 <a class="header-anchor" href="#appdelegate-中的关键方法" aria-label="Permalink to &quot;AppDelegate 中的关键方法&quot;">​</a></h2><p>AppDelegate 中有几个关键方法，你需要了解它们的作用：</p><ol><li><code>application:didFinishLaunchingWithOptions:</code>：应用启动时调用，用于初始化应用。</li><li><code>applicationWillResignActive:</code>：应用即将进入非激活状态时调用。</li><li><code>applicationDidEnterBackground:</code>：应用已经进入后台时调用。</li><li><code>applicationWillEnterForeground:</code>：应用即将回到前台时调用。</li><li><code>applicationDidBecomeActive:</code>：应用已经回到前台时调用。</li><li><code>applicationWillTerminate:</code>：应用即将被终止时调用。</li></ol><h2 id="示例-处理应用启动" tabindex="-1">示例：处理应用启动 <a class="header-anchor" href="#示例-处理应用启动" aria-label="Permalink to &quot;示例：处理应用启动&quot;">​</a></h2><p>在 <code>application:didFinishLaunchingWithOptions:</code> 方法中，你可以进行一些初始化设置，例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application: UIApplication, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">didFinishLaunchingWithOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> launchOptions: [UIApplication.LaunchOptionsKey: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 配置应用的根视图控制器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UIScreen.main.bounds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeKeyAndVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他初始化操作</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;应用启动完成！🚀&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这段代码创建了一个 UIWindow，并将 ViewController 设置为根视图控制器，然后让窗口可见。这确保了你的应用在启动时显示正确的界面。🎉</p>`,17)]))}const g=a(l,[["render",p]]);export{c as __pageData,g as default};
