import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"开关 Toggle 与滑块 Slider","description":"","frontmatter":{},"headers":[],"relativePath":"core/2.3_开关 Toggle 与滑块 Slider.md","filePath":"core/2.3_开关 Toggle 与滑块 Slider.md"}'),l={name:"core/2.3_开关 Toggle 与滑块 Slider.md"};function t(p,s,r,d,h,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="开关-toggle-与滑块-slider" tabindex="-1">开关 Toggle 与滑块 Slider <a class="header-anchor" href="#开关-toggle-与滑块-slider" aria-label="Permalink to &quot;开关 Toggle 与滑块 Slider&quot;">​</a></h1><h2 id="开关-toggle-的魅力" tabindex="-1">开关 Toggle 的魅力 <a class="header-anchor" href="#开关-toggle-的魅力" aria-label="Permalink to &quot;开关 Toggle 的魅力&quot;">​</a></h2><p>SwiftUI 中的 <code>Toggle</code> 控件让用户能够轻松地在两种状态之间切换，通常是“开”或“关”。 💡 它的使用非常直观，是构建交互式界面的基石。 你会发现它在设置、偏好设置等场景中无处不在。</p><p>例如，你可以用它来控制一个功能的启用或禁用。 想象一下，一个应用允许用户开启或关闭通知，<code>Toggle</code> 就是实现这一功能的完美选择。 它的简洁性是其最大的优点之一。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLightOn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $isLightOn) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;打开灯光&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="滑块-slider-的精细控制" tabindex="-1">滑块 Slider 的精细控制 <a class="header-anchor" href="#滑块-slider-的精细控制" aria-label="Permalink to &quot;滑块 Slider 的精细控制&quot;">​</a></h2><p><code>Slider</code> 控件则提供了更精细的数值选择能力。 它允许用户通过拖动拇指来选择一个范围内的值。 这对于调整音量、亮度或任何需要连续数值输入的场景都非常有用。 🚀</p><p>你可以设定滑块的最小值、最大值，甚至步进值。 这意味着你可以精确控制用户可以调整的范围和精度。 这种灵活性使得 <code>Slider</code> 在各种应用中都表现出色。</p><ul><li><strong>最小值与最大值</strong>: 定义了滑块可选择的数值范围。</li><li><strong>步进值</strong>: 决定了每次拖动滑块时数值变化的最小单位。</li></ul><h2 id="结合使用-交互的艺术" tabindex="-1">结合使用：交互的艺术 <a class="header-anchor" href="#结合使用-交互的艺术" aria-label="Permalink to &quot;结合使用：交互的艺术&quot;">​</a></h2><p>将 <code>Toggle</code> 和 <code>Slider</code> 结合使用，可以创造出更丰富、更具动态的交互体验。 想象一个音乐播放器，你可能有一个 <code>Toggle</code> 来控制播放/暂停，同时有一个 <code>Slider</code> 来调整音量。 🎶</p><p>这种组合能够满足用户对不同类型交互的需求。 统计数据显示，用户更倾向于那些提供直观且响应迅速界面的应用，而 <code>Toggle</code> 和 <code>Slider</code> 正是实现这一目标的强大工具。 超过 75% 的用户表示，易用性是他们选择应用的关键因素。</p><h2 id="自定义与样式" tabindex="-1">自定义与样式 <a class="header-anchor" href="#自定义与样式" aria-label="Permalink to &quot;自定义与样式&quot;">​</a></h2><p>SwiftUI 提供了强大的修饰符，让你能够轻松地自定义 <code>Toggle</code> 和 <code>Slider</code> 的外观。 你可以改变它们的颜色、大小，甚至添加自定义的标签。 🎨 这意味着你的控件可以完美融入应用的整体设计风格。</p><p>例如，你可以使用 <code>.tint()</code> 修饰符来改变 <code>Toggle</code> 的颜色，或者使用 <code>.accentColor()</code> 来调整 <code>Slider</code> 的视觉效果。 这种高度的可定制性让你能够打造出独一无二的用户界面。 尽情发挥你的创意吧！</p>`,15)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
