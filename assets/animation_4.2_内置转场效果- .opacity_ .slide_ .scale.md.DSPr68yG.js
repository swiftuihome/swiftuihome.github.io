import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"4.2_内置转场效果- .opacity, .slide, .scale","description":"","frontmatter":{},"headers":[],"relativePath":"animation/4.2_内置转场效果- .opacity, .slide, .scale.md","filePath":"animation/4.2_内置转场效果- .opacity, .slide, .scale.md"}'),l={name:"animation/4.2_内置转场效果- .opacity, .slide, .scale.md"};function t(p,s,d,o,c,h){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_4-2-内置转场效果-opacity-slide-scale" tabindex="-1">4.2_内置转场效果- .opacity, .slide, .scale <a class="header-anchor" href="#_4-2-内置转场效果-opacity-slide-scale" aria-label="Permalink to &quot;4.2_内置转场效果- .opacity, .slide, .scale&quot;">​</a></h1><h2 id="swiftui-内置转场效果-opacity-slide-scale-🚀" tabindex="-1">SwiftUI 内置转场效果：.opacity, .slide, .scale 🚀 <a class="header-anchor" href="#swiftui-内置转场效果-opacity-slide-scale-🚀" aria-label="Permalink to &quot;SwiftUI 内置转场效果：.opacity, .slide, .scale 🚀&quot;">​</a></h2><p>SwiftUI 提供了几个内置的转场效果，让你可以轻松地为视图添加动画。其中，<code>.opacity</code>、<code>.slide</code> 和 <code>.scale</code> 是最常用的几个。它们简单易用，效果却非常出色！🎉</p><h2 id="opacity-透明度渐变" tabindex="-1">.opacity：透明度渐变 <a class="header-anchor" href="#opacity-透明度渐变" aria-label="Permalink to &quot;.opacity：透明度渐变&quot;">​</a></h2><p><code>.opacity</code> 转场通过改变视图的透明度来实现动画效果。你可以让视图从完全透明（<code>opacity = 0</code>）渐变为完全不透明（<code>opacity = 1</code>），或者反过来。这是一种非常微妙但有效的转场方式。</p><ul><li><p><strong>用法：</strong> 直接将 <code>.opacity</code> 应用于 <code>.transition()</code> 修饰符。</p></li><li><p><strong>示例：</strong></p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isVisible {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.opacity)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当 <code>isVisible</code> 变为 <code>true</code> 时，<code>Text</code> 视图会从透明渐变为不透明。反之，当 <code>isVisible</code> 变为 <code>false</code> 时，<code>Text</code> 视图会从不透明渐变为透明。</p></li></ul><h2 id="slide-滑动进入-退出" tabindex="-1">.slide：滑动进入/退出 <a class="header-anchor" href="#slide-滑动进入-退出" aria-label="Permalink to &quot;.slide：滑动进入/退出&quot;">​</a></h2><p><code>.slide</code> 转场使视图从屏幕边缘滑动进入或退出。你可以指定滑动方向，默认是从边缘滑入。</p><ul><li><p><strong>用法：</strong> 将 <code>.slide</code> 应用于 <code>.transition()</code> 修饰符。</p></li><li><p><strong>示例：</strong></p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isVisible {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.slide)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当 <code>isVisible</code> 变为 <code>true</code> 时，<code>Text</code> 视图会从屏幕边缘滑入。当 <code>isVisible</code> 变为 <code>false</code> 时，<code>Text</code> 视图会滑出屏幕。</p></li></ul><h2 id="scale-缩放效果" tabindex="-1">.scale：缩放效果 <a class="header-anchor" href="#scale-缩放效果" aria-label="Permalink to &quot;.scale：缩放效果&quot;">​</a></h2><p><code>.scale</code> 转场通过改变视图的大小来实现动画效果。你可以让视图从很小逐渐放大到正常大小，或者反过来。</p><ul><li><p><strong>用法：</strong> 将 <code>.scale</code> 应用于 <code>.transition()</code> 修饰符。</p></li><li><p><strong>示例：</strong></p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isVisible {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.scale)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当 <code>isVisible</code> 变为 <code>true</code> 时，<code>Text</code> 视图会从小逐渐放大到正常大小。当 <code>isVisible</code> 变为 <code>false</code> 时，<code>Text</code> 视图会从正常大小缩小消失。</p></li></ul><h2 id="组合使用-效果更佳-✨" tabindex="-1">组合使用，效果更佳！✨ <a class="header-anchor" href="#组合使用-效果更佳-✨" aria-label="Permalink to &quot;组合使用，效果更佳！✨&quot;">​</a></h2><p>你可以将这些内置转场效果组合起来使用，创造出更复杂的动画效果。例如，你可以同时使用 <code>.opacity</code> 和 <code>.scale</code>，让视图在缩放的同时改变透明度。</p><ul><li><p><strong>示例：</strong></p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isVisible {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.opacity.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">combined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .scale))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>Text</code> 视图在显示时会同时进行透明度渐变和缩放动画，效果会更加生动有趣。</p></li></ul><p>这些内置转场效果非常强大，可以帮助你轻松地为 SwiftUI 应用添加各种动画效果。尝试一下，你会发现它们能让你的应用更加吸引人！🚀</p>`,16)]))}const E=i(l,[["render",t]]);export{k as __pageData,E as default};
