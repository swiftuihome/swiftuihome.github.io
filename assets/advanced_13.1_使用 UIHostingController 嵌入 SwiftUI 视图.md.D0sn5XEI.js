import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"使用 UIHostingController 嵌入 SwiftUI 视图","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/13.1_使用 UIHostingController 嵌入 SwiftUI 视图.md","filePath":"advanced/13.1_使用 UIHostingController 嵌入 SwiftUI 视图.md"}'),l={name:"advanced/13.1_使用 UIHostingController 嵌入 SwiftUI 视图.md"};function e(h,s,p,r,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="使用-uihostingcontroller-嵌入-swiftui-视图" tabindex="-1">使用 UIHostingController 嵌入 SwiftUI 视图 <a class="header-anchor" href="#使用-uihostingcontroller-嵌入-swiftui-视图" aria-label="Permalink to &quot;使用 UIHostingController 嵌入 SwiftUI 视图&quot;">​</a></h1><h2 id="uihostingcontroller-核心概念" tabindex="-1">UIHostingController 核心概念 <a class="header-anchor" href="#uihostingcontroller-核心概念" aria-label="Permalink to &quot;UIHostingController 核心概念&quot;">​</a></h2><p><code>UIHostingController</code> 是 UIKit 和 SwiftUI 之间的桥梁，它允许你在任何 UIKit 视图层次结构中无缝地嵌入 SwiftUI 视图。这对于逐步迁移现有 UIKit 应用到 SwiftUI 来说至关重要。想象一下，你有一个庞大的 UIKit 项目，现在想引入 SwiftUI 的强大功能，<code>UIHostingController</code> 就是你的最佳选择！🚀</p><p>它继承自 <code>UIViewController</code>，这意味着你可以像管理任何其他视图控制器一样管理它。例如，你可以将其推入导航堆栈，或者将其作为子视图控制器添加。</p><h2 id="嵌入-swiftui-视图的步骤" tabindex="-1">嵌入 SwiftUI 视图的步骤 <a class="header-anchor" href="#嵌入-swiftui-视图的步骤" aria-label="Permalink to &quot;嵌入 SwiftUI 视图的步骤&quot;">​</a></h2><p>将 SwiftUI 视图嵌入到 UIKit 中是一个非常直接的过程。你只需要几个简单的步骤就能完成。</p><ol><li><strong>创建 SwiftUI 视图</strong>: 首先，你需要有一个 SwiftUI 视图。这可以是任何你想要的复杂视图，从简单的文本标签到复杂的自定义布局。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好，SwiftUI！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><strong>实例化 UIHostingController</strong>: 接下来，使用你的 SwiftUI 视图来初始化 <code>UIHostingController</code>。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostingController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIHostingController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rootView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MySwiftUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>添加为子视图控制器</strong>: 将 <code>hostingController</code> 添加到你的 UIKit 视图控制器中作为子视图控制器。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hostingController)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">didMove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>这个过程确保了 SwiftUI 视图的生命周期与你的 UIKit 视图控制器同步。</li></ol><h2 id="布局和尺寸管理" tabindex="-1">布局和尺寸管理 <a class="header-anchor" href="#布局和尺寸管理" aria-label="Permalink to &quot;布局和尺寸管理&quot;">​</a></h2><p>嵌入 SwiftUI 视图后，管理其在 UIKit 容器中的布局和尺寸至关重要。你可以使用 Auto Layout 或手动设置 frame 来控制 <code>UIHostingController</code> 的视图。</p><ul><li><p><strong>使用 Auto Layout</strong>: 这是推荐的方法，因为它提供了最大的灵活性和适应性。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.topAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.leadingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.trailingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bottomAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.bottomAnchor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>通过这种方式，SwiftUI 视图将自动适应其父视图的尺寸变化。</p></li><li><p><strong>手动设置 Frame</strong>: 对于简单的场景，你也可以直接设置 <code>hostingController.view</code> 的 <code>frame</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然而，这种方法在屏幕旋转或不同设备尺寸下可能需要更多的手动调整。</p></li></ul><h2 id="性能考量与最佳实践" tabindex="-1">性能考量与最佳实践 <a class="header-anchor" href="#性能考量与最佳实践" aria-label="Permalink to &quot;性能考量与最佳实践&quot;">​</a></h2><p>虽然 <code>UIHostingController</code> 提供了极大的便利，但在使用时仍需考虑性能。</p><ul><li><strong>避免过度嵌套</strong>: 尽量避免在 SwiftUI 视图中嵌入过多的 <code>UIHostingController</code>，这可能会增加视图层次的复杂性。</li><li><strong>优化 SwiftUI 视图</strong>: 确保你的 SwiftUI 视图本身是高效的，避免不必要的重绘。例如，使用 <code>@State</code> 和 <code>@Binding</code> 来管理视图状态，减少不必要的视图更新。</li><li><strong>数据流管理</strong>: 考虑如何有效地在 UIKit 和 SwiftUI 之间传递数据。你可以通过 <code>UIHostingController</code> 的 <code>rootView</code> 属性来更新 SwiftUI 视图的数据。例如，你可以创建一个可观察对象，并在 UIKit 中更新它，SwiftUI 视图会自动响应这些变化。这使得数据同步变得轻而易举！✨</li></ul>`,13)]))}const g=i(l,[["render",e]]);export{E as __pageData,g as default};
