import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"按逻辑分组提取计算属性视图","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/12.2_按逻辑分组提取计算属性视图.md","filePath":"refactor/12.2_按逻辑分组提取计算属性视图.md"}'),p={name:"refactor/12.2_按逻辑分组提取计算属性视图.md"};function e(t,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="按逻辑分组提取计算属性视图" tabindex="-1">按逻辑分组提取计算属性视图 <a class="header-anchor" href="#按逻辑分组提取计算属性视图" aria-label="Permalink to &quot;按逻辑分组提取计算属性视图&quot;">​</a></h1><h2 id="优化视图结构-计算属性的魔力-✨" tabindex="-1">优化视图结构：计算属性的魔力 ✨ <a class="header-anchor" href="#优化视图结构-计算属性的魔力-✨" aria-label="Permalink to &quot;优化视图结构：计算属性的魔力 ✨&quot;">​</a></h2><p>将复杂的<code>body</code>视图拆分成更小、更易管理的计算属性，是提升代码可读性和维护性的绝佳策略。这种方法让你的视图代码变得清晰，就像一首优美的乐章。</p><h2 id="为什么选择计算属性视图" tabindex="-1">为什么选择计算属性视图？ <a class="header-anchor" href="#为什么选择计算属性视图" aria-label="Permalink to &quot;为什么选择计算属性视图？&quot;">​</a></h2><p>使用计算属性来封装视图片段，能带来诸多益处。它不仅让你的代码更整洁，还能显著提高开发效率。</p><ul><li><strong>提高可读性</strong>：每个计算属性负责渲染一个特定的UI部分，让你一眼就能明白其功能。</li><li><strong>增强可维护性</strong>：当某个UI部分需要修改时，你只需关注对应的计算属性，而不是在庞大的<code>body</code>中大海捞针。</li><li><strong>促进代码复用</strong>：如果多个地方需要相同的UI组件，你可以将其封装成计算属性，避免重复编写。</li></ul><p>例如，一个复杂的表单视图可以拆分为多个计算属性，如<code>headerView</code>、<code>inputSection</code>和<code>footerButtons</code>。这样，每个部分都职责明确。</p><h2 id="实现计算属性视图的步骤-🚀" tabindex="-1">实现计算属性视图的步骤 🚀 <a class="header-anchor" href="#实现计算属性视图的步骤-🚀" aria-label="Permalink to &quot;实现计算属性视图的步骤 🚀&quot;">​</a></h2><p>将视图逻辑封装到计算属性中，过程非常直观。你只需定义一个返回<code>some View</code>的计算属性。</p><ol><li><strong>识别可独立的部分</strong>：审视你的<code>body</code>，找出那些可以独立成块的UI元素或逻辑组。</li><li><strong>创建计算属性</strong>：为每个识别出的部分创建一个新的计算属性，并确保其返回类型为<code>some View</code>。</li><li><strong>迁移代码</strong>：将对应的UI代码从<code>body</code>中剪切并粘贴到新的计算属性中。</li><li><strong>在<code>body</code>中调用</strong>：最后，在<code>body</code>中使用新创建的计算属性来构建你的主视图。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComplexView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            headerSection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            contentSection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            footerSection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headerSection: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;欢迎来到我的应用！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentSection: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alignment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .leading) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是一个内容区域。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.headline)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;star.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.yellow)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> footerSection: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 执行操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.white)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cornerRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="最佳实践与注意事项-💡" tabindex="-1">最佳实践与注意事项 💡 <a class="header-anchor" href="#最佳实践与注意事项-💡" aria-label="Permalink to &quot;最佳实践与注意事项 💡&quot;">​</a></h2><p>采纳计算属性视图时，遵循一些最佳实践能让你的代码更上一层楼。</p><ul><li><strong>保持专注</strong>：每个计算属性应只负责一个逻辑单元的渲染。</li><li><strong>命名清晰</strong>：使用描述性名称，让属性的用途一目了然。</li><li><strong>避免过度拆分</strong>：虽然拆分是好事，但过多的细小属性也可能导致代码碎片化。找到平衡点至关重要。</li><li><strong>性能考量</strong>：计算属性在每次视图更新时都会重新计算，但SwiftUI的性能优化通常能很好地处理。</li></ul><p>通过这种方式，你的SwiftUI代码将变得更加模块化、易于理解和维护。你会发现，管理大型视图不再是挑战，而是一种享受！ 🥳</p>`,15)]))}const c=i(p,[["render",e]]);export{o as __pageData,c as default};
