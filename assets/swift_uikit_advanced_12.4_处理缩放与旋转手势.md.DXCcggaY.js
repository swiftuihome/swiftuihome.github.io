import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"处理缩放与旋转手势","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/12.4_处理缩放与旋转手势.md","filePath":"swift/uikit/advanced/12.4_处理缩放与旋转手势.md"}'),t={name:"swift/uikit/advanced/12.4_处理缩放与旋转手势.md"};function l(h,s,p,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="处理缩放与旋转手势" tabindex="-1">处理缩放与旋转手势 <a class="header-anchor" href="#处理缩放与旋转手势" aria-label="Permalink to &quot;处理缩放与旋转手势&quot;">​</a></h1><h2 id="启用多点触控与手势识别器" tabindex="-1">启用多点触控与手势识别器 <a class="header-anchor" href="#启用多点触控与手势识别器" aria-label="Permalink to &quot;启用多点触控与手势识别器&quot;">​</a></h2><p>要处理缩放和旋转手势，首先需要确保你的视图支持多点触控。这是因为缩放和旋转通常需要两个或更多手指的操作。在 <code>viewDidLoad</code> 中，你可以轻松地将视图的 <code>isMultipleTouchEnabled</code> 属性设置为 <code>true</code>。 🚀</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">someView.isMultipleTouchEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，你需要创建并添加 <code>UIPinchGestureRecognizer</code> 和 <code>UIRotationGestureRecognizer</code> 实例。这些手势识别器会监听用户在屏幕上的特定多点触控模式。</p><h2 id="实现缩放手势" tabindex="-1">实现缩放手势 <a class="header-anchor" href="#实现缩放手势" aria-label="Permalink to &quot;实现缩放手势&quot;">​</a></h2><p><code>UIPinchGestureRecognizer</code> 专门用于检测捏合手势，也就是我们常说的缩放。当用户用两根手指进行捏合或张开时，这个手势识别器就会被触发。</p><ul><li><strong>创建手势识别器</strong>: 实例化 <code>UIPinchGestureRecognizer</code> 并指定一个目标方法。</li><li><strong>添加目标方法</strong>: 这个方法会在手势状态改变时被调用。</li><li><strong>处理缩放比例</strong>: <code>UIPinchGestureRecognizer</code> 的 <code>scale</code> 属性会告诉你当前的缩放比例。</li></ul><p>例如，你可以这样实现一个缩放手势：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handlePinch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gesture: UIPinchGestureRecognizer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gesture.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .changed {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gesture.scale</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gesture.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.transform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (gesture.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.transform.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaledBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scale, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scale))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gesture.scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 重置比例，以便下次增量缩放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在上述代码中，<code>gesture.scale</code> 提供了自上次识别以来手势的缩放因子。将其应用于视图的 <code>transform</code> 属性，可以实现平滑的缩放效果。</p><h2 id="实现旋转手势" tabindex="-1">实现旋转手势 <a class="header-anchor" href="#实现旋转手势" aria-label="Permalink to &quot;实现旋转手势&quot;">​</a></h2><p>与缩放类似，<code>UIRotationGestureRecognizer</code> 用于检测旋转手势。当用户用两根手指在屏幕上进行旋转时，它就会被激活。</p><ul><li><strong>创建手势识别器</strong>: 实例化 <code>UIRotationGestureRecognizer</code> 并指定一个目标方法。</li><li><strong>添加目标方法</strong>: 这个方法会在手势状态改变时被调用。</li><li><strong>处理旋转角度</strong>: <code>UIRotationGestureRecognizer</code> 的 <code>rotation</code> 属性会提供当前的旋转角度。</li></ul><p>你可以这样实现一个旋转手势：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleRotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gesture: UIRotationGestureRecognizer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gesture.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .changed {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gesture.rotation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gesture.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.transform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (gesture.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.transform.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: rotation))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gesture.rotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 重置角度，以便下次增量旋转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>gesture.rotation</code> 提供了自上次识别以来手势的旋转角度（以弧度为单位）。将其应用于视图的 <code>transform</code> 属性，可以实现流畅的旋转效果。</p><h2 id="结合缩放与旋转" tabindex="-1">结合缩放与旋转 <a class="header-anchor" href="#结合缩放与旋转" aria-label="Permalink to &quot;结合缩放与旋转&quot;">​</a></h2><p>一个常见的需求是同时处理缩放和旋转。你可以将这两个手势识别器都添加到同一个视图上。</p><ol><li><strong>添加两个手势识别器</strong>: 确保 <code>UIPinchGestureRecognizer</code> 和 <code>UIRotationGestureRecognizer</code> 都已添加到你的视图。</li><li><strong>独立处理</strong>: 它们的处理方法是独立的，但都作用于视图的 <code>transform</code> 属性。</li></ol><p>例如，一个视图可以同时响应捏合和旋转。用户可以先捏合放大，然后旋转，或者同时进行。这种交互方式极大地提升了用户体验，让你的应用更加生动有趣！✨ 许多图像编辑应用都广泛使用了这种技术，用户可以轻松地调整图片大小和方向。</p><h2 id="确保手势协同工作" tabindex="-1">确保手势协同工作 <a class="header-anchor" href="#确保手势协同工作" aria-label="Permalink to &quot;确保手势协同工作&quot;">​</a></h2><p>有时，你可能希望缩放和旋转手势能够同时被识别。默认情况下，手势识别器可能会相互阻塞。为了解决这个问题，你需要实现 <code>UIGestureRecognizerDelegate</code> 协议的 <code>gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)</code> 方法。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIGestureRecognizerDelegate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gestureRecognizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gestureRecognizer: UIGestureRecognizer, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shouldRecognizeSimultaneouslyWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> otherGestureRecognizer: UIGestureRecognizer) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 允许所有手势同时识别</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过返回 <code>true</code>，你允许了多个手势识别器同时工作，从而实现了更自然、更流畅的用户交互。这对于创建直观且响应迅速的界面至关重要。 💯 记住，将 <code>delegate</code> 设置为 <code>self</code> 是关键一步！</p>`,25)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
