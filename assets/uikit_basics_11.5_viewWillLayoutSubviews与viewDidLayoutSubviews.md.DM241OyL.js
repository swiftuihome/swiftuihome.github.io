import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"11.5_viewWillLayoutSubviews与viewDidLayoutSubviews方法的使用","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/11.5_viewWillLayoutSubviews与viewDidLayoutSubviews.md","filePath":"uikit/basics/11.5_viewWillLayoutSubviews与viewDidLayoutSubviews.md"}'),e={name:"uikit/basics/11.5_viewWillLayoutSubviews与viewDidLayoutSubviews.md"};function t(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_11-5-viewwilllayoutsubviews与viewdidlayoutsubviews方法的使用" tabindex="-1">11.5_viewWillLayoutSubviews与viewDidLayoutSubviews方法的使用 <a class="header-anchor" href="#_11-5-viewwilllayoutsubviews与viewdidlayoutsubviews方法的使用" aria-label="Permalink to &quot;11.5_viewWillLayoutSubviews与viewDidLayoutSubviews方法的使用&quot;">​</a></h1><h2 id="理解-viewwilllayoutsubviews" tabindex="-1">理解 viewWillLayoutSubviews <a class="header-anchor" href="#理解-viewwilllayoutsubviews" aria-label="Permalink to &quot;理解 viewWillLayoutSubviews&quot;">​</a></h2><p><code>viewWillLayoutSubviews</code> 是一个在视图的子视图即将被布局时调用的方法。你可以把它看作是视图布局过程中的一个“预备”阶段。在这个方法中，你可以进行一些准备工作，例如调整子视图的属性，或者进行一些计算，以便在布局过程中使用。这个方法在视图的 bounds 发生改变时也会被调用，例如，当设备旋转时。</p><ul><li><strong>何时调用？</strong> 在视图的子视图即将被布局之前。</li><li><strong>用途？</strong> 准备子视图的布局，例如调整属性或进行计算。</li><li><strong>场景？</strong> 设备旋转，视图 bounds 改变。</li></ul><h2 id="深入-viewdidlayoutsubviews" tabindex="-1">深入 viewDidLayoutSubviews <a class="header-anchor" href="#深入-viewdidlayoutsubviews" aria-label="Permalink to &quot;深入 viewDidLayoutSubviews&quot;">​</a></h2><p><code>viewDidLayoutSubviews</code> 是在视图的子视图完成布局后调用的方法。你可以把它看作是布局过程的“完成”阶段。在这个方法中，你可以进行一些收尾工作，例如更新 UI，或者进行一些基于布局结果的调整。这个方法同样在视图的 bounds 发生改变时也会被调用。</p><ul><li><strong>何时调用？</strong> 在视图的子视图完成布局之后。</li><li><strong>用途？</strong> 进行基于布局结果的调整，更新 UI。</li><li><strong>场景？</strong> 设备旋转，视图 bounds 改变。</li></ul><h2 id="布局过程中的角色" tabindex="-1">布局过程中的角色 <a class="header-anchor" href="#布局过程中的角色" aria-label="Permalink to &quot;布局过程中的角色&quot;">​</a></h2><p>这两个方法在视图的布局过程中扮演着不同的角色。<code>viewWillLayoutSubviews</code> 让你有机会在布局之前进行准备，而 <code>viewDidLayoutSubviews</code> 让你有机会在布局之后进行调整。你可以把它们想象成一个“先准备，后完成”的过程。</p><ol><li><strong>准备阶段：</strong> <code>viewWillLayoutSubviews</code></li><li><strong>布局阶段：</strong> 系统自动布局子视图。</li><li><strong>完成阶段：</strong> <code>viewDidLayoutSubviews</code></li></ol><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><p>假设你有一个自定义的视图，其中包含一个标签和一个按钮。你希望在设备旋转时，标签和按钮的位置能够自动调整。你可以在 <code>viewWillLayoutSubviews</code> 中计算新的位置，然后在 <code>viewDidLayoutSubviews</code> 中更新标签和按钮的 frame。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewWillLayoutSubviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewWillLayoutSubviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算新的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newLabelFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newButtonFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 保存新的位置，以便在 viewDidLayoutSubviews 中使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    labelFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newLabelFrame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    buttonFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newButtonFrame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLayoutSubviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLayoutSubviews</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更新标签和按钮的 frame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> labelFrame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    button.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buttonFrame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>不要在这两个方法中进行耗时的操作，因为这会影响 UI 的性能。</li><li>确保调用 <code>super</code> 方法，以便让父类也能执行相应的操作。</li><li>理解这两个方法的调用时机，以便在正确的时间进行布局调整。</li></ul><p>希望这些解释能够帮助你更好地理解 <code>viewWillLayoutSubviews</code> 和 <code>viewDidLayoutSubviews</code> 这两个方法！🎉 记住，实践是最好的老师，多尝试，多练习，你一定能掌握它们！💪</p>`,16)]))}const o=i(e,[["render",t]]);export{E as __pageData,o as default};
