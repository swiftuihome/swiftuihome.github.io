import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"2.4_嵌套 withAnimation 代码块","description":"","frontmatter":{},"headers":[],"relativePath":"animation/2.4_嵌套 withAnimation 代码块.md","filePath":"animation/2.4_嵌套 withAnimation 代码块.md"}'),l={name:"animation/2.4_嵌套 withAnimation 代码块.md"};function h(p,s,e,k,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_2-4-嵌套-withanimation-代码块" tabindex="-1">2.4_嵌套 withAnimation 代码块 <a class="header-anchor" href="#_2-4-嵌套-withanimation-代码块" aria-label="Permalink to &quot;2.4_嵌套 withAnimation 代码块&quot;">​</a></h1><h2 id="嵌套-withanimation-代码块" tabindex="-1">嵌套 <code>withAnimation</code> 代码块 <a class="header-anchor" href="#嵌套-withanimation-代码块" aria-label="Permalink to &quot;嵌套 \`withAnimation\` 代码块&quot;">​</a></h2><p>嵌套 <code>withAnimation</code> 代码块允许你创建更复杂、更精细的动画效果。你可以将不同的动画效果组合在一起，或者为动画的不同阶段设置不同的动画参数。这就像给你的动画添加了更多层次，让它们更加生动有趣！🎉</p><h2 id="理解嵌套动画的工作方式" tabindex="-1">理解嵌套动画的工作方式 <a class="header-anchor" href="#理解嵌套动画的工作方式" aria-label="Permalink to &quot;理解嵌套动画的工作方式&quot;">​</a></h2><p>当你在一个 <code>withAnimation</code> 代码块中嵌套另一个 <code>withAnimation</code> 代码块时，内部的动画会覆盖外部的动画设置。这意味着内部代码块中定义的动画曲线和时长将应用于该代码块中的状态变化。这为你提供了极大的灵活性，可以精确控制动画的每个部分。</p><p>例如，你可以先使用一个较慢的动画来改变视图的位置，然后在位置改变完成后，使用一个较快的动画来改变视图的颜色。🎨 这种分层控制让动画效果更加丰富。</p><h2 id="实际应用示例" tabindex="-1">实际应用示例 <a class="header-anchor" href="#实际应用示例" aria-label="Permalink to &quot;实际应用示例&quot;">​</a></h2><p>假设你想要创建一个动画，让一个视图先放大，然后旋转。你可以使用嵌套的 <code>withAnimation</code> 代码块来实现这个效果：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scale: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scale)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotationEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">degrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rotation))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onTapGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                        withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">linear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            rotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 360</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在这个例子中，点击矩形会先以 <code>easeInOut</code> 动画放大到 1.5 倍，然后以 <code>linear</code> 动画旋转 360 度。🚀 这种嵌套结构使得动画效果更加流畅自然。</p><h2 id="注意事项与最佳实践" tabindex="-1">注意事项与最佳实践 <a class="header-anchor" href="#注意事项与最佳实践" aria-label="Permalink to &quot;注意事项与最佳实践&quot;">​</a></h2><ul><li><strong>避免过度嵌套</strong>：虽然嵌套 <code>withAnimation</code> 代码块很强大，但过度嵌套可能会导致代码难以理解和维护。尽量保持代码简洁明了。</li><li><strong>明确动画目标</strong>：在编写嵌套动画时，确保你清楚每个动画代码块的目标，以及它们之间的关系。</li><li><strong>测试与调整</strong>：动画效果往往需要多次测试和调整才能达到最佳效果。不断尝试不同的动画参数，找到最适合你的动画效果。</li></ul><p>通过合理使用嵌套 <code>withAnimation</code> 代码块，你可以创建出令人惊艳的 SwiftUI 动画效果。记住，实践是最好的老师！💪 祝你动画之旅愉快！</p>`,13)]))}const c=i(l,[["render",h]]);export{o as __pageData,c as default};
