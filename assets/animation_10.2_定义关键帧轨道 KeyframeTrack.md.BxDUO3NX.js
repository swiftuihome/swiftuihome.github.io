import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"10.2_定义关键帧轨道 KeyframeTrack","description":"","frontmatter":{},"headers":[],"relativePath":"animation/10.2_定义关键帧轨道 KeyframeTrack.md","filePath":"animation/10.2_定义关键帧轨道 KeyframeTrack.md"}'),l={name:"animation/10.2_定义关键帧轨道 KeyframeTrack.md"};function k(h,s,t,p,r,E){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_10-2-定义关键帧轨道-keyframetrack" tabindex="-1">10.2_定义关键帧轨道 KeyframeTrack <a class="header-anchor" href="#_10-2-定义关键帧轨道-keyframetrack" aria-label="Permalink to &quot;10.2_定义关键帧轨道 KeyframeTrack&quot;">​</a></h1><h2 id="关键帧轨道-keyframetrack-详解-🚀" tabindex="-1">关键帧轨道 KeyframeTrack 详解 🚀 <a class="header-anchor" href="#关键帧轨道-keyframetrack-详解-🚀" aria-label="Permalink to &quot;关键帧轨道 KeyframeTrack 详解 🚀&quot;">​</a></h2><p>在 SwiftUI 动画中，<code>KeyframeTrack</code> 扮演着至关重要的角色。它就像动画的蓝图，定义了属性在不同时间点的变化。你可以把它想象成一条时间线，上面标注了动画的关键帧。通过 <code>KeyframeTrack</code>，你可以精确控制动画的每一个细节，创造出令人惊艳的视觉效果。</p><h2 id="创建-keyframetrack-🛠️" tabindex="-1">创建 KeyframeTrack 🛠️ <a class="header-anchor" href="#创建-keyframetrack-🛠️" aria-label="Permalink to &quot;创建 KeyframeTrack 🛠️&quot;">​</a></h2><p>要创建一个 <code>KeyframeTrack</code>，你需要指定要动画化的属性类型。例如，如果你想动画化一个视图的 <code>scale</code> 属性，你可以创建一个 <code>KeyframeTrack&lt;CGFloat&gt;</code>。然后，你可以使用 <code>LinearKeyframe</code>、<code>SpringKeyframe</code> 或 <code>CubicKeyframe</code> 等方法向轨道添加关键帧。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KeyframeTrack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CGFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的代码创建了一个 <code>KeyframeTrack</code>，它将 <code>scale</code> 属性从 1.0 线性变化到 2.0，然后在 0.5 秒时回到 1.0。</p><h2 id="关键帧类型-🖼️" tabindex="-1">关键帧类型 🖼️ <a class="header-anchor" href="#关键帧类型-🖼️" aria-label="Permalink to &quot;关键帧类型 🖼️&quot;">​</a></h2><p>SwiftUI 提供了多种关键帧类型，每种类型都有不同的动画效果。</p><ul><li><strong>LinearKeyframe</strong>: 提供线性动画，属性值以恒定速率变化。</li><li><strong>SpringKeyframe</strong>: 模拟弹簧效果，属性值在目标值附近振荡。</li><li><strong>CubicKeyframe</strong>: 使用三次贝塞尔曲线定义动画，提供更平滑、更自然的动画效果。</li></ul><p>选择哪种关键帧类型取决于你想要达到的动画效果。例如，如果你想要一个平滑的动画，可以使用 <code>CubicKeyframe</code>。如果你想要一个弹簧效果，可以使用 <code>SpringKeyframe</code>。</p><h2 id="应用-keyframetrack-🎬" tabindex="-1">应用 KeyframeTrack 🎬 <a class="header-anchor" href="#应用-keyframetrack-🎬" aria-label="Permalink to &quot;应用 KeyframeTrack 🎬&quot;">​</a></h2><p>创建好 <code>KeyframeTrack</code> 后，你需要将其应用到视图的属性上。你可以使用 <code>keyframeAnimator</code> 修饰符来实现这一点。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.red)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyframeAnimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initialValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isAnimating) { view, value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyframes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        KeyframeTrack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CGFloat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个例子中，<code>keyframeAnimator</code> 修饰符将 <code>KeyframeTrack</code> 应用到 <code>Rectangle</code> 的 <code>scaleEffect</code> 属性上。当 <code>isAnimating</code> 为 <code>true</code> 时，动画将开始播放。</p><h2 id="更多技巧和提示-✨" tabindex="-1">更多技巧和提示 ✨ <a class="header-anchor" href="#更多技巧和提示-✨" aria-label="Permalink to &quot;更多技巧和提示 ✨&quot;">​</a></h2><ul><li>你可以使用多个 <code>KeyframeTrack</code> 来同时动画化多个属性。</li><li>你可以使用 <code>delay</code> 参数来延迟动画的开始时间。</li><li>你可以使用 <code>repeatCount</code> 参数来指定动画的重复次数。</li><li>你可以使用 <code>autoreverses</code> 参数来使动画在结束时反向播放。</li></ul><p>掌握 <code>KeyframeTrack</code> 的使用，你就能创造出各种各样令人惊艳的 SwiftUI 动画。 祝你动画之旅愉快！🎉</p>`,18)]))}const y=i(l,[["render",k]]);export{c as __pageData,y as default};
