import{_ as t,c as o,o as a,ag as l}from"./chunks/framework.ymCRTBvy.js";const S=JSON.parse('{"title":"区分何时使用let与@State","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/2.4_区分何时使用`let`与`@State`.md","filePath":"refactor/2.4_区分何时使用`let`与`@State`.md"}'),c={name:"refactor/2.4_区分何时使用`let`与`@State`.md"};function d(r,e,i,n,s,_){return a(),o("div",null,e[0]||(e[0]=[l('<h1 id="区分何时使用let与-state" tabindex="-1">区分何时使用<code>let</code>与<code>@State</code> <a class="header-anchor" href="#区分何时使用let与-state" aria-label="Permalink to &quot;区分何时使用`let`与`@State`&quot;">​</a></h1><h2 id="理解数据流的基础" tabindex="-1">理解数据流的基础 <a class="header-anchor" href="#理解数据流的基础" aria-label="Permalink to &quot;理解数据流的基础&quot;">​</a></h2><p>在 SwiftUI 中，管理视图的数据是构建动态用户界面的核心。你可能会遇到 <code>let</code> 和 <code>@State</code> 这两种属性声明方式。它们各自扮演着独特的角色，理解它们的区别至关重要。正确选择可以显著提升你的代码质量和应用性能。🚀</p><h2 id="let-常量的力量" tabindex="-1"><code>let</code> 常量的力量 <a class="header-anchor" href="#let-常量的力量" aria-label="Permalink to &quot;`let` 常量的力量&quot;">​</a></h2><p>当你使用 <code>let</code> 声明一个属性时，你是在告诉 SwiftUI 这个值是不可变的。这意味着一旦它被初始化，就不能再被修改。</p><ul><li><strong>不可变性</strong>: <code>let</code> 属性非常适合那些在视图生命周期中保持不变的数据。例如，一个用户头像的 URL 或者一个商品的名称。</li><li><strong>性能优势</strong>: 由于 <code>let</code> 属性不会改变，SwiftUI 可以对其进行优化，从而提高渲染效率。</li><li><strong>清晰意图</strong>: 使用 <code>let</code> 明确表达了数据的只读性质，让你的代码更易于理解和维护。</li></ul><blockquote><p>“在 SwiftUI 开发中，大约 70% 的数据传递场景可以通过 <code>let</code> 常量高效处理，因为它强调了数据的稳定性。”</p></blockquote><h2 id="state-的动态魔力" tabindex="-1"><code>@State</code> 的动态魔力 <a class="header-anchor" href="#state-的动态魔力" aria-label="Permalink to &quot;`@State` 的动态魔力&quot;">​</a></h2><p>与 <code>let</code> 不同，<code>@State</code> 属性是可变的。它允许你在视图内部管理状态，并在状态改变时自动触发视图的重新渲染。</p><ul><li><strong>内部状态</strong>: <code>@State</code> 专为视图的私有、内部状态而设计。比如，一个开关的开启/关闭状态，或者一个计数器的当前值。</li><li><strong>视图更新</strong>: 当 <code>@State</code> 变量的值发生变化时，SwiftUI 会自动检测到并重新渲染依赖该状态的视图部分。这使得构建交互式 UI 变得轻而易举。✨</li><li><strong>所有权</strong>: <code>@State</code> 属性由视图本身“拥有”。这意味着它的生命周期与视图的生命周期紧密相连。</li></ul><h2 id="何时选择哪一个" tabindex="-1">何时选择哪一个？ <a class="header-anchor" href="#何时选择哪一个" aria-label="Permalink to &quot;何时选择哪一个？&quot;">​</a></h2><p>选择 <code>let</code> 还是 <code>@State</code> 取决于数据的性质和用途。</p><ul><li><p><strong>使用 <code>let</code></strong>:</p><ul><li>当数据从父视图传递下来，并且在子视图中不需要被修改时。</li><li>当数据是静态的，不会在视图的生命周期内改变时。</li><li>例如，显示一个用户资料卡片，其中的用户名和头像通常是 <code>let</code>。</li></ul></li><li><p><strong>使用 <code>@State</code></strong>:</p><ul><li>当数据是视图内部的，并且会随着用户交互而改变时。</li><li>当你需要一个变量来控制 UI 的显示状态时，比如一个模态视图的显示/隐藏。</li><li>例如，一个点赞按钮的计数器，或者一个文本输入框的内容。</li></ul></li></ul><blockquote><p>记住，<code>@State</code> 适用于视图的“私有”数据，而 <code>let</code> 则用于接收外部传入的“公共”数据。掌握这个区别，你就能构建出更健壮、更高效的 SwiftUI 应用！🥳</p></blockquote>',14)]))}const h=t(c,[["render",d]]);export{S as __pageData,h as default};
