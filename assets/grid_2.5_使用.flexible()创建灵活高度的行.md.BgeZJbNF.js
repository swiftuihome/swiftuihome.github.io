import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"使用.flexible()创建灵活高度的行","description":"","frontmatter":{},"headers":[],"relativePath":"grid/2.5_使用.flexible()创建灵活高度的行.md","filePath":"grid/2.5_使用.flexible()创建灵活高度的行.md"}'),e={name:"grid/2.5_使用.flexible()创建灵活高度的行.md"};function p(t,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="使用-flexible-创建灵活高度的行" tabindex="-1">使用.flexible()创建灵活高度的行 <a class="header-anchor" href="#使用-flexible-创建灵活高度的行" aria-label="Permalink to &quot;使用.flexible()创建灵活高度的行&quot;">​</a></h1><blockquote><p>在SwiftUI中，使用<code>.flexible()</code>可以创建灵活高度的行，这使得你的网格布局更加动态和适应不同内容的需求。灵活的行高度可以根据内容的大小自动调整，从而提供更好的用户体验。</p></blockquote><h2 id="灵活高度的基本概念" tabindex="-1">灵活高度的基本概念 <a class="header-anchor" href="#灵活高度的基本概念" aria-label="Permalink to &quot;灵活高度的基本概念&quot;">​</a></h2><p>灵活高度的行允许你在网格中放置不同高度的内容，而不需要为每一行设置固定的高度。这种方式特别适合于内容高度不一致的情况，比如文本、图片或其他视图。</p><ul><li><strong>优点</strong>： <ul><li>自动适应内容高度</li><li>提高布局的灵活性</li><li>适合多种内容类型</li></ul></li></ul><h2 id="如何实现灵活高度的行" tabindex="-1">如何实现灵活高度的行 <a class="header-anchor" href="#如何实现灵活高度的行" aria-label="Permalink to &quot;如何实现灵活高度的行&quot;">​</a></h2><p>要实现灵活高度的行，你需要在定义<code>GridItem</code>时使用<code>.flexible()</code>。以下是一个简单的示例代码：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gridItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    GridItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flexible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    GridItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flexible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    GridItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flexible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个示例中，我们创建了三个灵活的列。每一列的高度会根据其内容自动调整。</p><h2 id="示例应用" tabindex="-1">示例应用 <a class="header-anchor" href="#示例应用" aria-label="Permalink to &quot;示例应用&quot;">​</a></h2><p>假设你正在构建一个展示产品的网格布局，每个产品的描述和图片高度可能不同。使用灵活高度的行可以确保每个产品的展示效果最佳。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LazyHGrid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gridItems, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alignment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .top) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(products) { product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product.imageName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaledToFit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个示例中，<code>LazyHGrid</code>使用了灵活的行，确保每个产品的展示都能根据内容的高度进行调整。</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li><strong>性能</strong>：使用灵活高度的行可能会影响性能，尤其是在大量数据时。确保测试你的布局以获得最佳性能。</li><li><strong>内容适配</strong>：确保你的内容能够适应灵活的高度，避免出现过大的空白区域。</li></ul><p>通过使用<code>.flexible()</code>，你可以创建出更加灵活和动态的网格布局，提升用户体验。💪✨</p>`,16)]))}const o=i(e,[["render",p]]);export{c as __pageData,o as default};
