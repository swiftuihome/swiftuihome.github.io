import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"10.1_使用UIStackView进行线性布局","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/10.1_使用UIStackView进行线性布局.md","filePath":"swift/uikit/basics/10.1_使用UIStackView进行线性布局.md"}'),l={name:"swift/uikit/basics/10.1_使用UIStackView进行线性布局.md"};function e(k,s,h,p,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_10-1-使用uistackview进行线性布局" tabindex="-1">10.1_使用UIStackView进行线性布局 <a class="header-anchor" href="#_10-1-使用uistackview进行线性布局" aria-label="Permalink to &quot;10.1_使用UIStackView进行线性布局&quot;">​</a></h1><blockquote><p>UIStackView 是一个强大的容器视图，可以帮助你轻松地创建线性布局。它简化了自动布局的过程，让你能够快速地组织和管理界面元素。使用 UIStackView，你可以创建水平或垂直的视图堆叠，并控制它们之间的间距和对齐方式。🎉</p></blockquote><h2 id="什么是-uistackview" tabindex="-1">什么是 UIStackView？ <a class="header-anchor" href="#什么是-uistackview" aria-label="Permalink to &quot;什么是 UIStackView？&quot;">​</a></h2><p>UIStackView 本质上是一个非可视化的视图，它管理着一组子视图的布局。你可以将多个 UI 元素（例如按钮、标签、图像视图等）添加到 UIStackView 中，然后 UIStackView 会自动处理这些元素的排列和尺寸调整。这大大减少了手动设置约束的工作量。</p><ul><li><strong>线性布局</strong>: UIStackView 按照水平或垂直方向排列子视图。</li><li><strong>自动布局</strong>: UIStackView 自动管理子视图的尺寸和位置，无需手动设置复杂的约束。</li><li><strong>动态调整</strong>: 当子视图的内容或尺寸发生变化时，UIStackView 会自动调整布局。</li></ul><h2 id="创建-uistackview" tabindex="-1">创建 UIStackView <a class="header-anchor" href="#创建-uistackview" aria-label="Permalink to &quot;创建 UIStackView&quot;">​</a></h2><p>你可以通过代码创建 UIStackView。首先，你需要创建一个 <code>UIStackView</code> 的实例，并设置它的 <code>axis</code> 属性来指定布局方向（水平或垂直）。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stackView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIStackView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.axis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .horizontal </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者 .vertical</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 禁用自动转换</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来，你需要将子视图添加到 UIStackView 中。你可以使用 <code>addArrangedSubview(_:)</code> 方法来添加子视图。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArrangedSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArrangedSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="设置约束" tabindex="-1">设置约束 <a class="header-anchor" href="#设置约束" aria-label="Permalink to &quot;设置约束&quot;">​</a></h2><p>虽然 UIStackView 简化了子视图的布局，但你仍然需要设置 UIStackView 本身的约束，以确定它在父视图中的位置和尺寸。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stackView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stackView.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.topAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stackView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.leadingAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stackView.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.trailingAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="uistackview-的优势" tabindex="-1">UIStackView 的优势 <a class="header-anchor" href="#uistackview-的优势" aria-label="Permalink to &quot;UIStackView 的优势&quot;">​</a></h2><p>使用 UIStackView 有很多好处，包括：</p><ol><li><strong>简化布局</strong>: 减少了手动设置约束的工作量。</li><li><strong>动态调整</strong>: 自动适应子视图的变化。</li><li><strong>易于维护</strong>: 代码更简洁，易于理解和修改。</li><li><strong>响应式设计</strong>: 更好地适应不同的屏幕尺寸和方向。📱</li></ol><h2 id="示例-创建一个简单的水平布局" tabindex="-1">示例：创建一个简单的水平布局 <a class="header-anchor" href="#示例-创建一个简单的水平布局" aria-label="Permalink to &quot;示例：创建一个简单的水平布局&quot;">​</a></h2><p>让我们创建一个包含两个按钮的水平 UIStackView。</p><ol><li>创建两个 <code>UIButton</code> 实例，并设置它们的标题和背景颜色。</li><li>创建一个 <code>UIStackView</code> 实例，并设置 <code>axis</code> 属性为 <code>.horizontal</code>。</li><li>将两个按钮添加到 UIStackView 中。</li><li>将 UIStackView 添加到父视图中，并设置约束。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button1.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .blue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button2.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .red</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stackView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIStackView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.axis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .horizontal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.distribution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .fillEqually </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 均匀分布</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.spacing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 设置间距</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArrangedSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArrangedSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stackView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stackView.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.topAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stackView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.leadingAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stackView.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.trailingAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stackView.heightAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>通过这个例子，你可以看到 UIStackView 如何简化了水平布局的创建。你可以根据需要调整 <code>distribution</code> 和 <code>spacing</code> 属性，以实现不同的布局效果。👍</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>UIStackView 是一个非常有用的工具，可以帮助你轻松地创建线性布局。通过掌握 UIStackView 的基本用法，你可以大大提高你的 iOS 开发效率。记住，多尝试不同的属性和配置，你会发现更多 UIStackView 的强大之处！🚀</p>`,23)]))}const g=i(l,[["render",e]]);export{c as __pageData,g as default};
