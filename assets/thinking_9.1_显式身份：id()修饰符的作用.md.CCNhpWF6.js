import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"显式身份：id() 修饰符的作用","description":"","frontmatter":{},"headers":[],"relativePath":"thinking/9.1_显式身份：id()修饰符的作用.md","filePath":"thinking/9.1_显式身份：id()修饰符的作用.md"}'),l={name:"thinking/9.1_显式身份：id()修饰符的作用.md"};function p(t,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="显式身份-id-修饰符的作用" tabindex="-1">显式身份：<code>id()</code> 修饰符的作用 <a class="header-anchor" href="#显式身份-id-修饰符的作用" aria-label="Permalink to &quot;显式身份：\`id()\` 修饰符的作用&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，<code>id()</code> 修饰符允许你为视图显式地指定一个身份标识符。这对于 SwiftUI 区分视图，尤其是在动态列表中，至关重要。如果没有显式身份，SwiftUI 可能会错误地重用视图，导致动画和状态管理出现问题。</p></blockquote><h2 id="id-修饰符的基础使用-🤩" tabindex="-1"><code>id()</code> 修饰符的基础使用 🤩 <a class="header-anchor" href="#id-修饰符的基础使用-🤩" aria-label="Permalink to &quot;\`id()\` 修饰符的基础使用 🤩&quot;">​</a></h2><p><code>id()</code> 修饰符接受一个符合 <code>Hashable</code> 协议的值作为参数。这意味着你可以使用字符串、整数、枚举等作为视图的身份标识。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个例子中，<code>id</code> 属性被用作 <code>Text</code> 视图的身份标识。确保 <code>id</code> 在视图的生命周期内保持唯一，以避免潜在的问题。</p><h2 id="为什么需要显式身份-🤔" tabindex="-1">为什么需要显式身份？🤔 <a class="header-anchor" href="#为什么需要显式身份-🤔" aria-label="Permalink to &quot;为什么需要显式身份？🤔&quot;">​</a></h2><p>SwiftUI 使用一种称为“差异比较”（diffing）的算法来确定哪些视图需要更新。如果没有显式身份，SwiftUI 可能会依赖视图在视图层级中的位置来判断视图是否相同。这在静态视图中可能有效，但在动态列表中，当数据发生变化时，可能会导致问题。</p><p>例如，考虑一个包含可删除项的列表。当删除一个项时，SwiftUI 可能会错误地认为剩余的视图只是移动了位置，而不是被替换了。这会导致动画不正确，或者状态丢失。使用 <code>id()</code> 修饰符可以确保 SwiftUI 正确地识别视图，并执行正确的更新。</p><h2 id="id-修饰符的实际应用-🚀" tabindex="-1"><code>id()</code> 修饰符的实际应用 🚀 <a class="header-anchor" href="#id-修饰符的实际应用-🚀" aria-label="Permalink to &quot;\`id()\` 修饰符的实际应用 🚀&quot;">​</a></h2><p>以下是一些使用 <code>id()</code> 修饰符的常见场景：</p><ol><li><strong>动态列表</strong>：在 <code>ForEach</code> 循环中，使用数据模型的唯一标识符作为视图的 <code>id</code>。</li><li><strong>可排序列表</strong>：当列表中的项可以重新排序时，使用 <code>id()</code> 修饰符可以确保 SwiftUI 正确地跟踪视图的身份。</li><li><strong>动画和过渡</strong>：在视图的出现和消失过程中，使用 <code>id()</code> 修饰符可以创建更流畅的动画效果。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Identifiable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyListView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Item 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Item 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Item 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items) { item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在这个例子中，<code>Item</code> 结构体符合 <code>Identifiable</code> 协议，并使用 <code>UUID</code> 作为其唯一标识符。<code>ForEach</code> 循环使用 <code>item.id</code> 作为每个 <code>Text</code> 视图的 <code>id</code>。</p><h2 id="总结-🎉" tabindex="-1">总结 🎉 <a class="header-anchor" href="#总结-🎉" aria-label="Permalink to &quot;总结 🎉&quot;">​</a></h2><p><code>id()</code> 修饰符是 SwiftUI 中一个强大的工具，可以帮助你更好地控制视图的身份。通过显式地指定视图的身份，你可以避免潜在的问题，并创建更流畅、更可靠的用户界面。记住，在动态列表中，始终使用 <code>id()</code> 修饰符来确保 SwiftUI 正确地识别视图。</p>`,16)]))}const o=i(l,[["render",p]]);export{c as __pageData,o as default};
