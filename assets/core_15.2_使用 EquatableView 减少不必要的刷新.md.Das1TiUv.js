import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"使用 EquatableView 减少不必要的刷新","description":"","frontmatter":{},"headers":[],"relativePath":"core/15.2_使用 EquatableView 减少不必要的刷新.md","filePath":"core/15.2_使用 EquatableView 减少不必要的刷新.md"}'),l={name:"core/15.2_使用 EquatableView 减少不必要的刷新.md"};function t(h,s,p,r,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="使用-equatableview-减少不必要的刷新" tabindex="-1">使用 EquatableView 减少不必要的刷新 <a class="header-anchor" href="#使用-equatableview-减少不必要的刷新" aria-label="Permalink to &quot;使用 EquatableView 减少不必要的刷新&quot;">​</a></h1><h2 id="提升-swiftui-性能-equatableview-的妙用-✨" tabindex="-1">提升 SwiftUI 性能：EquatableView 的妙用 ✨ <a class="header-anchor" href="#提升-swiftui-性能-equatableview-的妙用-✨" aria-label="Permalink to &quot;提升 SwiftUI 性能：EquatableView 的妙用 ✨&quot;">​</a></h2><p>在 SwiftUI 开发中，视图的频繁刷新可能会导致性能问题。<code>EquatableView</code> 正是解决这一问题的利器！它能让你精确控制视图的刷新时机，避免不必要的渲染，从而优化应用性能。让我们一起深入了解如何使用 <code>EquatableView</code> 吧！</p><h2 id="认识-equatableview" tabindex="-1">认识 EquatableView <a class="header-anchor" href="#认识-equatableview" aria-label="Permalink to &quot;认识 EquatableView&quot;">​</a></h2><p><code>EquatableView</code> 本质上是一个结构体，它包装了你的 SwiftUI 视图，并遵循 <code>Equatable</code> 协议。这意味着你可以自定义视图的相等性判断逻辑。只有当 <code>EquatableView</code> 包装的视图的属性发生变化，且这些变化影响了视图的相等性时，才会触发视图的刷新。</p><ul><li><strong>减少不必要的刷新</strong>: 避免无意义的渲染，提升性能。</li><li><strong>自定义相等性判断</strong>: 精确控制刷新时机。</li><li><strong>代码简洁</strong>: 使用方便，易于集成。</li></ul><h2 id="如何使用-equatableview" tabindex="-1">如何使用 EquatableView <a class="header-anchor" href="#如何使用-equatableview" aria-label="Permalink to &quot;如何使用 EquatableView&quot;">​</a></h2><p>使用 <code>EquatableView</code> 非常简单。首先，你需要让你的视图遵循 <code>Equatable</code> 协议。然后，将你的视图包装在 <code>EquatableView</code> 中即可。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Equatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(data)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: MyView, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: MyView) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lhs.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EquatableView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个例子中，只有当 <code>data</code> 属性发生变化时，<code>MyView</code> 才会刷新。如果 <code>data</code> 没有变化，即使父视图刷新，<code>MyView</code> 也不会重新渲染。</p><h2 id="equatableview-的优势与应用场景-🚀" tabindex="-1">EquatableView 的优势与应用场景 🚀 <a class="header-anchor" href="#equatableview-的优势与应用场景-🚀" aria-label="Permalink to &quot;EquatableView 的优势与应用场景 🚀&quot;">​</a></h2><p><code>EquatableView</code> 在以下场景中尤其有用：</p><ol><li><strong>复杂视图</strong>: 对于包含大量子视图或计算密集型操作的视图，减少不必要的刷新可以显著提升性能。</li><li><strong>列表视图</strong>: 在 <code>List</code> 或 <code>ForEach</code> 中，使用 <code>EquatableView</code> 可以避免滚动时频繁刷新未改变的单元格。</li><li><strong>动画</strong>: 在动画过程中，只有当视图的属性发生变化时才进行渲染，可以使动画更加流畅。</li></ol><ul><li><strong>提升滚动性能</strong>: 避免列表视图卡顿。</li><li><strong>优化动画效果</strong>: 使动画更加流畅自然。</li><li><strong>减少 CPU 占用</strong>: 降低设备功耗，延长电池续航。</li></ul><p>通过使用 <code>EquatableView</code>，你可以更加精细地控制 SwiftUI 视图的刷新行为，从而打造更流畅、更高效的应用。快去尝试一下吧！🎉</p>`,15)]))}const c=a(l,[["render",t]]);export{o as __pageData,c as default};
