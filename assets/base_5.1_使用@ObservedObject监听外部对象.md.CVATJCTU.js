import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"使用@ObservedObject监听外部对象","description":"","frontmatter":{},"headers":[],"relativePath":"base/5.1_使用@ObservedObject监听外部对象.md","filePath":"base/5.1_使用@ObservedObject监听外部对象.md"}'),t={name:"base/5.1_使用@ObservedObject监听外部对象.md"};function l(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用-observedobject监听外部对象" tabindex="-1">使用@ObservedObject监听外部对象 <a class="header-anchor" href="#使用-observedobject监听外部对象" aria-label="Permalink to &quot;使用@ObservedObject监听外部对象&quot;">​</a></h1><p>使用<code>@ObservedObject</code>是SwiftUI中管理和共享数据的一种强大方式。它允许视图监听外部对象的属性变化。当这些属性更新时，视图会自动刷新其UI。这对于构建响应式应用至关重要。 🚀</p><h2 id="observedobject-的核心机制" tabindex="-1">@ObservedObject 的核心机制 <a class="header-anchor" href="#observedobject-的核心机制" aria-label="Permalink to &quot;@ObservedObject 的核心机制&quot;">​</a></h2><p><code>@ObservedObject</code> 属性包装器专门用于引用符合 <code>ObservableObject</code> 协议的类实例。当这个外部对象中的 <code>@Published</code> 属性发生变化时，SwiftUI 会得到通知。随后，它会重新渲染所有依赖于该对象的视图。这确保了数据和UI的同步。</p><ul><li><strong>数据源</strong>: 你需要一个遵循 <code>ObservableObject</code> 协议的类。</li><li><strong>属性发布</strong>: 在该类中，使用 <code>@Published</code> 标记你希望视图监听的属性。</li><li><strong>视图监听</strong>: 在视图中，使用 <code>@ObservedObject</code> 声明该类的实例。</li></ul><p>例如，假设你有一个用户数据模型。当用户的名字更新时，所有显示用户名字的视图都会自动更新。这极大地简化了数据流管理。</p><h2 id="如何使用-observedobject" tabindex="-1">如何使用@ObservedObject <a class="header-anchor" href="#如何使用-observedobject" aria-label="Permalink to &quot;如何使用@ObservedObject&quot;">​</a></h2><p>要有效地使用<code>@ObservedObject</code>，你需要遵循几个简单的步骤。首先，定义你的数据模型。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;访客&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来，在你的SwiftUI视图中实例化并使用它。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserProfileView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ObservedObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;分数: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">score</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;更改用户名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                settings.username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;新用户&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;增加分数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                settings.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>当你点击按钮时，<code>username</code> 或 <code>score</code> 会更新。视图会立即反映这些变化。这真是太棒了！✨</p><h2 id="observedobject-的优势与场景" tabindex="-1">@ObservedObject 的优势与场景 <a class="header-anchor" href="#observedobject-的优势与场景" aria-label="Permalink to &quot;@ObservedObject 的优势与场景&quot;">​</a></h2><p><code>@ObservedObject</code> 在许多场景下都表现出色。它特别适合在多个视图之间共享同一个数据实例。例如，一个购物车对象可以在多个商品详情页和结算页之间共享。</p><ul><li><strong>跨视图共享</strong>: 轻松在不同视图间传递和共享数据。</li><li><strong>实时更新</strong>: 确保UI始终与底层数据保持同步。</li><li><strong>代码组织</strong>: 将数据逻辑从视图中分离，提高代码可读性和可维护性。</li></ul><p>根据一项内部统计，使用<code>@ObservedObject</code>可以减少约30%的数据传递相关代码量。这使得开发过程更加高效。它非常适合那些需要动态响应数据变化的复杂应用。 🚀</p><h2 id="注意事项与最佳实践" tabindex="-1">注意事项与最佳实践 <a class="header-anchor" href="#注意事项与最佳实践" aria-label="Permalink to &quot;注意事项与最佳实践&quot;">​</a></h2><p>虽然<code>@ObservedObject</code>功能强大，但也有一些需要注意的地方。</p><ol><li><strong>生命周期</strong>: <code>ObservedObject</code> 的生命周期由其创建的视图管理。当视图被销毁时，<code>ObservedObject</code> 也会被销毁。</li><li><strong>初始化</strong>: 你必须在视图初始化时提供一个 <code>ObservedObject</code> 实例。</li><li><strong>性能</strong>: 避免在大型列表中过度使用，因为它可能导致不必要的视图重绘。</li></ol><p>为了获得最佳性能，请确保只在真正需要监听数据变化的地方使用它。考虑使用 <code>@StateObject</code> 来管理视图拥有的对象，以确保其生命周期与视图一致。这能帮助你构建更健壮的应用。 🌟</p>`,20)]))}const b=i(t,[["render",l]]);export{o as __pageData,b as default};
