import{_ as i,c as t,o as a,ag as s}from"./chunks/framework.ymCRTBvy.js";const u=JSON.parse('{"title":"初始化Swift包项目","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/14.1_初始化Swift包项目.md","filePath":"custom_views/14.1_初始化Swift包项目.md"}'),o={name:"custom_views/14.1_初始化Swift包项目.md"};function l(n,e,d,r,c,p){return a(),t("div",null,e[0]||(e[0]=[s('<h1 id="初始化swift包项目" tabindex="-1">初始化Swift包项目 <a class="header-anchor" href="#初始化swift包项目" aria-label="Permalink to &quot;初始化Swift包项目&quot;">​</a></h1><p>准备好创建你自己的 SwiftUI 组件库了吗？太棒了！第一步就是初始化一个 Swift 包项目。这就像为你的代码搭建一个坚实的地基，让一切井井有条。别担心，过程非常简单，跟着我一步步来，你会发现它比你想象的还要容易！🎉</p><h2 id="使用-xcode-创建-swift-包" tabindex="-1">使用 Xcode 创建 Swift 包 <a class="header-anchor" href="#使用-xcode-创建-swift-包" aria-label="Permalink to &quot;使用 Xcode 创建 Swift 包&quot;">​</a></h2><p>Xcode 是你的好帮手！打开 Xcode，选择 &quot;File&quot; -&gt; &quot;New&quot; -&gt; &quot;Package...&quot;。你会看到一个对话框，让你填写一些基本信息。</p><ul><li><strong>Product Name:</strong> 给你的包起一个响亮的名字，比如 &quot;MyAwesomeComponents&quot;。</li><li><strong>Organization Identifier:</strong> 填写你的组织标识符，通常是反向域名格式，例如 &quot;com.example&quot;。</li><li><strong>Platforms:</strong> 选择你想要支持的平台，比如 iOS 和 macOS。</li></ul><p>点击 &quot;Create&quot;，Xcode 就会为你创建一个新的 Swift 包项目。是不是很简单？😎</p><h2 id="使用命令行创建-swift-包" tabindex="-1">使用命令行创建 Swift 包 <a class="header-anchor" href="#使用命令行创建-swift-包" aria-label="Permalink to &quot;使用命令行创建 Swift 包&quot;">​</a></h2><p>如果你更喜欢命令行，也没问题！打开终端，导航到你想要创建项目的目录，然后输入以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> library</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会创建一个基本的 Swift 包结构，包含 <code>Sources</code> 目录（存放你的代码）和 <code>Package.swift</code> 文件（描述你的包）。</p><h2 id="swift-包的目录结构" tabindex="-1">Swift 包的目录结构 <a class="header-anchor" href="#swift-包的目录结构" aria-label="Permalink to &quot;Swift 包的目录结构&quot;">​</a></h2><p>无论你使用 Xcode 还是命令行，最终都会得到一个类似的目录结构：</p><ul><li><code>Sources/</code>: 存放你的 Swift 代码。 <ul><li><code>MyAwesomeComponents/</code>: 你的组件代码通常放在以包名命名的子目录中。</li></ul></li><li><code>Tests/</code>: 存放你的单元测试代码。 <ul><li><code>MyAwesomeComponentsTests/</code>: 你的测试代码通常放在以包名命名的子目录中。</li></ul></li><li><code>Package.swift</code>: 描述你的包的配置文件。</li></ul><h2 id="验证项目创建成功" tabindex="-1">验证项目创建成功 <a class="header-anchor" href="#验证项目创建成功" aria-label="Permalink to &quot;验证项目创建成功&quot;">​</a></h2><p>创建项目后，你可以尝试编译它来验证是否一切正常。在 Xcode 中，点击 &quot;Product&quot; -&gt; &quot;Build&quot;。在命令行中，输入以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果编译成功，恭喜你！🎉 你已经成功初始化了一个 Swift 包项目。现在，你可以开始编写你的组件代码了！记住，好的开始是成功的一半！💪</p>',17)]))}const f=i(o,[["render",l]]);export{u as __pageData,f as default};
