import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"@StateObject：管理引用类型对象的生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"thinking/4.3_@StateObject：管理引用类型对象的生命周期.md","filePath":"thinking/4.3_@StateObject：管理引用类型对象的生命周期.md"}'),n={name:"thinking/4.3_@StateObject：管理引用类型对象的生命周期.md"};function l(h,s,p,k,r,c){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="stateobject-管理引用类型对象的生命周期" tabindex="-1">@StateObject：管理引用类型对象的生命周期 <a class="header-anchor" href="#stateobject-管理引用类型对象的生命周期" aria-label="Permalink to &quot;@StateObject：管理引用类型对象的生命周期&quot;">​</a></h1><blockquote><p><code>@StateObject</code> 是 SwiftUI 中一个非常强大的属性包装器，它专门用于管理引用类型（如类）的生命周期。当你需要在视图中创建并持有复杂的数据模型时，<code>@StateObject</code> 是你的首选。它确保了对象在视图生命周期内只被创建一次，并且在视图销毁时自动释放。🚀</p></blockquote><h2 id="为什么选择-stateobject" tabindex="-1">为什么选择 @StateObject？ <a class="header-anchor" href="#为什么选择-stateobject" aria-label="Permalink to &quot;为什么选择 @StateObject？&quot;">​</a></h2><p>使用 <code>@StateObject</code> 可以有效避免视图重绘时重复创建对象的问题。想象一下，如果你的数据模型每次视图更新都被重新初始化，那将是多么低效！<code>@StateObject</code> 解决了这个痛点，保证了数据的一致性和性能。它就像一个忠实的管家，精心照料着你的数据对象。</p><ul><li><strong>生命周期管理</strong>：<code>@StateObject</code> 确保了引用类型对象与视图的生命周期同步。</li><li><strong>性能优化</strong>：避免了不必要的对象重复创建，显著提升应用性能。</li><li><strong>数据持久性</strong>：即使视图被销毁并重建，对象状态也能保持不变。</li></ul><h2 id="如何使用-stateobject" tabindex="-1">如何使用 @StateObject <a class="header-anchor" href="#如何使用-stateobject" aria-label="Permalink to &quot;如何使用 @StateObject&quot;">​</a></h2><p>使用 <code>@StateObject</code> 非常直观。你只需要在你的视图中声明一个属性，并用 <code>@StateObject</code> 进行标记，然后初始化你的引用类型对象。这个对象必须遵循 <code>ObservableObject</code> 协议，并且其属性需要用 <code>@Published</code> 标记，以便 SwiftUI 能够监听其变化。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;分数: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">score</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;增加分数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                settings.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="stateobject-的核心优势" tabindex="-1">@StateObject 的核心优势 <a class="header-anchor" href="#stateobject-的核心优势" aria-label="Permalink to &quot;@StateObject 的核心优势&quot;">​</a></h2><p><code>@StateObject</code> 的核心优势在于它能够为引用类型对象提供稳定的存储。这意味着无论视图经历多少次更新或重绘，被 <code>@StateObject</code> 包装的对象实例始终是同一个。这对于管理用户会话、网络请求状态或任何需要长期存在的数据模型至关重要。</p><ul><li><strong>单例模式的视图级实现</strong>：在特定视图层级内，确保数据模型的唯一性。</li><li><strong>响应式更新</strong>：当 <code>ObservableObject</code> 中的 <code>@Published</code> 属性发生变化时，SwiftUI 会自动更新依赖这些数据的视图。</li><li><strong>简化复杂状态</strong>：将复杂的业务逻辑封装在 <code>ObservableObject</code> 中，使视图代码更简洁。</li></ul><h2 id="与其他属性包装器的区别" tabindex="-1">与其他属性包装器的区别 <a class="header-anchor" href="#与其他属性包装器的区别" aria-label="Permalink to &quot;与其他属性包装器的区别&quot;">​</a></h2><p>与 <code>@ObservedObject</code> 不同，<code>@StateObject</code> 负责创建和管理对象的生命周期。<code>@ObservedObject</code> 适用于从外部传入的对象，它不负责对象的创建。而 <code>@StateObject</code> 则是在视图内部创建并持有对象，确保其在视图生命周期内的唯一性。这使得 <code>@StateObject</code> 成为管理视图私有复杂状态的理想选择。✨ 掌握 <code>@StateObject</code>，你就能更灵活地构建高性能的 SwiftUI 应用！</p>`,13)]))}const E=i(n,[["render",l]]);export{o as __pageData,E as default};
