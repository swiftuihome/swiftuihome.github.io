import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.ymCRTBvy.js";const g=JSON.parse('{"title":"13.3_自定义TabBarItem的标题和图标","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/13.3_自定义TabBarItem的标题和图标.md","filePath":"swift/uikit/basics/13.3_自定义TabBarItem的标题和图标.md"}'),n={name:"swift/uikit/basics/13.3_自定义TabBarItem的标题和图标.md"};function l(h,s,k,p,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_13-3-自定义tabbaritem的标题和图标" tabindex="-1">13.3_自定义TabBarItem的标题和图标 <a class="header-anchor" href="#_13-3-自定义tabbaritem的标题和图标" aria-label="Permalink to &quot;13.3_自定义TabBarItem的标题和图标&quot;">​</a></h1><h2 id="定制tabbaritem的标题" tabindex="-1">定制TabBarItem的标题 <a class="header-anchor" href="#定制tabbaritem的标题" aria-label="Permalink to &quot;定制TabBarItem的标题&quot;">​</a></h2><p>在iOS开发中，<code>UITabBarController</code>是构建多功能应用的核心组件。每个标签页都由一个<code>UITabBarItem</code>代表，它承载着标题和图标。自定义这些元素是提升用户体验的关键一步。你可以通过设置<code>UITabBarItem</code>的<code>title</code>属性来轻松更改标题。例如，为你的“首页”标签设置一个清晰的标题，让用户一眼就能明白其功能。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> homeVC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">homeVC.tabBarItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UITabBarItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;首页&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selectedImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这个简单的代码片段展示了如何为<code>homeVC</code>（一个视图控制器）的<code>tabBarItem</code>设置标题。记住，一个直观的标题能显著提高应用的可发现性。</p><h2 id="设置tabbaritem的图标" tabindex="-1">设置TabBarItem的图标 <a class="header-anchor" href="#设置tabbaritem的图标" aria-label="Permalink to &quot;设置TabBarItem的图标&quot;">​</a></h2><p>图标是<code>UITabBarItem</code>的另一个重要视觉元素，它能快速传达标签页的用途。你可以通过<code>image</code>和<code>selectedImage</code>属性来设置图标。<code>image</code>用于未选中状态，而<code>selectedImage</code>则在标签被选中时显示。这提供了极大的灵活性，让你能够为用户提供视觉反馈。</p><ul><li><strong>未选中图标</strong>: 使用<code>UIImage(named: &quot;unselectedIcon&quot;)</code>加载你的默认图标。</li><li><strong>选中图标</strong>: 使用<code>UIImage(named: &quot;selectedIcon&quot;)</code>加载你的高亮图标。</li></ul><p>确保你的图标文件已添加到Xcode项目中，并且名称正确无误。高质量的图标设计能让你的应用看起来更专业、更吸引人。</p><h2 id="调整图标的渲染模式" tabindex="-1">调整图标的渲染模式 <a class="header-anchor" href="#调整图标的渲染模式" aria-label="Permalink to &quot;调整图标的渲染模式&quot;">​</a></h2><p>默认情况下，iOS可能会对你的图标进行渲染，使其适应系统样式。然而，你可能希望保留图标的原始颜色和细节。这时，<code>renderingMode</code>属性就派上用场了。将图标的<code>renderingMode</code>设置为<code>.alwaysOriginal</code>，可以确保图标以其原始颜色显示，不受系统着色影响。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myIcon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withRenderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.alwaysOriginal)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedOriginalImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mySelectedIcon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withRenderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.alwaysOriginal)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">homeVC.tabBarItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UITabBarItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;设置&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: originalImage, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selectedImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: selectedOriginalImage)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个技巧对于那些需要精确控制图标外观的设计师和开发者来说非常有用。它确保了你的品牌视觉一致性。🎨</p><h2 id="批量设置tabbaritem属性" tabindex="-1">批量设置TabBarItem属性 <a class="header-anchor" href="#批量设置tabbaritem属性" aria-label="Permalink to &quot;批量设置TabBarItem属性&quot;">​</a></h2><p>如果你有多个标签页，逐一设置它们的标题和图标可能会显得繁琐。幸运的是，你可以通过一个数组来管理所有的视图控制器，并循环设置它们的<code>tabBarItem</code>属性。这种方法不仅提高了效率，还使代码更易于维护。</p><ol><li>创建一个视图控制器数组。</li><li>遍历数组，为每个视图控制器配置<code>tabBarItem</code>。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vc1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vc1.tabBarItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UITabBarItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;首页&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;house&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selectedImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;house.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vc2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vc2.tabBarItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UITabBarItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我的&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selectedImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UIImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tabBarController.viewControllers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [vc1, vc2]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这种批量处理的方式，在实际开发中非常常见，尤其是在应用拥有5个或更多标签页时。它能让你在短时间内完成大量配置工作。🚀</p><h2 id="优化用户体验的细节" tabindex="-1">优化用户体验的细节 <a class="header-anchor" href="#优化用户体验的细节" aria-label="Permalink to &quot;优化用户体验的细节&quot;">​</a></h2><p>自定义<code>TabBarItem</code>不仅仅是设置标题和图标那么简单，它还涉及到用户体验的细微之处。例如，选择易于识别的图标，使用简洁明了的标题，以及确保选中和未选中状态的视觉差异足够明显。研究表明，清晰的导航可以提高用户满意度高达30%！</p><ul><li><strong>图标尺寸</strong>: 确保图标尺寸适中，既不过大也不过小。</li><li><strong>标题长度</strong>: 标题应简短，最好不超过5个字符。</li><li><strong>颜色对比</strong>: 选中和未选中状态的颜色应有足够的对比度。</li></ul><p>通过关注这些细节，你将能够创建一个既美观又实用的标签栏，让用户爱不释手。记住，每一个小小的优化都能带来巨大的用户体验提升！✨</p>`,22)]))}const o=i(n,[["render",l]]);export{g as __pageData,o as default};
