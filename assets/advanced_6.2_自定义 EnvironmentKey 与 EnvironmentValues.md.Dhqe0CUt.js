import{_ as i,c as n,o as a,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"自定义 EnvironmentKey 与 EnvironmentValues","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/6.2_自定义 EnvironmentKey 与 EnvironmentValues.md","filePath":"advanced/6.2_自定义 EnvironmentKey 与 EnvironmentValues.md"}'),t={name:"advanced/6.2_自定义 EnvironmentKey 与 EnvironmentValues.md"};function l(p,s,h,r,k,d){return a(),n("div",null,s[0]||(s[0]=[e(`<h1 id="自定义-environmentkey-与-environmentvalues" tabindex="-1">自定义 EnvironmentKey 与 EnvironmentValues <a class="header-anchor" href="#自定义-environmentkey-与-environmentvalues" aria-label="Permalink to &quot;自定义 EnvironmentKey 与 EnvironmentValues&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，环境（Environment）提供了一种强大的方式来在视图层级结构中共享数据。你可以通过自定义 <code>EnvironmentKey</code> 和 <code>EnvironmentValues</code> 来扩展 SwiftUI 的环境系统，从而注入你自己的数据类型和值。这使得在整个应用中传递和访问自定义配置或服务变得非常方便。🎉</p></blockquote><h2 id="自定义-environmentkey" tabindex="-1">自定义 EnvironmentKey <a class="header-anchor" href="#自定义-environmentkey" aria-label="Permalink to &quot;自定义 EnvironmentKey&quot;">​</a></h2><p>首先，你需要创建一个遵循 <code>EnvironmentKey</code> 协议的结构体。这个结构体定义了你的自定义环境值的键。<code>defaultValue</code> 属性是必需的，它指定了当环境中没有提供特定值时使用的默认值。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomValueKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnvironmentKey </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;默认值&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个例子中，我们创建了一个名为 <code>MyCustomValueKey</code> 的结构体，它将存储一个 <code>String</code> 类型的值。如果视图没有显式地设置这个值，那么默认值 <code>&quot;默认值&quot;</code> 将会被使用。</p><h2 id="扩展-environmentvalues" tabindex="-1">扩展 EnvironmentValues <a class="header-anchor" href="#扩展-environmentvalues" aria-label="Permalink to &quot;扩展 EnvironmentValues&quot;">​</a></h2><p>接下来，你需要扩展 <code>EnvironmentValues</code> 结构体，添加一个计算属性来访问你的自定义环境值。这个计算属性使用你定义的 <code>EnvironmentKey</code> 来读取和设置环境中的值。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnvironmentValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MyCustomValueKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MyCustomValueKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>现在，你可以在任何视图中使用 <code>@Environment</code> 属性包装器来访问和使用 <code>myCustomValue</code>。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.myCustomValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义值: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(myValue)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用自定义-environmentvalue" tabindex="-1">使用自定义 EnvironmentValue <a class="header-anchor" href="#使用自定义-environmentvalue" aria-label="Permalink to &quot;使用自定义 EnvironmentValue&quot;">​</a></h2><p>要设置自定义环境值，你可以使用 <code>.environment(_:_:)</code> 修饰符。这允许你在视图层级结构的特定部分覆盖默认值。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.myCustomValue, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;新的自定义值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这个例子中，<code>MyView</code> 及其所有子视图将会使用 <code>&quot;新的自定义值&quot;</code>，而不是默认值 <code>&quot;默认值&quot;</code>。这提供了一种灵活的方式来配置你的视图，而无需显式地传递数据。</p><p>通过自定义 <code>EnvironmentKey</code> 和 <code>EnvironmentValues</code>，你可以创建强大的、类型安全的方式来管理和共享应用中的配置和服务。这不仅提高了代码的可读性和可维护性，还使得在不同的环境（例如，测试环境和生产环境）中运行应用变得更加容易。🚀</p><p>总而言之，自定义环境值是 SwiftUI 中一个非常强大的工具，可以帮助你构建更加灵活和可配置的应用。记住，合理地使用环境可以大大简化你的代码，并提高应用的可维护性。👍</p>`,17)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
