import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"Sheet和Popover呈现时视图的生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/12.2_Sheet和Popover呈现时视图的生命周期.md","filePath":"lifecycle/12.2_Sheet和Popover呈现时视图的生命周期.md"}'),p={name:"lifecycle/12.2_Sheet和Popover呈现时视图的生命周期.md"};function l(t,s,h,k,r,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="sheet和popover呈现时视图的生命周期" tabindex="-1">Sheet和Popover呈现时视图的生命周期 <a class="header-anchor" href="#sheet和popover呈现时视图的生命周期" aria-label="Permalink to &quot;Sheet和Popover呈现时视图的生命周期&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，<code>Sheet</code> 和 <code>Popover</code> 提供了模态呈现视图的方式。理解它们呈现时视图的生命周期至关重要，这样你才能更好地管理状态和执行必要的设置或清理工作。让我们一起深入了解吧！🚀</p></blockquote><h2 id="sheet-和-popover-的呈现" tabindex="-1">Sheet 和 Popover 的呈现 <a class="header-anchor" href="#sheet-和-popover-的呈现" aria-label="Permalink to &quot;Sheet 和 Popover 的呈现&quot;">​</a></h2><p>当一个 <code>Sheet</code> 或 <code>Popover</code> 被呈现时，被呈现的视图会经历一个生命周期。这个生命周期与视图在 <code>NavigationStack</code> 中的生命周期有些相似，但也有其独特的特点。你可以把 <code>Sheet</code> 和 <code>Popover</code> 看作是临时的、覆盖在当前视图之上的图层。</p><ul><li><code>Sheet</code> 通常从屏幕底部滑入。</li><li><code>Popover</code> 则更灵活，可以从指定的位置弹出。</li></ul><h2 id="onappear-和-ondisappear-的作用" tabindex="-1"><code>onAppear</code> 和 <code>onDisappear</code> 的作用 <a class="header-anchor" href="#onappear-和-ondisappear-的作用" aria-label="Permalink to &quot;\`onAppear\` 和 \`onDisappear\` 的作用&quot;">​</a></h2><p><code>onAppear</code> 和 <code>onDisappear</code> 是 SwiftUI 中用于监听视图生命周期的关键修饰符。当 <code>Sheet</code> 或 <code>Popover</code> 呈现时，其内部视图的 <code>onAppear</code> 会被调用；当 <code>Sheet</code> 或 <code>Popover</code> 关闭时，<code>onDisappear</code> 会被调用。</p><ul><li><strong><code>onAppear</code></strong>: 视图出现时执行，适合进行初始化或数据加载。</li><li><strong><code>onDisappear</code></strong>: 视图消失时执行，适合进行资源释放或状态保存。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sheet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isPresented</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $isPresented) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sheet 出现了！🎉&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onDisappear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sheet 消失了！👋&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="管理状态和副作用" tabindex="-1">管理状态和副作用 <a class="header-anchor" href="#管理状态和副作用" aria-label="Permalink to &quot;管理状态和副作用&quot;">​</a></h2><p>在 <code>Sheet</code> 和 <code>Popover</code> 的生命周期中，合理管理状态和副作用非常重要。例如，你可能需要在 <code>Sheet</code> 出现时启动一个计时器，并在其消失时停止计时器。</p><ol><li>使用 <code>@State</code> 或 <code>@ObservedObject</code> 来管理 <code>Sheet</code> 内部的状态。</li><li>在 <code>onAppear</code> 中启动任务，在 <code>onDisappear</code> 中取消任务。</li><li>确保正确处理内存泄漏，避免不必要的资源占用。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer: Timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Sheet!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Timer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scheduledTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withTimeInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;计时器运行中...⏰&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onDisappear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;计时器已停止！🛑&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ul><li>尽量保持 <code>Sheet</code> 和 <code>Popover</code> 的内容简洁，避免复杂的逻辑。</li><li>使用 <code>Environment</code> 来传递数据，避免过度依赖绑定。</li><li>测试 <code>Sheet</code> 和 <code>Popover</code> 的呈现和关闭流程，确保没有内存泄漏或状态错误。</li></ul><p>理解 <code>Sheet</code> 和 <code>Popover</code> 的生命周期，可以帮助你编写更健壮、更高效的 SwiftUI 应用。希望这些信息对你有所帮助！😊</p>`,16)]))}const c=i(p,[["render",l]]);export{E as __pageData,c as default};
