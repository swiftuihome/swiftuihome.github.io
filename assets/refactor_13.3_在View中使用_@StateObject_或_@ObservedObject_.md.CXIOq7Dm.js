import{_ as e,c as a,o as i,ag as n}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"在View中使用@StateObject或@ObservedObject","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/13.3_在View中使用`@StateObject`或`@ObservedObject`.md","filePath":"refactor/13.3_在View中使用`@StateObject`或`@ObservedObject`.md"}'),t={name:"refactor/13.3_在View中使用`@StateObject`或`@ObservedObject`.md"};function l(p,s,r,h,d,c){return i(),a("div",null,s[0]||(s[0]=[n(`<h1 id="在view中使用-stateobject或-observedobject" tabindex="-1">在View中使用<code>@StateObject</code>或<code>@ObservedObject</code> <a class="header-anchor" href="#在view中使用-stateobject或-observedobject" aria-label="Permalink to &quot;在View中使用\`@StateObject\`或\`@ObservedObject\`&quot;">​</a></h1><h2 id="掌握状态管理的关键" tabindex="-1">掌握状态管理的关键 <a class="header-anchor" href="#掌握状态管理的关键" aria-label="Permalink to &quot;掌握状态管理的关键&quot;">​</a></h2><p>在SwiftUI中，有效地管理视图状态至关重要。 <code>@StateObject</code> 和 <code>@ObservedObject</code> 是你工具箱中不可或缺的利器。 它们让你能够将复杂的状态逻辑从视图中剥离，实现更清晰、更可维护的代码。 🚀</p><h2 id="stateobject-的强大之处" tabindex="-1"><code>@StateObject</code> 的强大之处 <a class="header-anchor" href="#stateobject-的强大之处" aria-label="Permalink to &quot;\`@StateObject\` 的强大之处&quot;">​</a></h2><p>当你需要在视图的生命周期内拥有一个持久化的引用类型实例时，<code>@StateObject</code> 是你的首选。 它会在视图首次出现时创建并持有你的 <code>ObservableObject</code> 实例。 即使视图被重新创建，这个实例也会保持不变。</p><p>例如，一个复杂的表单视图可能需要一个 <code>FormViewModel</code> 来管理所有输入字段的状态和验证逻辑。 使用 <code>@StateObject</code> 确保这个 <code>ViewModel</code> 在整个表单的生命周期中都存在。 这样，你就能轻松地处理用户输入，而无需担心状态丢失。 📈</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFormView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> FormViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            TextField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $viewModel.username)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ... 其他表单元素</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;提交&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                viewModel.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">submitForm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="observedobject-的灵活运用" tabindex="-1"><code>@ObservedObject</code> 的灵活运用 <a class="header-anchor" href="#observedobject-的灵活运用" aria-label="Permalink to &quot;\`@ObservedObject\` 的灵活运用&quot;">​</a></h2><p>与 <code>@StateObject</code> 不同，<code>@ObservedObject</code> 适用于当你的 <code>ObservableObject</code> 实例是从外部传入时。 它不会创建新的实例，而是观察一个已存在的实例。 这在父视图创建并管理 <code>ViewModel</code>，然后将其传递给子视图时非常有用。</p><p>想象一下，你有一个用户列表视图，每个用户项都是一个独立的子视图。 每个用户项可能需要一个 <code>UserItemViewModel</code> 来处理该用户的特定交互。 父视图可以创建这些 <code>ViewModel</code> 并将它们传递给子视图。 🤝</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserItemView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ObservedObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewModel: UserItemViewModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(viewModel.userName)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ... 其他用户详情</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="选择合适的属性包装器" tabindex="-1">选择合适的属性包装器 <a class="header-anchor" href="#选择合适的属性包装器" aria-label="Permalink to &quot;选择合适的属性包装器&quot;">​</a></h2><p>选择 <code>@StateObject</code> 还是 <code>@ObservedObject</code> 取决于你的 <code>ObservableObject</code> 实例的生命周期和所有权。</p><ul><li><strong><code>@StateObject</code></strong>: 当视图拥有并负责创建 <code>ObservableObject</code> 实例时使用。 它保证了实例的唯一性和持久性。 🎯</li><li><strong><code>@ObservedObject</code></strong>: 当视图接收一个由外部创建和管理的 <code>ObservableObject</code> 实例时使用。 它允许你观察外部状态的变化。 🔄</li></ul><p>正确使用这两个属性包装器，能够显著提升你的SwiftUI应用的可维护性和可扩展性。 它们是构建健壮、响应式用户界面的基石。 记住，清晰的状态管理是成功应用的关键！ 🌟</p>`,15)]))}const b=e(t,[["render",l]]);export{o as __pageData,b as default};
