import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"@ObservedObject：观察外部引用类型对象","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/7.2_@ObservedObject：观察外部引用类型对象.md","filePath":"lifecycle/7.2_@ObservedObject：观察外部引用类型对象.md"}'),l={name:"lifecycle/7.2_@ObservedObject：观察外部引用类型对象.md"};function t(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="observedobject-观察外部引用类型对象" tabindex="-1">@ObservedObject：观察外部引用类型对象 <a class="header-anchor" href="#observedobject-观察外部引用类型对象" aria-label="Permalink to &quot;@ObservedObject：观察外部引用类型对象&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，<code>@ObservedObject</code> 让你能够观察外部引用类型对象的变化，并自动更新视图。这对于处理复杂的数据模型非常有用。你可以把 <code>@ObservedObject</code> 看作是一个观察者，它时刻关注着你的数据，一旦数据发生变化，它就会立即通知 SwiftUI 更新视图。是不是很棒？🎉</p></blockquote><h2 id="核心概念与使用方法" tabindex="-1">核心概念与使用方法 <a class="header-anchor" href="#核心概念与使用方法" aria-label="Permalink to &quot;核心概念与使用方法&quot;">​</a></h2><p><code>@ObservedObject</code> 主要用于观察符合 <code>ObservableObject</code> 协议的类实例。这意味着你的类需要遵循 <code>ObservableObject</code> 协议，并且使用 <code>@Published</code> 属性包装器来标记你希望 SwiftUI 观察的属性。当这些被 <code>@Published</code> 标记的属性发生变化时，<code>ObservableObject</code> 会自动发送通知，<code>@ObservedObject</code> 就会接收到这些通知，并触发视图的更新。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ObservedObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(userData.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;年龄：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(userData.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;修改姓名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                userData.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小红&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个例子中，<code>UserData</code> 类遵循了 <code>ObservableObject</code> 协议，并且 <code>name</code> 和 <code>age</code> 属性都使用了 <code>@Published</code> 包装器。当点击按钮修改 <code>name</code> 的值时，视图会自动更新，显示新的姓名。</p><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>@ObservedObject</code> 在很多场景下都非常有用。例如：</p><ol><li><strong>管理应用数据</strong>：你可以使用 <code>@ObservedObject</code> 来管理应用中的用户数据、配置信息等。</li><li><strong>处理网络请求</strong>：你可以创建一个 <code>ObservableObject</code> 类型的类来处理网络请求，并在请求完成后更新视图。</li><li><strong>实现复杂的用户界面</strong>：你可以使用 <code>@ObservedObject</code> 来管理复杂的用户界面状态，例如表单数据、动画状态等。</li></ol><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>确保你的类遵循 <code>ObservableObject</code> 协议。</li><li>使用 <code>@Published</code> 标记你希望 SwiftUI 观察的属性。</li><li><code>@ObservedObject</code> 只能用于观察引用类型对象。</li><li>避免在 <code>ObservableObject</code> 中进行耗时操作，以免影响性能。</li></ul><h2 id="优势与价值" tabindex="-1">优势与价值 <a class="header-anchor" href="#优势与价值" aria-label="Permalink to &quot;优势与价值&quot;">​</a></h2><p>使用 <code>@ObservedObject</code> 的优势在于：</p><ol><li><strong>简化状态管理</strong>：它能够自动处理状态的更新和视图的刷新，减少了手动管理状态的复杂性。</li><li><strong>提高代码可维护性</strong>：通过将状态逻辑封装在 <code>ObservableObject</code> 中，可以使代码更加模块化和易于维护。</li><li><strong>实现响应式编程</strong>：它能够实现响应式编程，当数据发生变化时，视图会自动更新，无需手动干预。</li></ol><p>总而言之，<code>@ObservedObject</code> 是 SwiftUI 中一个非常强大的工具，可以帮助你更好地管理应用状态，并构建更加灵活和响应式的用户界面。希望你能掌握它，并在你的 SwiftUI 项目中发挥它的价值！🚀</p>`,15)]))}const b=i(l,[["render",t]]);export{o as __pageData,b as default};
