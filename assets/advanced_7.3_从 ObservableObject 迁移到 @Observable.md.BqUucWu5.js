import{_ as a,c as e,o as i,ag as n}from"./chunks/framework.Bw-5EFTY.js";const d=JSON.parse('{"title":"从 ObservableObject 迁移到 @Observable","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/7.3_从 ObservableObject 迁移到 @Observable.md","filePath":"advanced/7.3_从 ObservableObject 迁移到 @Observable.md"}'),l={name:"advanced/7.3_从 ObservableObject 迁移到 @Observable.md"};function t(r,s,p,b,h,o){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="从-observableobject-迁移到-observable" tabindex="-1">从 ObservableObject 迁移到 @Observable <a class="header-anchor" href="#从-observableobject-迁移到-observable" aria-label="Permalink to &quot;从 ObservableObject 迁移到 @Observable&quot;">​</a></h1><blockquote><p>从 <code>ObservableObject</code> 迁移到 <code>@Observable</code>，你会发现这是一个非常棒的简化过程！🚀 让我们一起看看如何操作，让你的代码更简洁、更高效。</p></blockquote><h2 id="拥抱-observable-宏" tabindex="-1">拥抱 <code>@Observable</code> 宏 <a class="header-anchor" href="#拥抱-observable-宏" aria-label="Permalink to &quot;拥抱 \`@Observable\` 宏&quot;">​</a></h2><p><code>@Observable</code> 宏是 Swift 5.9 引入的 Observation 框架的核心。它能自动追踪属性变化，无需手动 <code>objectWillChange.send()</code>。这不仅减少了样板代码，还降低了出错的概率。🎉</p><ul><li><strong>简化声明：</strong> 将 <code>ObservableObject</code> 协议替换为 <code>@Observable</code> 宏。</li><li><strong>移除 <code>objectWillChange</code>：</strong> 不再需要手动发送通知，框架会自动处理。</li></ul><h2 id="迁移步骤详解" tabindex="-1">迁移步骤详解 <a class="header-anchor" href="#迁移步骤详解" aria-label="Permalink to &quot;迁移步骤详解&quot;">​</a></h2><p>迁移过程非常简单，只需几个步骤即可完成。</p><ol><li><strong>移除 <code>ObservableObject</code> 协议：</strong> 从你的类定义中删除 <code>ObservableObject</code> 协议。</li><li><strong>添加 <code>@Observable</code> 宏：</strong> 在类定义前加上 <code>@Observable</code>。</li><li><strong>删除 <code>objectWillChange.send()</code>：</strong> 移除所有手动发送的通知。</li></ol><p>例如，以下代码展示了如何将一个 <code>ObservableObject</code> 类迁移到使用 <code>@Observable</code> 宏：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之前的代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        willSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            objectWillChange.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 迁移后的代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Observable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="迁移的优势" tabindex="-1">迁移的优势 <a class="header-anchor" href="#迁移的优势" aria-label="Permalink to &quot;迁移的优势&quot;">​</a></h2><p>使用 <code>@Observable</code> 宏，你会发现代码变得更加简洁易懂。</p><ul><li><strong>减少代码量：</strong> 移除 <code>objectWillChange</code> 相关代码，减少了冗余。</li><li><strong>提高可读性：</strong> 代码逻辑更清晰，易于维护。</li><li><strong>性能优化：</strong> Observation 框架的自动追踪机制更加高效。</li></ul><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>虽然迁移过程简单，但仍需注意一些细节。</p><ul><li><strong>确保使用 Swift 5.9+：</strong> <code>@Observable</code> 宏是 Swift 5.9 引入的，确保你的项目使用该版本或更高版本。</li><li><strong>测试：</strong> 迁移后进行充分测试，确保所有功能正常运行。</li></ul><p>通过以上步骤，你可以轻松地将 <code>ObservableObject</code> 迁移到 <code>@Observable</code>，享受更简洁、高效的 SwiftUI 开发体验！👍</p>`,17)]))}const k=a(l,[["render",t]]);export{d as __pageData,k as default};
