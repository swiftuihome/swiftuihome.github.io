import{_ as s,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"13.4_结合 TimelineView 和 Canvas 实现复杂动画","description":"","frontmatter":{},"headers":[],"relativePath":"animation/13.4_结合 TimelineView 和 Canvas 实现复杂动画.md","filePath":"animation/13.4_结合 TimelineView 和 Canvas 实现复杂动画.md"}'),l={name:"animation/13.4_结合 TimelineView 和 Canvas 实现复杂动画.md"};function t(h,i,p,k,d,r){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_13-4-结合-timelineview-和-canvas-实现复杂动画" tabindex="-1">13.4_结合 TimelineView 和 Canvas 实现复杂动画 <a class="header-anchor" href="#_13-4-结合-timelineview-和-canvas-实现复杂动画" aria-label="Permalink to &quot;13.4_结合 TimelineView 和 Canvas 实现复杂动画&quot;">​</a></h1><h2 id="结合-timelineview-和-canvas-实现复杂动画" tabindex="-1">结合 TimelineView 和 Canvas 实现复杂动画 <a class="header-anchor" href="#结合-timelineview-和-canvas-实现复杂动画" aria-label="Permalink to &quot;结合 TimelineView 和 Canvas 实现复杂动画&quot;">​</a></h2><p>想不想让你的 SwiftUI 动画更上一层楼？🚀 结合 <code>TimelineView</code> 和 <code>Canvas</code>，你就能创造出令人惊叹的复杂动画效果！<code>TimelineView</code> 负责提供时间流，<code>Canvas</code> 负责绘制图形，两者结合，简直是动画界的黄金搭档！</p><h2 id="timelineview-的妙用" tabindex="-1">TimelineView 的妙用 <a class="header-anchor" href="#timelineview-的妙用" aria-label="Permalink to &quot;TimelineView 的妙用&quot;">​</a></h2><p><code>TimelineView</code> 就像一个动画引擎，它会按照你设定的时间间隔，不断地触发视图的更新。你可以使用不同的 <code>schedule</code> 来控制更新频率，例如 <code>.animation</code>、<code>.periodic</code> 等。</p><ul><li><code>.animation</code>: 依赖于系统的动画刷新率，通常是每秒 60 帧。</li><li><code>.periodic(from:by:)</code>: 允许你自定义更新的时间间隔。</li></ul><p>例如，你可以这样创建一个每秒更新一次的 <code>TimelineView</code>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .now, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { timeline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里绘制你的动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="canvas-的强大绘图能力" tabindex="-1">Canvas 的强大绘图能力 <a class="header-anchor" href="#canvas-的强大绘图能力" aria-label="Permalink to &quot;Canvas 的强大绘图能力&quot;">​</a></h2><p><code>Canvas</code> 提供了强大的绘图 API，你可以在其中绘制各种形状、图像和文本。它还支持使用 <code>context</code> 对象进行更高级的绘图操作，例如变换、裁剪和混合。</p><p>你可以使用 <code>Canvas</code> 绘制动态图形，例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context, size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里绘制你的图形</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="结合-timelineview-和-canvas" tabindex="-1">结合 TimelineView 和 Canvas <a class="header-anchor" href="#结合-timelineview-和-canvas" aria-label="Permalink to &quot;结合 TimelineView 和 Canvas&quot;">​</a></h2><p>现在，让我们把 <code>TimelineView</code> 和 <code>Canvas</code> 结合起来，创建一个简单的动画。例如，我们可以创建一个旋转的矩形：</p><ol><li>使用 <code>TimelineView</code> 提供时间流。</li><li>在 <code>Canvas</code> 中，根据当前时间计算旋转角度。</li><li>使用 <code>context.rotate(by:)</code> 方法旋转矩形。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.animation) { timeline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context, size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> angle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeline.date.timeIntervalSinceReferenceDate.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">truncatingRemainder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dividingBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: size.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: size.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: angle))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.red))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="进阶技巧" tabindex="-1">进阶技巧 <a class="header-anchor" href="#进阶技巧" aria-label="Permalink to &quot;进阶技巧&quot;">​</a></h2><ul><li><strong>使用 GeometryReader 获取视图大小</strong>: 确保你的动画能够适应不同的屏幕尺寸。</li><li><strong>利用 State 变量控制动画</strong>: 你可以使用 <code>@State</code> 变量来控制动画的属性，例如颜色、位置和大小。</li><li><strong>尝试不同的混合模式</strong>: <code>context.blendMode</code> 可以让你创造出各种有趣的视觉效果。</li></ul><p>通过结合 <code>TimelineView</code> 和 <code>Canvas</code>，你可以创造出无限可能的复杂动画。 尽情发挥你的想象力，打造出令人惊艳的 SwiftUI 动画吧！🎉</p>`,19)]))}const o=s(l,[["render",t]]);export{c as __pageData,o as default};
