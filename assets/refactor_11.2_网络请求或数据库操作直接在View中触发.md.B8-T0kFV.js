import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"网络请求或数据库操作直接在View中触发","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/11.2_网络请求或数据库操作直接在View中触发.md","filePath":"refactor/11.2_网络请求或数据库操作直接在View中触发.md"}'),e={name:"refactor/11.2_网络请求或数据库操作直接在View中触发.md"};function p(h,s,t,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="网络请求或数据库操作直接在view中触发" tabindex="-1">网络请求或数据库操作直接在View中触发 <a class="header-anchor" href="#网络请求或数据库操作直接在view中触发" aria-label="Permalink to &quot;网络请求或数据库操作直接在View中触发&quot;">​</a></h1><h2 id="为什么避免在视图中直接触发网络或数据库操作" tabindex="-1">为什么避免在视图中直接触发网络或数据库操作？ <a class="header-anchor" href="#为什么避免在视图中直接触发网络或数据库操作" aria-label="Permalink to &quot;为什么避免在视图中直接触发网络或数据库操作？&quot;">​</a></h2><p>将网络请求或数据库操作直接放在 SwiftUI 视图中，就像在客厅里炒菜一样，会带来很多混乱！ 😅 视图的职责是展示 UI，而不是管理数据。 当视图直接处理这些复杂操作时，它会变得臃肿且难以维护。</p><p>想象一下，你的视图需要加载用户数据。 如果你在 <code>onAppear</code> 中直接发起网络请求，那么这个视图就承担了数据获取的责任。 这不仅增加了视图的复杂性，也使得测试变得异常困难。</p><h2 id="视图与数据逻辑分离的优势" tabindex="-1">视图与数据逻辑分离的优势 <a class="header-anchor" href="#视图与数据逻辑分离的优势" aria-label="Permalink to &quot;视图与数据逻辑分离的优势&quot;">​</a></h2><p>将数据逻辑从视图中剥离出来，会带来巨大的好处。 你会发现代码变得更加清晰、更易于理解和维护。 🚀</p><ul><li><strong>职责单一原则：</strong> 视图只负责 UI 渲染，数据逻辑由专门的层处理。 这让你的代码结构更加清晰。</li><li><strong>可测试性：</strong> 将网络或数据库逻辑封装在独立的模型或服务中，你可以轻松地对它们进行单元测试，而无需渲染 UI。</li><li><strong>可重用性：</strong> 数据获取逻辑可以被多个视图共享，避免代码重复。 例如，一个 <code>UserService</code> 可以被多个显示用户信息的视图使用。</li></ul><h2 id="如何优雅地处理数据操作" tabindex="-1">如何优雅地处理数据操作？ <a class="header-anchor" href="#如何优雅地处理数据操作" aria-label="Permalink to &quot;如何优雅地处理数据操作？&quot;">​</a></h2><p>那么，我们应该如何处理网络请求和数据库操作呢？ 答案是：引入专门的数据层！ 💡</p><p>你可以使用以下几种模式：</p><ul><li><strong>ViewModel (视图模型):</strong> 这是 SwiftUI 中最常见的模式之一。 ViewModel 负责从数据源获取数据，并将其转换为视图可以直接使用的格式。 视图通过 <code>@ObservedObject</code> 或 <code>@StateObject</code> 观察 ViewModel。</li><li><strong>Service (服务层):</strong> 创建专门的服务类来处理网络请求或数据库操作。 例如，一个 <code>APIService</code> 负责所有的网络通信，而 <code>DatabaseService</code> 负责所有的本地数据存储。</li><li><strong>Repository (仓库模式):</strong> 仓库模式在服务层之上提供了一个抽象层，用于统一数据访问。 无论数据来自网络还是本地数据库，视图模型都通过仓库来获取数据。</li></ul><h2 id="实践中的例子" tabindex="-1">实践中的例子 <a class="header-anchor" href="#实践中的例子" aria-label="Permalink to &quot;实践中的例子&quot;">​</a></h2><p>假设你有一个显示文章列表的视图。 ❌ 错误的做法是：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArticleListView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> articles: [Article] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(articles) { article </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(article.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ❌ 直接在视图中发起网络请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            URLSession.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/articles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { data, response, error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 处理数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>✅ 正确的做法是：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArticleListViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> articles: [Article] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchArticles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ✅ 在 ViewModel 中处理网络请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        URLSession.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/articles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">weak</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] data, response, error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 处理数据并更新 self?.articles</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArticleListView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ArticleListViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(viewModel.articles) { article </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(article.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            viewModel.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fetchArticles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ 视图只负责触发 ViewModel 的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>通过这种方式，你的视图变得轻量且专注于 UI，而数据逻辑则被优雅地封装在 ViewModel 中。 🥳 这种分离让你的 SwiftUI 应用更健壮、更易于扩展！</p>`,17)]))}const g=i(e,[["render",p]]);export{c as __pageData,g as default};
