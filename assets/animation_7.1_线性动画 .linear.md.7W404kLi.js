import{_ as a,c as s,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"7.1_线性动画 .linear","description":"","frontmatter":{},"headers":[],"relativePath":"animation/7.1_线性动画 .linear.md","filePath":"animation/7.1_线性动画 .linear.md"}'),l={name:"animation/7.1_线性动画 .linear.md"};function t(r,i,h,p,o,k){return n(),s("div",null,i[0]||(i[0]=[e(`<h1 id="_7-1-线性动画-linear" tabindex="-1">7.1_线性动画 .linear <a class="header-anchor" href="#_7-1-线性动画-linear" aria-label="Permalink to &quot;7.1_线性动画 .linear&quot;">​</a></h1><h2 id="线性动画的魅力-✨" tabindex="-1">线性动画的魅力 ✨ <a class="header-anchor" href="#线性动画的魅力-✨" aria-label="Permalink to &quot;线性动画的魅力 ✨&quot;">​</a></h2><p>线性动画，顾名思义，就是动画在整个持续时间内以恒定的速度进行。这意味着从动画开始到结束，变化是均匀的，没有加速或减速。它就像一辆匀速行驶的汽车，始终保持相同的速度。</p><p>这种动画曲线非常适合需要平稳、可预测过渡的场景。例如，一个进度条从0%到100%的填充，或者一个视图从A点移动到B点，如果希望它以稳定的步伐移动，<code>.linear</code> 就是你的最佳选择。</p><h2 id="如何应用-linear-曲线-🚀" tabindex="-1">如何应用 .linear 曲线 🚀 <a class="header-anchor" href="#如何应用-linear-曲线-🚀" aria-label="Permalink to &quot;如何应用 .linear 曲线 🚀&quot;">​</a></h2><p>在 SwiftUI 中应用 <code>.linear</code> 动画曲线非常简单。你只需要在你的 <code>animation()</code> 修饰符中指定它。例如，如果你想让一个视图的透明度在2秒内线性变化，你可以这样写：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, SwiftUI!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isShowing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">linear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isShowing)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里，<code>duration</code> 参数定义了动画完成所需的时间。你可以根据你的需求调整这个值。</p><h2 id="线性动画的实际应用-💡" tabindex="-1">线性动画的实际应用 💡 <a class="header-anchor" href="#线性动画的实际应用-💡" aria-label="Permalink to &quot;线性动画的实际应用 💡&quot;">​</a></h2><p>线性动画在许多用户界面元素中都扮演着重要角色。</p><ul><li><strong>进度指示器</strong>: 当你上传文件或加载数据时，进度条通常会以线性方式填充，清晰地展示剩余时间。用户可以直观地感受到任务的进展。</li><li><strong>简单的位置移动</strong>: 如果一个图标需要从屏幕的一侧移动到另一侧，并且你希望它以稳定的速度划过，<code>.linear</code> 是一个理想的选择。</li><li><strong>透明度渐变</strong>: 当一个元素需要平滑地淡入或淡出时，线性动画可以提供一个非常自然的视觉效果。</li></ul><h2 id="为什么选择线性动画-🎯" tabindex="-1">为什么选择线性动画？ 🎯 <a class="header-anchor" href="#为什么选择线性动画-🎯" aria-label="Permalink to &quot;为什么选择线性动画？ 🎯&quot;">​</a></h2><p>选择线性动画通常是因为它提供了清晰和可预测的用户体验。它不会让用户感到意外，因为变化是如此的直接和一致。</p><ul><li><strong>可预测性</strong>: 用户可以很容易地预测动画的完成时间。</li><li><strong>简洁性</strong>: 线性动画没有复杂的加速或减速，使得动画效果非常直接。</li><li><strong>效率</strong>: 对于简单的过渡，线性动画通常是最有效的选择，因为它不需要复杂的计算来模拟速度变化。</li></ul><p>在某些情况下，你可能需要更复杂的动画效果，但对于许多基础的UI交互，<code>.linear</code> 曲线无疑是一个强大且可靠的工具。掌握它，你就能创建出许多流畅且专业的动画效果！👍</p>`,15)]))}const E=a(l,[["render",t]]);export{c as __pageData,E as default};
