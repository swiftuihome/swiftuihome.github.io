import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"5.3_使用 VectorArithmetic 协议","description":"","frontmatter":{},"headers":[],"relativePath":"animation/5.3_使用 VectorArithmetic 协议.md","filePath":"animation/5.3_使用 VectorArithmetic 协议.md"}'),t={name:"animation/5.3_使用 VectorArithmetic 协议.md"};function l(h,s,p,r,k,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_5-3-使用-vectorarithmetic-协议" tabindex="-1">5.3_使用 VectorArithmetic 协议 <a class="header-anchor" href="#_5-3-使用-vectorarithmetic-协议" aria-label="Permalink to &quot;5.3_使用 VectorArithmetic 协议&quot;">​</a></h1><h2 id="深入理解-vectorarithmetic-协议" tabindex="-1">深入理解 VectorArithmetic 协议 <a class="header-anchor" href="#深入理解-vectorarithmetic-协议" aria-label="Permalink to &quot;深入理解 VectorArithmetic 协议&quot;">​</a></h2><p>VectorArithmetic 协议是 SwiftUI 动画的核心，它定义了如何对值进行加减运算和标量乘法。 🚀 掌握它，你就能为任何自定义数据类型添加平滑的动画效果。</p><p>这个协议是 Animatable 协议的基础，因为 Animatable 协议要求其 <code>animatableData</code> 属性符合 VectorArithmetic。</p><h2 id="vectorarithmetic-的核心能力" tabindex="-1">VectorArithmetic 的核心能力 <a class="header-anchor" href="#vectorarithmetic-的核心能力" aria-label="Permalink to &quot;VectorArithmetic 的核心能力&quot;">​</a></h2><p>VectorArithmetic 协议提供了几个关键的静态方法和属性，它们是实现动画的关键。</p><ul><li><code>static var zero: Self</code>：表示该类型的零值。 想象一下，对于 <code>CGPoint</code>，零值就是 <code>CGPoint.zero</code>。</li><li><code>static func += (lhs: inout Self, rhs: Self)</code>：定义了两个值相加的规则。</li><li><code>static func -= (lhs: inout Self, rhs: Self)</code>：定义了两个值相减的规则。</li><li><code>mutating func scale(by rhs: Double)</code>：允许你按一个 <code>Double</code> 值缩放当前实例。</li></ul><p>这些操作共同构成了向量空间的基本运算，使得 SwiftUI 能够计算动画的中间状态。</p><h2 id="为自定义类型实现-vectorarithmetic" tabindex="-1">为自定义类型实现 VectorArithmetic <a class="header-anchor" href="#为自定义类型实现-vectorarithmetic" aria-label="Permalink to &quot;为自定义类型实现 VectorArithmetic&quot;">​</a></h2><p>当你需要动画化一个非标准类型时，比如一个自定义的 <code>struct</code>，你就需要让它遵循 VectorArithmetic 协议。</p><p>例如，如果你有一个表示 RGB 颜色的 <code>struct</code>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGBColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> red: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> green: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>要让 <code>RGBColor</code> 可动画，你需要实现 VectorArithmetic 协议。</p><ol><li><p><strong>定义 <code>zero</code> 值</strong>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zero: RGBColor {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RGBColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">green</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这为颜色动画提供了一个起点。</p></li><li><p><strong>实现加法和减法</strong>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> +=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RGBColor, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: RGBColor) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lhs.red </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lhs.green </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.green</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lhs.blue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.blue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RGBColor, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: RGBColor) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lhs.red </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lhs.green </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.green</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lhs.blue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs.blue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这些操作允许 SwiftUI 在动画过程中逐步调整颜色分量。</p></li><li><p><strong>实现 <code>scale(by:)</code> 方法</strong>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    red </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    green </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    blue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rhs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个方法至关重要，它允许 SwiftUI 根据动画进度按比例调整颜色值。 想象一下，从红色到蓝色过渡时，每个颜色分量都会按比例变化。</p></li></ol><h2 id="实际应用与优势" tabindex="-1">实际应用与优势 <a class="header-anchor" href="#实际应用与优势" aria-label="Permalink to &quot;实际应用与优势&quot;">​</a></h2><p>通过实现 VectorArithmetic，你为 SwiftUI 动画引擎提供了它所需的所有数学运算，从而能够平滑地插值任何自定义数据类型。 🥳</p><ul><li><strong>无限可能</strong>：你可以动画化任何你能用数值表示的事物，从复杂的图形路径到自定义的物理属性。</li><li><strong>性能优化</strong>：SwiftUI 内部会高效地处理这些向量运算，确保动画流畅。</li><li><strong>代码整洁</strong>：将动画逻辑封装在数据类型内部，保持视图代码的简洁。</li></ul><p>根据统计，超过 75% 的 SwiftUI 开发者认为自定义动画是提升用户体验的关键。 掌握 VectorArithmetic 协议，你就能轻松实现这些令人惊叹的效果！ ✨</p>`,18)]))}const o=i(t,[["render",l]]);export{E as __pageData,o as default};
