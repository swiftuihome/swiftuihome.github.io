import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const k=JSON.parse('{"title":"使用CAGradientLayer创建渐变效果","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/11.3_使用CAGradientLayer创建渐变效果.md","filePath":"swift/uikit/advanced/11.3_使用CAGradientLayer创建渐变效果.md"}'),t={name:"swift/uikit/advanced/11.3_使用CAGradientLayer创建渐变效果.md"};function l(d,s,r,o,p,h){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用cagradientlayer创建渐变效果" tabindex="-1">使用CAGradientLayer创建渐变效果 <a class="header-anchor" href="#使用cagradientlayer创建渐变效果" aria-label="Permalink to &quot;使用CAGradientLayer创建渐变效果&quot;">​</a></h1><h2 id="渐变图层-视觉魔法的开始-✨" tabindex="-1">渐变图层：视觉魔法的开始 ✨ <a class="header-anchor" href="#渐变图层-视觉魔法的开始-✨" aria-label="Permalink to &quot;渐变图层：视觉魔法的开始 ✨&quot;">​</a></h2><p><code>CAGradientLayer</code> 是一个功能强大的 Core Animation 图层，它能让你轻松创建出平滑的颜色渐变效果。想象一下，你的 UI 元素可以从一种颜色优雅地过渡到另一种颜色，这无疑会大大提升用户界面的美观度和专业感。它继承自 <code>CALayer</code>，因此拥有所有图层操作的灵活性。</p><h2 id="配置你的渐变-颜色与位置-🎨" tabindex="-1">配置你的渐变：颜色与位置 🎨 <a class="header-anchor" href="#配置你的渐变-颜色与位置-🎨" aria-label="Permalink to &quot;配置你的渐变：颜色与位置 🎨&quot;">​</a></h2><p>要使用 <code>CAGradientLayer</code>，你首先需要定义渐变的颜色和它们在渐变中的位置。这就像在画布上选择颜料并决定它们在哪里混合。</p><ul><li><strong><code>colors</code> 属性</strong>：这是一个 <code>[Any]?</code> 类型的数组，但实际上你需要传入 <code>[CGColor]</code> 数组。它定义了渐变中使用的颜色。例如，你可以从红色渐变到蓝色。</li><li><strong><code>locations</code> 属性</strong>：这是一个 <code>[NSNumber]?</code> 类型的数组，用于指定 <code>colors</code> 数组中每个颜色的相对位置。这些值必须在 0.0 到 1.0 之间，并且是递增的。如果省略，颜色将均匀分布。</li></ul><p>例如，如果你有三种颜色，并且希望中间的颜色在渐变中占据更大的比例，你可以调整 <code>locations</code> 数组。</p><h2 id="渐变方向-从何处开始-到何处结束-➡️⬇️" tabindex="-1">渐变方向：从何处开始，到何处结束 ➡️⬇️ <a class="header-anchor" href="#渐变方向-从何处开始-到何处结束-➡️⬇️" aria-label="Permalink to &quot;渐变方向：从何处开始，到何处结束 ➡️⬇️&quot;">​</a></h2><p>渐变的方向对于最终效果至关重要。<code>CAGradientLayer</code> 提供了两个关键属性来控制渐变的方向：</p><ul><li><strong><code>startPoint</code> 属性</strong>：一个 <code>CGPoint</code>，定义了渐变的起始点。它的坐标系是单位坐标系，即 (0,0) 代表图层的左上角，(1,1) 代表右下角。</li><li><strong><code>endPoint</code> 属性</strong>：同样是一个 <code>CGPoint</code>，定义了渐变的结束点。</li></ul><p>例如，要创建一个从左到右的水平渐变，你可以设置 <code>startPoint</code> 为 <code>(0, 0.5)</code>，<code>endPoint</code> 为 <code>(1, 0.5)</code>。如果你想要一个对角线渐变，可以尝试 <code>(0,0)</code> 到 <code>(1,1)</code>。这些点的选择直接影响渐变的视觉流动。</p><h2 id="实际操作-创建你的第一个渐变-🚀" tabindex="-1">实际操作：创建你的第一个渐变 🚀 <a class="header-anchor" href="#实际操作-创建你的第一个渐变-🚀" aria-label="Permalink to &quot;实际操作：创建你的第一个渐变 🚀&quot;">​</a></h2><p>让我们通过一个简单的例子来创建一个渐变图层。假设你想要一个从天蓝色到深蓝色的垂直渐变背景。</p><ol><li><strong>创建 <code>CAGradientLayer</code> 实例</strong>：<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gradientLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CAGradientLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>设置 <code>frame</code></strong>：确保渐变图层覆盖你想要的区域。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradientLayer.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view.bounds</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>定义颜色</strong>：<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradientLayer.colors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UIColor.systemTeal.cgColor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UIColor.systemBlue.cgColor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><strong>设置渐变方向</strong>：从顶部到底部。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradientLayer.startPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradientLayer.endPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>添加到视图的图层</strong>：<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.layer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSublayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gradientLayer)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><p>通过这几步，你就能在你的视图上看到一个漂亮的垂直渐变了！</p><h2 id="渐变类型-线性与径向-🌀" tabindex="-1">渐变类型：线性与径向 🌀 <a class="header-anchor" href="#渐变类型-线性与径向-🌀" aria-label="Permalink to &quot;渐变类型：线性与径向 🌀&quot;">​</a></h2><p>除了线性的颜色过渡，<code>CAGradientLayer</code> 还支持不同类型的渐变。<code>type</code> 属性允许你选择渐变的样式。</p><ul><li><strong><code>.axial</code> (默认)</strong>：这是最常见的线性渐变，颜色沿着 <code>startPoint</code> 和 <code>endPoint</code> 定义的轴线进行过渡。</li><li><strong><code>.radial</code> (iOS 12+)</strong>：径向渐变，颜色从一个中心点向外扩散。这能创造出非常酷炫的圆形或椭圆形渐变效果，就像一个光晕。</li></ul><p>使用 <code>.radial</code> 类型时，<code>startPoint</code> 和 <code>endPoint</code> 会被解释为渐变圆的中心和半径。例如，<code>startPoint</code> 可以是圆心，而 <code>endPoint</code> 则定义了渐变结束的半径方向。掌握这些属性，你就能创造出无限的视觉可能性！</p>`,19)]))}const g=i(t,[["render",l]]);export{k as __pageData,g as default};
