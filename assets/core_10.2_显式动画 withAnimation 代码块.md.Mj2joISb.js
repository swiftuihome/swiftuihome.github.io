import{_ as s,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"显式动画：使用 withAnimation 代码块","description":"","frontmatter":{},"headers":[],"relativePath":"core/10.2_显式动画 withAnimation 代码块.md","filePath":"core/10.2_显式动画 withAnimation 代码块.md"}'),t={name:"core/10.2_显式动画 withAnimation 代码块.md"};function l(p,i,h,r,k,d){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="显式动画-使用-withanimation-代码块" tabindex="-1">显式动画：使用 <code>withAnimation</code> 代码块 <a class="header-anchor" href="#显式动画-使用-withanimation-代码块" aria-label="Permalink to &quot;显式动画：使用 \`withAnimation\` 代码块&quot;">​</a></h1><blockquote><p>想要在 SwiftUI 中精确控制动画吗？<code>withAnimation</code> 代码块就是你的秘密武器！它允许你明确地指定哪些状态变化应该被动画化，以及使用什么样的动画效果。这为你提供了极大的灵活性，让你的界面更加生动有趣。</p></blockquote><h2 id="withanimation-的基本用法" tabindex="-1"><code>withAnimation</code> 的基本用法 <a class="header-anchor" href="#withanimation-的基本用法" aria-label="Permalink to &quot;\`withAnimation\` 的基本用法&quot;">​</a></h2><p><code>withAnimation</code> 本质上是一个函数，它接受一个闭包作为参数。在这个闭包中，你可以修改任何会影响视图状态的变量。SwiftUI 会自动地对这些状态变化应用动画效果。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isTapped: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                isTapped.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isTapped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个例子中，点击按钮会触发 <code>isTapped</code> 状态的改变。<code>withAnimation(.spring())</code> 确保了 <code>scaleEffect</code> 的变化会以弹簧动画的形式呈现。是不是很简单？🎉</p><h2 id="定制你的动画" tabindex="-1">定制你的动画 <a class="header-anchor" href="#定制你的动画" aria-label="Permalink to &quot;定制你的动画&quot;">​</a></h2><p><code>withAnimation</code> 允许你指定各种动画类型，包括：</p><ul><li><code>.linear(duration: TimeInterval)</code>：线性动画，以恒定速度进行。</li><li><code>.easeIn(duration: TimeInterval)</code>：缓入动画，开始时速度较慢，然后加速。</li><li><code>.easeOut(duration: TimeInterval)</code>：缓出动画，开始时速度较快，然后减速。</li><li><code>.easeInOut(duration: TimeInterval)</code>：缓入缓出动画，开始和结束时速度较慢，中间加速。</li><li><code>.spring(response: TimeInterval, dampingFraction: Double, blendDuration: TimeInterval)</code>：弹簧动画，模拟物理弹簧效果。</li></ul><p>你可以根据需要选择合适的动画类型，或者创建自定义动画。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 状态变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="withanimation-的高级技巧" tabindex="-1"><code>withAnimation</code> 的高级技巧 <a class="header-anchor" href="#withanimation-的高级技巧" aria-label="Permalink to &quot;\`withAnimation\` 的高级技巧&quot;">​</a></h2><ol><li><strong>控制动画范围</strong>：<code>withAnimation</code> 只会影响闭包内的状态变化。这让你能够精确控制哪些属性需要动画，哪些不需要。</li><li><strong>嵌套 <code>withAnimation</code></strong>：你可以嵌套使用 <code>withAnimation</code> 来创建更复杂的动画序列。每个 <code>withAnimation</code> 代码块可以有不同的动画参数。</li><li><strong>禁用动画</strong>：有时你可能需要在某些情况下禁用动画。你可以使用 <code>withAnimation(nil)</code> 来实现。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 状态变化，不会有动画效果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>withAnimation</code> 在各种场景中都非常有用，例如：</p><ul><li><strong>视图切换</strong>：平滑地过渡不同的视图状态。</li><li><strong>UI 元素的显示和隐藏</strong>：使用动画来淡入淡出或滑动显示/隐藏元素。</li><li><strong>响应用户交互</strong>：为按钮点击、滑动手势等添加动画反馈。</li></ul><p>掌握 <code>withAnimation</code>，你就能为你的 SwiftUI 应用增添更多活力和吸引力！ 🌟 记住，实践是最好的老师，多尝试不同的动画效果，你会发现更多惊喜！</p>`,18)]))}const E=s(t,[["render",l]]);export{c as __pageData,E as default};
