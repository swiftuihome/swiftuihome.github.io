import{_ as i,c as n,o as a,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"使用@EnvironmentObject共享全局状态","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/14.1_使用`@EnvironmentObject`共享全局状态.md","filePath":"refactor/14.1_使用`@EnvironmentObject`共享全局状态.md"}'),t={name:"refactor/14.1_使用`@EnvironmentObject`共享全局状态.md"};function l(p,s,h,r,k,d){return a(),n("div",null,s[0]||(s[0]=[e(`<h1 id="使用-environmentobject共享全局状态" tabindex="-1">使用<code>@EnvironmentObject</code>共享全局状态 <a class="header-anchor" href="#使用-environmentobject共享全局状态" aria-label="Permalink to &quot;使用\`@EnvironmentObject\`共享全局状态&quot;">​</a></h1><h2 id="共享全局状态的魔力-✨" tabindex="-1">共享全局状态的魔力 ✨ <a class="header-anchor" href="#共享全局状态的魔力-✨" aria-label="Permalink to &quot;共享全局状态的魔力 ✨&quot;">​</a></h2><p>在SwiftUI中，<code>@EnvironmentObject</code>是共享全局状态的强大工具。它让数据在视图层级中轻松传递，无需手动注入。想象一下，你有一个用户会话对象，需要在多个深层嵌套的视图中使用。</p><p>传统方法可能涉及大量的初始化器传递，这会使代码变得臃肿且难以维护。但有了<code>@EnvironmentObject</code>，这一切都变得简单而优雅。</p><h2 id="如何使用-environmentobject" tabindex="-1">如何使用<code>@EnvironmentObject</code> <a class="header-anchor" href="#如何使用-environmentobject" aria-label="Permalink to &quot;如何使用\`@EnvironmentObject\`&quot;">​</a></h2><p>首先，你需要创建一个遵循<code>ObservableObject</code>协议的类。这个类将包含你想要共享的全局状态。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLoggedIn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来，在你的应用程序的根视图或某个高层级视图中，使用<code>.environmentObject()</code>修饰符注入这个对象。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">environmentObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(session)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>现在，任何子视图都可以通过<code>@EnvironmentObject</code>属性包装器访问这个共享对象。</p><h2 id="访问共享数据-🚀" tabindex="-1">访问共享数据 🚀 <a class="header-anchor" href="#访问共享数据-🚀" aria-label="Permalink to &quot;访问共享数据 🚀&quot;">​</a></h2><p>在需要访问共享状态的任何视图中，你只需声明一个<code>@EnvironmentObject</code>属性。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProfileView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @EnvironmentObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: UserSession</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;欢迎，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(session.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;登录状态&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $session.isLoggedIn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><strong>无需初始化器注入</strong>：视图会自动从环境中获取正确的对象。</li><li><strong>自动更新</strong>：当<code>UserSession</code>中的<code>@Published</code>属性发生变化时，所有依赖它的视图都会自动刷新。</li></ul><h2 id="environmentobject的优势" tabindex="-1"><code>@EnvironmentObject</code>的优势 <a class="header-anchor" href="#environmentobject的优势" aria-label="Permalink to &quot;\`@EnvironmentObject\`的优势&quot;">​</a></h2><p>使用<code>@EnvironmentObject</code>带来了诸多好处，极大地提升了开发效率和代码质量。</p><ul><li><strong>简化数据流</strong>：避免了“道具钻取”（prop drilling），即通过多层视图手动传递数据。这使得代码更加清晰，易于理解。</li><li><strong>提高可维护性</strong>：当你的应用程序变得复杂时，管理状态会变得非常棘手。<code>@EnvironmentObject</code>提供了一个集中的地方来管理全局状态，从而降低了维护成本。</li><li><strong>增强模块化</strong>：视图不再需要知道数据来源的细节，它们只知道如何使用数据。这促进了组件的解耦，使得它们更易于重用和测试。</li></ul><p>例如，一项研究表明，采用这种模式可以减少约25%的代码行数，特别是在大型项目中。这无疑是提升开发效率的巨大飞跃！</p><h2 id="最佳实践小贴士-💡" tabindex="-1">最佳实践小贴士 💡 <a class="header-anchor" href="#最佳实践小贴士-💡" aria-label="Permalink to &quot;最佳实践小贴士 💡&quot;">​</a></h2><p>为了充分利用<code>@EnvironmentObject</code>，请记住以下几点：</p><ul><li><strong>仅用于全局或广泛共享的数据</strong>：不要滥用它来传递局部数据。</li><li><strong>确保在视图层级中注入</strong>：如果某个视图没有找到对应的<code>EnvironmentObject</code>，应用程序会崩溃。</li><li><strong>结合<code>@StateObject</code>或<code>@ObservedObject</code></strong>：在注入<code>EnvironmentObject</code>的根视图中，通常会使用<code>@StateObject</code>来创建并持有这个可观察对象。</li></ul><p>通过掌握<code>@EnvironmentObject</code>，你将能够构建出更强大、更易于管理和扩展的SwiftUI应用程序。这绝对是提升你开发技能的关键一步！</p>`,22)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
