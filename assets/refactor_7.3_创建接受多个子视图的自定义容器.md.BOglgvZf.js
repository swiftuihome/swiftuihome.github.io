import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"创建接受多个子视图的自定义容器","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/7.3_创建接受多个子视图的自定义容器.md","filePath":"refactor/7.3_创建接受多个子视图的自定义容器.md"}'),l={name:"refactor/7.3_创建接受多个子视图的自定义容器.md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="创建接受多个子视图的自定义容器" tabindex="-1">创建接受多个子视图的自定义容器 <a class="header-anchor" href="#创建接受多个子视图的自定义容器" aria-label="Permalink to &quot;创建接受多个子视图的自定义容器&quot;">​</a></h1><p>在 SwiftUI 中，<code>@ViewBuilder</code> 允许你创建一个可以接受多个子视图的自定义容器。这就像 SwiftUI 提供的 <code>VStack</code> 或 <code>HStack</code>，但你可以完全控制它的行为和外观。是不是很酷？😎</p><h2 id="了解-viewbuilder-的魔力" tabindex="-1">了解 <code>@ViewBuilder</code> 的魔力 <a class="header-anchor" href="#了解-viewbuilder-的魔力" aria-label="Permalink to &quot;了解 \`@ViewBuilder\` 的魔力&quot;">​</a></h2><p><code>@ViewBuilder</code> 是一个属性构建器，它将闭包中的多个视图转换为单个视图。这意味着你可以编写一个函数或初始化器，它接受一个闭包作为参数，并且这个闭包可以返回多个视图。<code>@ViewBuilder</code> 会自动将这些视图组合成一个视图组。</p><ul><li>它简化了视图的组合。</li><li>它允许你创建更具表现力的 API。</li><li>它提高了代码的可读性。</li></ul><h2 id="如何创建自定义容器" tabindex="-1">如何创建自定义容器 <a class="header-anchor" href="#如何创建自定义容器" aria-label="Permalink to &quot;如何创建自定义容器&quot;">​</a></h2><p>要创建一个接受多个子视图的自定义容器，你需要执行以下步骤：</p><ol><li>创建一个新的 <code>struct</code> 并使其符合 <code>View</code> 协议。</li><li>添加一个使用 <code>@ViewBuilder</code> 修饰的闭包属性。</li><li>在 <code>body</code> 属性中使用这个闭包来构建视图。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ViewBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Content</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;容器标题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;容器底部&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="使用自定义容器" tabindex="-1">使用自定义容器 <a class="header-anchor" href="#使用自定义容器" aria-label="Permalink to &quot;使用自定义容器&quot;">​</a></h2><p>现在你可以像使用 SwiftUI 的内置容器一样使用你的自定义容器了！🎉</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyCustomContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第一个子视图&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第二个子视图&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;按钮被点击了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><ul><li><strong>自定义布局</strong>: 创建具有特定布局规则的容器。</li><li><strong>条件渲染</strong>: 根据条件显示不同的子视图。</li><li><strong>主题应用</strong>: 为子视图应用特定的样式或主题。</li></ul><p>通过使用 <code>@ViewBuilder</code>，你可以创建非常灵活和可重用的自定义容器，从而大大提高你的 SwiftUI 代码的可维护性和可扩展性。加油！💪 你一定可以掌握它！</p>`,15)]))}const c=i(l,[["render",t]]);export{o as __pageData,c as default};
