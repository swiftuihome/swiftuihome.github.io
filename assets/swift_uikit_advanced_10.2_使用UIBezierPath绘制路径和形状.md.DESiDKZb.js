import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"使用UIBezierPath绘制路径和形状","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/10.2_使用UIBezierPath绘制路径和形状.md","filePath":"swift/uikit/advanced/10.2_使用UIBezierPath绘制路径和形状.md"}'),n={name:"swift/uikit/advanced/10.2_使用UIBezierPath绘制路径和形状.md"};function h(l,i,p,r,k,d){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="使用uibezierpath绘制路径和形状" tabindex="-1">使用UIBezierPath绘制路径和形状 <a class="header-anchor" href="#使用uibezierpath绘制路径和形状" aria-label="Permalink to &quot;使用UIBezierPath绘制路径和形状&quot;">​</a></h1><h2 id="uibezierpath-简介与基本用法" tabindex="-1">UIBezierPath 简介与基本用法 <a class="header-anchor" href="#uibezierpath-简介与基本用法" aria-label="Permalink to &quot;UIBezierPath 简介与基本用法&quot;">​</a></h2><p><code>UIBezierPath</code> 是一个功能强大的类，它允许你定义复杂的路径和形状。你可以用它来绘制直线、曲线、矩形、圆形等，是 <code>Core Graphics</code> 绘图中不可或缺的工具。想象一下，你正在用画笔在画布上勾勒轮廓，<code>UIBezierPath</code> 就是你的画笔，帮你精确地描绘出你想要的图形。🎨</p><p>使用 <code>UIBezierPath</code> 绘制图形非常直观。你首先需要创建一个路径对象，然后添加你想要的线段或曲线。</p><ul><li><strong>创建路径</strong>: 你可以通过 <code>init()</code> 方法创建一个空的路径，或者使用便捷方法创建预设形状，例如 <code>bezierPathWithRect:</code> 或 <code>bezierPathWithOvalInRect:</code>。</li><li><strong>添加线段</strong>: 使用 <code>moveToPoint:</code> 设置起点，然后用 <code>addLineToPoint:</code> 连接到下一个点。</li><li><strong>添加曲线</strong>: <code>addArcWithCenter:radius:startAngle:endAngle:clockwise:</code> 可以绘制圆弧，而 <code>addCurveToPoint:controlPoint1:controlPoint2:</code> 则能绘制贝塞尔曲线。</li></ul><h2 id="绘制直线和矩形" tabindex="-1">绘制直线和矩形 <a class="header-anchor" href="#绘制直线和矩形" aria-label="Permalink to &quot;绘制直线和矩形&quot;">​</a></h2><p>绘制直线是 <code>UIBezierPath</code> 最基础的应用之一。你只需要指定起点和终点，路径就会自动连接它们。例如，你可以轻松地绘制一条从 (20, 20) 到 (100, 100) 的对角线。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIBezierPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">moveToPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addLineToPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stroke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 描边路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>绘制矩形同样简单，你可以直接使用 <code>UIBezierPath(rect: CGRect)</code> 初始化方法。这大大简化了代码，让你能快速创建矩形。</p><ul><li><strong>定义矩形</strong>: <code>CGRect(x: 50, y: 50, width: 100, height: 80)</code> 定义了一个宽100、高80的矩形。</li><li><strong>创建路径</strong>: <code>let rectPath = UIBezierPath(rect: myRect)</code> 即可。</li><li><strong>填充或描边</strong>: 你可以选择 <code>fill()</code> 填充矩形内部，或者 <code>stroke()</code> 描绘边框。</li></ul><h2 id="绘制圆形和圆弧" tabindex="-1">绘制圆形和圆弧 <a class="header-anchor" href="#绘制圆形和圆弧" aria-label="Permalink to &quot;绘制圆形和圆弧&quot;">​</a></h2><p><code>UIBezierPath</code> 在绘制圆形和圆弧方面表现出色。你可以使用 <code>bezierPathWithOvalInRect:</code> 方法来绘制一个内切于给定矩形的椭圆，如果矩形是正方形，那么结果就是一个完美的圆形。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circleRect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circlePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIBezierPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ovalIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: circleRect)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UIColor.red.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setFill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">circlePath.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 填充红色圆形</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>绘制圆弧则需要指定圆心、半径、起始角度、结束角度以及是否顺时针。这为你提供了极大的灵活性，可以创建各种扇形或弧线。</p><ol><li><strong>设置圆心和半径</strong>: 确定圆弧的中心点和大小。</li><li><strong>定义角度</strong>: 角度以弧度表示，<code>0</code> 弧度通常指向右侧（3点钟方向）。</li><li><strong>选择方向</strong>: <code>clockwise: true</code> 表示顺时针，<code>false</code> 表示逆时针。</li></ol><h2 id="绘制贝塞尔曲线" tabindex="-1">绘制贝塞尔曲线 <a class="header-anchor" href="#绘制贝塞尔曲线" aria-label="Permalink to &quot;绘制贝塞尔曲线&quot;">​</a></h2><p>贝塞尔曲线是 <code>UIBezierPath</code> 的高级特性，它允许你创建平滑、优美的曲线。主要有两种类型：二次贝塞尔曲线和三次贝塞尔曲线。</p><ul><li><strong>二次贝塞尔曲线</strong>: 使用一个控制点来影响曲线的形状。<code>addQuadCurveToPoint:controlPoint:</code> 方法可以实现。</li><li><strong>三次贝塞尔曲线</strong>: 使用两个控制点，提供更精细的曲线控制。<code>addCurveToPoint:controlPoint1:controlPoint2:</code> 是其对应方法。</li></ul><p>掌握贝塞尔曲线能让你绘制出任何你想要的复杂形状，例如波浪线、心形等。据统计，超过 70% 的自定义图形界面都或多或少地利用了贝塞尔曲线的原理。✨</p><h2 id="路径的组合与变换" tabindex="-1">路径的组合与变换 <a class="header-anchor" href="#路径的组合与变换" aria-label="Permalink to &quot;路径的组合与变换&quot;">​</a></h2><p><code>UIBezierPath</code> 的强大之处还在于你可以组合多个路径，创建出更复杂的图形。你可以将不同的路径添加到同一个 <code>UIBezierPath</code> 对象中，或者使用 <code>appendPath:</code> 方法将一个路径添加到另一个路径的末尾。</p><ul><li><strong>组合路径</strong>: 想象你正在拼乐高积木，每个 <code>UIBezierPath</code> 都是一块积木，你可以将它们组合起来。</li><li><strong>路径变换</strong>: 你还可以对路径进行平移、旋转和缩放等变换操作，这通过 <code>apply(CGAffineTransform)</code> 方法实现。这对于创建动画效果或响应用户手势非常有用。</li></ul><p>例如，你可以绘制一个三角形，然后将其旋转 45 度，再平移到屏幕的另一个位置。这为你的 UI 带来了无限的可能性！🚀</p>`,23)]))}const E=s(n,[["render",h]]);export{c as __pageData,E as default};
