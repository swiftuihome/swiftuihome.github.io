import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"实现动态导航栏标题效果","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/2.6_实现动态导航栏标题效果.md","filePath":"advanced/2.6_实现动态导航栏标题效果.md"}'),l={name:"advanced/2.6_实现动态导航栏标题效果.md"};function t(h,s,p,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="实现动态导航栏标题效果" tabindex="-1">实现动态导航栏标题效果 <a class="header-anchor" href="#实现动态导航栏标题效果" aria-label="Permalink to &quot;实现动态导航栏标题效果&quot;">​</a></h1><blockquote><p>实现动态导航栏标题效果，让你的 SwiftUI 应用更上一层楼！🚀 让我们一起探索如何使用 <code>PreferenceKey</code> 来实现这个炫酷的功能。</p></blockquote><h2 id="掌握动态导航栏标题的奥秘" tabindex="-1">掌握动态导航栏标题的奥秘 <a class="header-anchor" href="#掌握动态导航栏标题的奥秘" aria-label="Permalink to &quot;掌握动态导航栏标题的奥秘&quot;">​</a></h2><p>动态导航栏标题，意味着标题可以根据页面内容的变化而变化。这能极大地提升用户体验，让导航更加直观。例如，当用户滚动页面时，标题可以显示当前阅读的章节名称。是不是很棒？😎</p><ul><li>使用 <code>PreferenceKey</code> 可以轻松实现这种效果。</li><li><code>PreferenceKey</code> 允许子视图向父视图传递信息。</li><li>通过监听 <code>PreferenceKey</code> 的变化，我们可以动态更新导航栏标题。</li></ul><h2 id="preferencekey-的妙用" tabindex="-1">PreferenceKey 的妙用 <a class="header-anchor" href="#preferencekey-的妙用" aria-label="Permalink to &quot;PreferenceKey 的妙用&quot;">​</a></h2><p><code>PreferenceKey</code> 是 SwiftUI 中一个强大的工具，它允许我们从子视图向父视图传递数据。这在很多场景下都非常有用，比如计算子视图的高度，或者实现动态导航栏标题。</p><ol><li>首先，我们需要定义一个自定义的 <code>PreferenceKey</code>。</li><li>然后，在子视图中使用 <code>.preference(key: value:)</code> 设置值。</li><li>最后，在父视图中使用 <code>.onPreferenceChange()</code> 监听值的变化，并更新导航栏标题。</li></ol><h2 id="实战-动态更新导航栏标题" tabindex="-1">实战：动态更新导航栏标题 <a class="header-anchor" href="#实战-动态更新导航栏标题" aria-label="Permalink to &quot;实战：动态更新导航栏标题&quot;">​</a></h2><p>让我们通过一个简单的例子来演示如何实现动态导航栏标题。假设我们有一个列表，当用户滚动到不同的列表项时，导航栏标题显示当前列表项的标题。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TitlePreferenceKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferenceKey </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onPreferenceChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TitlePreferenceKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">navigationTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过以上代码，我们就可以实现动态导航栏标题的效果啦！🎉</p><h2 id="优化你的导航栏体验" tabindex="-1">优化你的导航栏体验 <a class="header-anchor" href="#优化你的导航栏体验" aria-label="Permalink to &quot;优化你的导航栏体验&quot;">​</a></h2><p>除了基本的动态标题，我们还可以做更多的事情来优化导航栏体验。例如，可以根据滚动位置调整标题的透明度，或者添加动画效果。这些小细节都能让你的应用更加出色。</p><ul><li>考虑使用 <code>GeometryReader</code> 来获取滚动位置。</li><li>使用 <code>withAnimation</code> 来添加平滑的动画效果。</li><li>不断尝试，你会发现更多有趣的用法！✨</li></ul><p>希望你能通过这篇文章，掌握动态导航栏标题的实现方法，并将其应用到你的项目中。加油！💪</p>`,17)]))}const E=i(l,[["render",t]]);export{o as __pageData,E as default};
