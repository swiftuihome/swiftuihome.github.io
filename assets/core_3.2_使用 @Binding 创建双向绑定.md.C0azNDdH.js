import{_ as i,c as n,o as a,ag as l}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"使用 @Binding 创建双向绑定","description":"","frontmatter":{},"headers":[],"relativePath":"core/3.2_使用 @Binding 创建双向绑定.md","filePath":"core/3.2_使用 @Binding 创建双向绑定.md"}'),p={name:"core/3.2_使用 @Binding 创建双向绑定.md"};function e(h,s,t,k,r,d){return a(),n("div",null,s[0]||(s[0]=[l(`<h1 id="使用-binding-创建双向绑定" tabindex="-1">使用 @Binding 创建双向绑定 <a class="header-anchor" href="#使用-binding-创建双向绑定" aria-label="Permalink to &quot;使用 @Binding 创建双向绑定&quot;">​</a></h1><h2 id="探索-binding-的魔力-✨" tabindex="-1">探索 @Binding 的魔力 ✨ <a class="header-anchor" href="#探索-binding-的魔力-✨" aria-label="Permalink to &quot;探索 @Binding 的魔力 ✨&quot;">​</a></h2><p>在 SwiftUI 的世界里，<code>@Binding</code> 扮演着至关重要的角色，它允许你在不同的视图之间建立起一座桥梁，实现数据的双向流动。想象一下，你有一个开关，当你在一个视图中拨动它时，另一个视图中的状态也会随之改变。这就是 <code>@Binding</code> 的力量！💪</p><h2 id="什么是双向绑定-🤔" tabindex="-1">什么是双向绑定？🤔 <a class="header-anchor" href="#什么是双向绑定-🤔" aria-label="Permalink to &quot;什么是双向绑定？🤔&quot;">​</a></h2><p>简单来说，双向绑定意味着一个值的改变会立即反映在所有绑定到它的地方。这与单向数据流不同，在单向数据流中，数据只能从父视图传递到子视图。<code>@Binding</code> 让你能够从子视图修改父视图的状态，实现更灵活的交互。</p><ul><li><strong>父视图拥有数据</strong>: 父视图使用 <code>@State</code> 管理数据。</li><li><strong>子视图修改数据</strong>: 子视图通过 <code>@Binding</code> 接收父视图的数据，并可以修改它。</li><li><strong>数据同步</strong>: 任何一方的修改都会立即同步到另一方。</li></ul><h2 id="如何使用-binding-🛠️" tabindex="-1">如何使用 @Binding？🛠️ <a class="header-anchor" href="#如何使用-binding-🛠️" aria-label="Permalink to &quot;如何使用 @Binding？🛠️&quot;">​</a></h2><p>使用 <code>@Binding</code> 非常简单。首先，在父视图中使用 <code>@State</code> 定义一个状态变量。然后，将这个状态变量通过 <code>@Binding</code> 传递给子视图。在子视图中，你可以像使用普通变量一样使用这个绑定变量，任何修改都会自动同步回父视图。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $isOn) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 $ 创建绑定</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开关状态：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(isOn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;开&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;关&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ChildView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isChildOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $isOn) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将绑定传递给子视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChildView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isChildOn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;子视图开关状态：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(isChildOn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;开&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;关&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onTapGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                isChildOn.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改绑定值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="binding-的应用场景-🚀" tabindex="-1">@Binding 的应用场景 🚀 <a class="header-anchor" href="#binding-的应用场景-🚀" aria-label="Permalink to &quot;@Binding 的应用场景 🚀&quot;">​</a></h2><p><code>@Binding</code> 在 SwiftUI 中有着广泛的应用，例如：</p><ol><li><strong>自定义控件</strong>: 创建可复用的自定义控件，允许父视图控制控件的状态。</li><li><strong>表单输入</strong>: 在表单中，使用 <code>@Binding</code> 将文本框的值绑定到状态变量，实现实时更新。</li><li><strong>模态窗口</strong>: 在模态窗口中，使用 <code>@Binding</code> 将窗口的状态传递给父视图，实现窗口的关闭和数据传递。</li></ol><h2 id="深入理解-binding-🧠" tabindex="-1">深入理解 @Binding 🧠 <a class="header-anchor" href="#深入理解-binding-🧠" aria-label="Permalink to &quot;深入理解 @Binding 🧠&quot;">​</a></h2><p><code>@Binding</code> 实际上是一个属性包装器，它创建了一个指向状态变量的引用。当你修改绑定变量时，实际上是在修改原始的状态变量。这种机制使得 SwiftUI 能够高效地管理视图之间的状态同步。</p><ul><li><code>@Binding</code> 确保数据的一致性。</li><li>它简化了视图之间的数据传递。</li><li>它提高了代码的可维护性和可读性。</li></ul><p>掌握 <code>@Binding</code> 是成为 SwiftUI 高手的关键一步。通过灵活运用 <code>@Binding</code>，你可以构建出更加动态和交互性强的应用程序。加油！🎉</p>`,16)]))}const o=i(p,[["render",e]]);export{E as __pageData,o as default};
