import{_ as i,c as e,o as a,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"注册自定义Cell和ReusableView类","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/6.2_注册自定义Cell和ReusableView类.md","filePath":"swift/uikit/advanced/6.2_注册自定义Cell和ReusableView类.md"}'),n={name:"swift/uikit/advanced/6.2_注册自定义Cell和ReusableView类.md"};function t(p,s,h,k,r,d){return a(),e("div",null,s[0]||(s[0]=[l(`<h1 id="注册自定义cell和reusableview类" tabindex="-1">注册自定义Cell和ReusableView类 <a class="header-anchor" href="#注册自定义cell和reusableview类" aria-label="Permalink to &quot;注册自定义Cell和ReusableView类&quot;">​</a></h1><p>在 <code>UICollectionView</code> 的纯代码实践中，注册自定义 <code>Cell</code> 和 <code>ReusableView</code> 类是至关重要的一步。这就像为你的 <code>CollectionView</code> 准备好展示内容的容器，确保每个容器都按照你的设计来呈现数据。让我们一起看看如何实现吧！🚀</p><h2 id="注册自定义-cell-类" tabindex="-1">注册自定义 Cell 类 <a class="header-anchor" href="#注册自定义-cell-类" aria-label="Permalink to &quot;注册自定义 Cell 类&quot;">​</a></h2><p>首先，你需要创建一个继承自 <code>UICollectionViewCell</code> 的自定义类。这个类将负责展示 <code>CollectionView</code> 中的单个项目。</p><ol><li><p><strong>创建自定义 Cell 类文件</strong>：在 Xcode 中，新建一个 Cocoa Touch Class 文件，选择 <code>UICollectionViewCell</code> 作为其父类。例如，你可以命名为 <code>MyCollectionViewCell</code>。</p></li><li><p><strong>在 <code>CollectionView</code> 中注册 Cell</strong>：在你的 <code>ViewController</code> 中，你需要注册这个自定义 Cell 类。这告诉 <code>CollectionView</code> 在需要创建 Cell 时，使用你定义的类。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">collectionView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyCollectionViewCell.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forCellWithReuseIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，<code>&quot;MyCell&quot;</code> 是一个重用标识符（reuse identifier）。<code>CollectionView</code> 使用这个标识符来重用 Cell，提高性能。你可以把它想象成一个标签，方便 <code>CollectionView</code> 找到并重用 Cell。🏷️</p></li><li><p><strong>在 Cell 类中添加 UI 元素</strong>：在 <code>MyCollectionViewCell</code> 类中，你可以添加 <code>UIImageView</code>、<code>UILabel</code> 等 UI 元素，并使用 Auto Layout 进行布局。确保这些元素能够正确展示你的数据。</p></li></ol><h2 id="注册自定义-reusableview-类" tabindex="-1">注册自定义 ReusableView 类 <a class="header-anchor" href="#注册自定义-reusableview-类" aria-label="Permalink to &quot;注册自定义 ReusableView 类&quot;">​</a></h2><p>除了 Cell，<code>UICollectionView</code> 还可以有 Header 和 Footer 视图，这些都是 <code>ReusableView</code>。注册自定义 <code>ReusableView</code> 类与注册 Cell 类似。</p><ol><li><p><strong>创建自定义 ReusableView 类文件</strong>：新建一个 Cocoa Touch Class 文件，选择 <code>UICollectionReusableView</code> 作为其父类。例如，你可以命名为 <code>MyHeaderView</code>。</p></li><li><p><strong>在 <code>CollectionView</code> 中注册 ReusableView</strong>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">collectionView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyHeaderView.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forSupplementaryViewOfKind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UICollectionView.elementKindSectionHeader, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withReuseIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyHeader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，<code>UICollectionView.elementKindSectionHeader</code> 指定了这是一个 Header 视图。<code>&quot;MyHeader&quot;</code> 是这个 Header 视图的重用标识符。</p></li><li><p><strong>在 ReusableView 类中添加 UI 元素</strong>：在 <code>MyHeaderView</code> 类中，添加你需要的 UI 元素，并进行布局。例如，你可以在 Header 中添加一个 <code>UILabel</code> 来显示 Section 的标题。</p></li></ol><h2 id="重用标识符的重要性" tabindex="-1">重用标识符的重要性 <a class="header-anchor" href="#重用标识符的重要性" aria-label="Permalink to &quot;重用标识符的重要性&quot;">​</a></h2><p>重用标识符是 <code>UICollectionView</code> 性能优化的关键。当 <code>CollectionView</code> 需要显示新的 Cell 或 <code>ReusableView</code> 时，它首先会尝试从已存在的、不再显示的 Cell 或 <code>ReusableView</code> 中找到具有相同重用标识符的视图。如果找到了，就直接重用，而不是创建一个新的。这大大减少了内存分配和视图创建的开销。</p><ul><li><strong>确保每个 Cell 和 ReusableView 都有唯一的重用标识符</strong>。</li><li><strong>在 <code>cellForItemAt</code> 和 <code>viewForSupplementaryElementOfKind</code> 方法中，使用正确的重用标识符来获取 Cell 和 ReusableView</strong>。</li></ul><h2 id="示例代码片段" tabindex="-1">示例代码片段 <a class="header-anchor" href="#示例代码片段" aria-label="Permalink to &quot;示例代码片段&quot;">​</a></h2><p>以下是一个简单的示例，展示了如何注册自定义 Cell 类并在 <code>cellForItemAt</code> 方法中使用它：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 ViewController 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    collectionView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyCollectionViewCell.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forCellWithReuseIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> collectionView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collectionView: UICollectionView, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cellForItemAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> indexPath: IndexPath) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UICollectionViewCell {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collectionView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dequeueReusableCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withReuseIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: indexPath) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCollectionViewCell</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 配置 Cell 的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cell.label.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Cell </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(indexPath.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">row</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cell</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义 Cell 类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCollectionViewCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UICollectionViewCell </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGRect) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: frame)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        contentView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentView.bounds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.textAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .center</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    required</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> init?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">coder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NSCoder) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        fatalError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;init(coder:) has not been implemented&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>通过以上步骤，你就可以成功注册自定义 Cell 和 <code>ReusableView</code> 类，并开始在 <code>UICollectionView</code> 中展示你的数据了！🎉 记住，清晰的代码结构和良好的重用策略是构建高性能 <code>CollectionView</code> 的关键。</p>`,15)]))}const E=i(n,[["render",t]]);export{c as __pageData,E as default};
