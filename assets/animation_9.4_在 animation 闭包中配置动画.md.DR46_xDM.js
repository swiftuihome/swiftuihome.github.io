import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"9.4_在 animation 闭包中配置动画","description":"","frontmatter":{},"headers":[],"relativePath":"animation/9.4_在 animation 闭包中配置动画.md","filePath":"animation/9.4_在 animation 闭包中配置动画.md"}'),l={name:"animation/9.4_在 animation 闭包中配置动画.md"};function h(p,s,t,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_9-4-在-animation-闭包中配置动画" tabindex="-1">9.4_在 animation 闭包中配置动画 <a class="header-anchor" href="#_9-4-在-animation-闭包中配置动画" aria-label="Permalink to &quot;9.4_在 animation 闭包中配置动画&quot;">​</a></h1><h2 id="配置动画闭包-🎨" tabindex="-1">配置动画闭包 🎨 <a class="header-anchor" href="#配置动画闭包-🎨" aria-label="Permalink to &quot;配置动画闭包 🎨&quot;">​</a></h2><p>在 SwiftUI 的相位动画师（Phase Animator）中，<code>animation</code> 闭包是动画效果的核心！你可以在这里精确控制每个阶段的动画行为，让你的视图动起来！是不是很激动呢？🎉</p><h2 id="动画配置选项-⚙️" tabindex="-1">动画配置选项 ⚙️ <a class="header-anchor" href="#动画配置选项-⚙️" aria-label="Permalink to &quot;动画配置选项 ⚙️&quot;">​</a></h2><p><code>animation</code> 闭包为你提供了丰富的动画配置选项。你可以使用 SwiftUI 提供的各种动画类型，例如：</p><ul><li><code>.linear</code>: 线性动画，匀速变化。</li><li><code>.easeIn</code>: 缓入动画，开始时速度较慢，逐渐加速。</li><li><code>.easeOut</code>: 缓出动画，结束时速度较慢，逐渐减速。</li><li><code>.easeInOut</code>: 缓入缓出动画，开始和结束时速度较慢，中间加速。</li><li><code>.spring()</code>: 弹簧动画，模拟物理弹簧效果。</li></ul><p>你还可以自定义动画的持续时间、延迟等参数，让动画效果更加符合你的需求。例如，你可以使用 <code>.animation(.easeInOut(duration: 0.5))</code> 创建一个持续 0.5 秒的缓入缓出动画。</p><h2 id="动画阶段与数值关联-🔢" tabindex="-1">动画阶段与数值关联 🔢 <a class="header-anchor" href="#动画阶段与数值关联-🔢" aria-label="Permalink to &quot;动画阶段与数值关联 🔢&quot;">​</a></h2><p><code>animation</code> 闭包接收一个 <code>phase</code> 参数，它代表当前的动画阶段。你可以根据 <code>phase</code> 的值来配置不同的动画效果。例如，你可以让视图在第一个阶段使用线性动画，在第二个阶段使用弹簧动画。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhaseAnimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: myTrigger) { view, phase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: phase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(phase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">linear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个例子中，当 <code>phase</code> 为 0.0 时，视图使用线性动画水平移动 100 个像素；当 <code>phase</code> 为 1.0 时，视图使用弹簧动画。</p><h2 id="实例演示-🎬" tabindex="-1">实例演示 🎬 <a class="header-anchor" href="#实例演示-🎬" aria-label="Permalink to &quot;实例演示 🎬&quot;">​</a></h2><p>让我们通过一个简单的例子来演示如何在 <code>animation</code> 闭包中配置动画。假设我们想要创建一个按钮，点击后按钮会先放大，然后再缩小。</p><ol><li>定义一个状态变量 <code>isTapped</code>，用于控制动画的触发。</li><li>使用 <code>PhaseAnimator</code> 创建一个相位动画，定义两个阶段：0.0 和 1.0。</li><li>在 <code>animation</code> 闭包中，根据 <code>phase</code> 的值来配置按钮的缩放比例。当 <code>phase</code> 为 0.0 时，按钮放大；当 <code>phase</code> 为 1.0 时，按钮缩小。</li><li>使用 <code>.onTapGesture</code> 修饰符来触发动画。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isTapped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isTapped.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isTapped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isTapped)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>通过这个例子，你可以看到 <code>animation</code> 闭包的强大之处。你可以根据不同的动画阶段，配置不同的动画效果，创造出各种各样的动画效果。🚀</p><h2 id="总结-📚" tabindex="-1">总结 📚 <a class="header-anchor" href="#总结-📚" aria-label="Permalink to &quot;总结 📚&quot;">​</a></h2><p><code>animation</code> 闭包是相位动画师（Phase Animator）中非常重要的一个组成部分。通过灵活运用 <code>animation</code> 闭包，你可以创建出令人惊艳的 SwiftUI 动画效果。快去尝试一下吧！💪</p>`,18)]))}const c=i(l,[["render",h]]);export{o as __pageData,c as default};
