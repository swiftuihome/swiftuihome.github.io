import{_ as a,c as s,o as i,ag as t}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"核心参数：id、namespace、properties、anchor","description":"","frontmatter":{},"headers":[],"relativePath":"geometry/1.2_核心参数.md","filePath":"geometry/1.2_核心参数.md"}'),n={name:"geometry/1.2_核心参数.md"};function p(r,e,d,h,l,o){return i(),s("div",null,e[0]||(e[0]=[t('<h1 id="核心参数-id、namespace、properties、anchor" tabindex="-1">核心参数：id、namespace、properties、anchor <a class="header-anchor" href="#核心参数-id、namespace、properties、anchor" aria-label="Permalink to &quot;核心参数：id、namespace、properties、anchor&quot;">​</a></h1><p>在使用 <code>matchedGeometryEffect</code> 时，有几个核心参数需要理解，这些参数是实现视图过渡动画的基础。</p><h2 id="_1-id-参数" tabindex="-1">1. id 参数 <a class="header-anchor" href="#_1-id-参数" aria-label="Permalink to &quot;1. id 参数&quot;">​</a></h2><p><code>id</code> 参数用于标识视图的唯一性。每个视图在动画过程中都需要一个独特的标识符，以便系统能够跟踪视图的变化。你可以使用字符串或其他类型的标识符来定义这个 <code>id</code>。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedId: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;view1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在这个例子中，<code>selectedId</code> 用于标识当前选中的视图。</p><h2 id="_2-namespace-参数" tabindex="-1">2. namespace 参数 <a class="header-anchor" href="#_2-namespace-参数" aria-label="Permalink to &quot;2. namespace 参数&quot;">​</a></h2><p><code>namespace</code> 是用于创建动画命名空间的关键。它允许你在不同的视图之间共享动画效果。通过使用 <code>@Namespace</code>，你可以定义一个命名空间，并在多个视图中引用它。这样，系统就能识别哪些视图是相关的，从而实现平滑的过渡效果。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Namespace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animationNamespace</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-properties-参数" tabindex="-1">3. properties 参数 <a class="header-anchor" href="#_3-properties-参数" aria-label="Permalink to &quot;3. properties 参数&quot;">​</a></h2><p><code>properties</code> 参数用于指定需要同步的几何属性。这些属性包括视图的大小、位置和形状等。通过定义这些属性，<code>matchedGeometryEffect</code> 可以在视图之间创建流畅的过渡。例如，你可以选择同步视图的 <code>frame</code> 和 <code>opacity</code> 属性：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matchedGeometryEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: selectedId, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: animationNamespace, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [.frame, .opacity])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_4-anchor-参数" tabindex="-1">4. anchor 参数 <a class="header-anchor" href="#_4-anchor-参数" aria-label="Permalink to &quot;4. anchor 参数&quot;">​</a></h2><p><code>anchor</code> 参数用于定义视图的锚点。锚点是视图在动画过程中保持不变的参考点。通过设置锚点，你可以控制视图的动画效果。例如，设置锚点为视图的中心点，可以使视图在动画过程中围绕中心点进行缩放或移动。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matchedGeometryEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: selectedId, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: animationNamespace, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">anchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .center)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>通过理解这些核心参数，你可以更好地利用 <code>matchedGeometryEffect</code> 创建流畅的视图过渡动画。记住，<code>id</code> 确保视图的唯一性，<code>namespace</code> 允许视图共享动画，<code>properties</code> 指定需要同步的几何属性，而 <code>anchor</code> 则定义了动画的参考点。掌握这些参数，你将能够在 SwiftUI 中实现更加生动和吸引人的动画效果！🎉✨</p>',17)]))}const m=a(n,[["render",p]]);export{k as __pageData,m as default};
