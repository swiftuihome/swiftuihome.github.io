import{_ as s,c as e,o as n,ag as i}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"在视图中使用@StateObject管理StoreManager","description":"","frontmatter":{},"headers":[],"relativePath":"purchase/8.2_在视图中使用@StateObject管理StoreManager.md","filePath":"purchase/8.2_在视图中使用@StateObject管理StoreManager.md"}'),t={name:"purchase/8.2_在视图中使用@StateObject管理StoreManager.md"};function r(l,a,p,o,c,h){return n(),e("div",null,a[0]||(a[0]=[i(`<h1 id="在视图中使用-stateobject管理storemanager" tabindex="-1">在视图中使用@StateObject管理StoreManager <a class="header-anchor" href="#在视图中使用-stateobject管理storemanager" aria-label="Permalink to &quot;在视图中使用@StateObject管理StoreManager&quot;">​</a></h1><h2 id="声明storemanager" tabindex="-1">声明StoreManager <a class="header-anchor" href="#声明storemanager" aria-label="Permalink to &quot;声明StoreManager&quot;">​</a></h2><p>在SwiftUI视图中管理<code>StoreManager</code>至关重要。你需要使用<code>@StateObject</code>属性包装器。这确保了<code>StoreManager</code>实例的生命周期与视图绑定。</p><p>当视图首次出现时，<code>@StateObject</code>会创建并持有<code>StoreManager</code>实例。即使视图刷新，该实例也会持续存在。这对于保持订阅状态的稳定性至关重要。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> storeManager: StoreManager</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _storeManager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StateObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wrappedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StoreManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 您的视图内容</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;欢迎来到订阅页面！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="初始化storemanager" tabindex="-1">初始化StoreManager <a class="header-anchor" href="#初始化storemanager" aria-label="Permalink to &quot;初始化StoreManager&quot;">​</a></h2><p>初始化<code>StoreManager</code>时，通常在视图的<code>init()</code>方法中进行。你可以直接将<code>StoreManager</code>的一个新实例赋值给<code>@StateObject</code>声明的属性。</p><p>这种方法确保了<code>StoreManager</code>在视图加载时立即可用。它能立即开始监听StoreKit事件。例如，产品信息或交易更新。</p><h2 id="访问产品信息" tabindex="-1">访问产品信息 <a class="header-anchor" href="#访问产品信息" aria-label="Permalink to &quot;访问产品信息&quot;">​</a></h2><p>一旦<code>StoreManager</code>被正确管理，你就可以轻松访问其发布的产品列表。<code>StoreManager</code>通常会有一个属性，比如<code>products</code>。这个属性会包含从StoreKit获取的产品数据。</p><p>你可以使用<code>ForEach</code>循环来动态展示这些产品。这使得你的订阅页面能够灵活地适应不同的产品配置。例如，你可以展示月度、年度订阅选项。</p><ul><li><strong>步骤一</strong>: 确保<code>StoreManager</code>已成功从StoreKit加载产品。</li><li><strong>步骤二</strong>: 在视图中使用<code>storeManager.products</code>数组。</li><li><strong>步骤三</strong>: 利用<code>ForEach</code>遍历产品并创建UI元素。</li></ul><h2 id="响应状态变化" tabindex="-1">响应状态变化 <a class="header-anchor" href="#响应状态变化" aria-label="Permalink to &quot;响应状态变化&quot;">​</a></h2><p><code>@StateObject</code>的强大之处在于它能够自动响应<code>ObservableObject</code>发布的变化。当<code>StoreManager</code>中的订阅状态更新时，例如购买成功或恢复购买，视图会自动刷新。</p><p>这为用户提供了无缝的体验。他们会立即看到订阅状态的变化。例如，购买按钮可能会变成“已订阅”状态。</p><p>这种响应式行为是SwiftUI的核心优势之一。它极大地简化了状态管理。你无需手动刷新UI。</p><h2 id="最佳实践与性能" tabindex="-1">最佳实践与性能 <a class="header-anchor" href="#最佳实践与性能" aria-label="Permalink to &quot;最佳实践与性能&quot;">​</a></h2><p>使用<code>@StateObject</code>是管理复杂对象生命周期的最佳实践。它避免了不必要的重新创建。这对于性能优化至关重要。</p><p>想象一下，如果每次视图更新都重新创建<code>StoreManager</code>，那将是巨大的资源浪费。<code>@StateObject</code>确保了<code>StoreManager</code>只创建一次。它在视图的整个生命周期中都保持活跃。</p><ul><li><strong>避免</strong>: 在<code>body</code>中直接创建<code>StoreManager</code>实例。</li><li><strong>推荐</strong>: 在<code>init()</code>中使用<code>_storeManager = StateObject(wrappedValue: StoreManager())</code>。</li><li><strong>好处</strong>: 提升应用性能和响应速度。🚀</li></ul><p>这种方法确保了你的订阅逻辑始终保持一致。它也让你的代码更易于维护。大约有90%的开发者会选择这种方式来管理共享状态。这证明了它的高效性。</p>`,21)]))}const g=s(t,[["render",r]]);export{k as __pageData,g as default};
