import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"7.4_安全区域（Safe Area）的使用","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/7.4_安全区域（Safe Area）的使用.md","filePath":"uikit/basics/7.4_安全区域（Safe Area）的使用.md"}'),l={name:"uikit/basics/7.4_安全区域（Safe Area）的使用.md"};function t(r,s,h,p,k,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="_7-4-安全区域-safe-area-的使用" tabindex="-1">7.4_安全区域（Safe Area）的使用 <a class="header-anchor" href="#_7-4-安全区域-safe-area-的使用" aria-label="Permalink to &quot;7.4_安全区域（Safe Area）的使用&quot;">​</a></h1><blockquote><p>安全区域是iOS 11引入的一个概念，它代表了视图中可见且未被系统界面遮挡的部分。 你可以把它想象成一个“安全地带”，确保你的内容不会被状态栏、导航栏、标签栏或者iPhone X上的“刘海”遮挡。 让我们一起探索如何使用它吧！🎉</p></blockquote><h2 id="什么是安全区域-🤔" tabindex="-1">什么是安全区域？🤔 <a class="header-anchor" href="#什么是安全区域-🤔" aria-label="Permalink to &quot;什么是安全区域？🤔&quot;">​</a></h2><p>安全区域是一个<code>UILayoutGuide</code>对象，它定义了视图中内容可以安全显示而不被遮挡的区域。 简单来说，它告诉你哪些区域是“安全”的，可以放置你的UI元素。 这样，你的应用在各种设备上都能看起来很棒！👍</p><ul><li>安全区域考虑了设备上的各种遮挡物。</li><li>它会自动调整以适应不同的屏幕尺寸和方向。</li><li>使用安全区域可以避免手动计算偏移量。</li></ul><h2 id="如何访问安全区域-🧐" tabindex="-1">如何访问安全区域？ 🧐 <a class="header-anchor" href="#如何访问安全区域-🧐" aria-label="Permalink to &quot;如何访问安全区域？ 🧐&quot;">​</a></h2><p>每个<code>UIView</code>都有一个<code>safeAreaLayoutGuide</code>属性，你可以通过它来访问安全区域。 这个属性返回一个<code>UILayoutGuide</code>对象，你可以像使用其他布局约束一样使用它。 例如，你可以将一个视图的顶部约束到安全区域的顶部，以确保它不会被状态栏遮挡。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Swift代码示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.topAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.leadingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.trailingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.bottomAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.bottomAnchor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="使用安全区域的优势-🤩" tabindex="-1">使用安全区域的优势 🤩 <a class="header-anchor" href="#使用安全区域的优势-🤩" aria-label="Permalink to &quot;使用安全区域的优势 🤩&quot;">​</a></h2><p>使用安全区域有很多好处。 首先，它可以简化你的布局代码，因为你不需要手动计算偏移量。 其次，它可以确保你的应用在各种设备上都能看起来一致。 最后，它可以提高用户体验，因为你的内容不会被遮挡。</p><ol><li><strong>简化布局代码</strong>：减少手动计算。</li><li><strong>一致的用户界面</strong>：在不同设备上保持一致。</li><li><strong>提高用户体验</strong>：避免内容被遮挡。</li></ol><h2 id="安全区域的实际应用-📱" tabindex="-1">安全区域的实际应用 📱 <a class="header-anchor" href="#安全区域的实际应用-📱" aria-label="Permalink to &quot;安全区域的实际应用 📱&quot;">​</a></h2><p>假设你正在创建一个音乐播放器应用。 你可以使用安全区域来确保播放控制按钮不会被iPhone X上的“刘海”遮挡。 你可以将播放控制按钮的底部约束到安全区域的底部，这样它们就会始终显示在屏幕的可见区域内。</p><ul><li><strong>音乐播放器</strong>：确保播放控制按钮可见。</li><li><strong>新闻应用</strong>：避免文本被状态栏遮挡。</li><li><strong>游戏应用</strong>：确保游戏界面元素不被遮挡。</li></ul><h2 id="总结-💯" tabindex="-1">总结 💯 <a class="header-anchor" href="#总结-💯" aria-label="Permalink to &quot;总结 💯&quot;">​</a></h2><p>安全区域是一个强大的工具，可以帮助你创建适应性强的用户界面。 通过使用安全区域，你可以确保你的应用在各种设备上都能看起来很棒，并且提供最佳的用户体验。 记住，安全区域是你的朋友！🤝 让我们一起创造出色的iOS应用吧！9</p>`,16)]))}const E=a(l,[["render",t]]);export{c as __pageData,E as default};
