import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"创建符合ViewModifier协议的结构体","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/5.1_创建符合`ViewModifier`协议的结构体.md","filePath":"refactor/5.1_创建符合`ViewModifier`协议的结构体.md"}'),t={name:"refactor/5.1_创建符合`ViewModifier`协议的结构体.md"};function l(p,s,r,h,d,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="创建符合viewmodifier协议的结构体" tabindex="-1">创建符合<code>ViewModifier</code>协议的结构体 <a class="header-anchor" href="#创建符合viewmodifier协议的结构体" aria-label="Permalink to &quot;创建符合\`ViewModifier\`协议的结构体&quot;">​</a></h1><h2 id="开启自定义修饰符之旅-🚀" tabindex="-1">开启自定义修饰符之旅 🚀 <a class="header-anchor" href="#开启自定义修饰符之旅-🚀" aria-label="Permalink to &quot;开启自定义修饰符之旅 🚀&quot;">​</a></h2><p>创建符合<code>ViewModifier</code>协议的结构体是自定义视图修饰符的第一步，也是最关键的一步。这个协议定义了如何修改视图的外观或行为。它让你的代码变得超级模块化和可重用！</p><h2 id="结构体与协议的完美结合" tabindex="-1">结构体与协议的完美结合 <a class="header-anchor" href="#结构体与协议的完美结合" aria-label="Permalink to &quot;结构体与协议的完美结合&quot;">​</a></h2><p>要开始，你需要定义一个遵循<code>ViewModifier</code>协议的Swift结构体。这个结构体将包含你想要应用于视图的逻辑。想象一下，你正在为你的UI元素打造一个专属的“魔法棒”！✨</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTitleModifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModifier </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 你的修饰逻辑将在这里实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个结构体是你的自定义修饰符的蓝图。它将封装所有复杂的样式和行为，让你的视图代码保持整洁。</p><h2 id="为什么选择结构体" tabindex="-1">为什么选择结构体？ <a class="header-anchor" href="#为什么选择结构体" aria-label="Permalink to &quot;为什么选择结构体？&quot;">​</a></h2><p>使用结构体来创建修饰符有几个显著的优势。首先，结构体是值类型，这意味着它们在传递时会被复制，从而避免了意外的副作用。这让你的修饰符更加安全和可预测。</p><ul><li><strong>值语义</strong>: 确保每次应用修饰符时都是一个独立的实例。</li><li><strong>性能优化</strong>: Swift编译器可以对值类型进行更多优化。</li><li><strong>线程安全</strong>: 避免了多线程环境下的竞态条件。</li></ul><p>大约有70%的SwiftUI修饰符都是通过结构体实现的，这充分证明了其有效性。</p><h2 id="协议要求-body-content-方法" tabindex="-1">协议要求：<code>body(content:)</code> 方法 <a class="header-anchor" href="#协议要求-body-content-方法" aria-label="Permalink to &quot;协议要求：\`body(content:)\` 方法&quot;">​</a></h2><p><code>ViewModifier</code>协议要求你实现一个名为<code>body(content:)</code>的方法。这个方法接收一个<code>Content</code>类型的参数，它代表了被修饰的原始视图。你在这个方法中返回一个新的视图，其中包含了你应用的所有修改。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTitleModifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModifier </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Content) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.yellow)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cornerRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这个例子中，我们对原始视图应用了字体、颜色、内边距、背景和圆角。是不是很简单？你可以在这里尽情发挥创意，将任何你想要的样式或行为添加到视图上。这就像给你的视图穿上了一件定制的华丽外套！🧥</p><p>通过这种方式，你可以将复杂的视图逻辑抽象出来，让你的UI代码更加清晰和易于维护。这绝对是提升你SwiftUI开发效率的利器！🚀</p>`,16)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
