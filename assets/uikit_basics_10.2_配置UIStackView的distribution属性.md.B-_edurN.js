import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"10.2_配置UIStackView的distribution属性","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/10.2_配置UIStackView的distribution属性.md","filePath":"uikit/basics/10.2_配置UIStackView的distribution属性.md"}'),l={name:"uikit/basics/10.2_配置UIStackView的distribution属性.md"};function e(p,s,k,h,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_10-2-配置uistackview的distribution属性" tabindex="-1">10.2_配置UIStackView的distribution属性 <a class="header-anchor" href="#_10-2-配置uistackview的distribution属性" aria-label="Permalink to &quot;10.2_配置UIStackView的distribution属性&quot;">​</a></h1><blockquote><p>UIStackView 是一个强大的布局容器，可以帮助你轻松实现各种复杂的界面布局。其中，<code>distribution</code> 属性是 UIStackView 最重要的属性之一，它决定了 UIStackView 如何在其可用空间内排列和调整子视图的大小。掌握 <code>distribution</code> 属性的配置，你就能更好地控制 UIStackView 的布局行为，创建出美观且适应性强的用户界面。🎉</p></blockquote><h2 id="distribution-属性的五种模式" tabindex="-1">Distribution 属性的五种模式 <a class="header-anchor" href="#distribution-属性的五种模式" aria-label="Permalink to &quot;Distribution 属性的五种模式&quot;">​</a></h2><p><code>distribution</code> 属性有五种不同的模式，每种模式都定义了 UIStackView 如何分配空间给它的子视图。让我们逐一了解它们：</p><ol><li><p><strong><code>Fill</code></strong>: 这种模式会尽可能地填充 UIStackView 的可用空间。如果子视图的总固有内容大小小于 UIStackView 的大小，UIStackView 会拉伸子视图以填充剩余空间。如果子视图的总固有内容大小大于 UIStackView 的大小，UIStackView 会压缩子视图以适应可用空间。</p></li><li><p><strong><code>FillEqually</code></strong>: 这种模式会强制所有子视图具有相同的大小，并均匀地填充 UIStackView 的可用空间。无论子视图的固有内容大小如何，它们都会被调整为相同的大小。例如，如果你有三个按钮，它们都会占据 UIStackView 宽度的三分之一。</p></li><li><p><strong><code>FillProportionally</code></strong>: 这种模式会根据子视图的固有内容大小，按比例分配空间。固有内容大小较大的子视图会获得更多的空间，而固有内容大小较小的子视图会获得较少的空间。这种模式非常适合于需要根据内容动态调整大小的视图。</p></li><li><p><strong><code>EqualSpacing</code></strong>: 这种模式会保持子视图之间相等的间距，并根据需要调整子视图的大小以适应可用空间。子视图的固有内容大小会被尊重，但它们之间的间距始终保持一致。</p></li><li><p><strong><code>EqualCentering</code></strong>: 这种模式会确保子视图的中心点之间具有相等的间距。与 <code>EqualSpacing</code> 类似，子视图的固有内容大小会被尊重，但它们的中心点之间的距离始终保持一致。</p></li></ol><h2 id="如何选择合适的-distribution-模式" tabindex="-1">如何选择合适的 Distribution 模式？ <a class="header-anchor" href="#如何选择合适的-distribution-模式" aria-label="Permalink to &quot;如何选择合适的 Distribution 模式？&quot;">​</a></h2><p>选择哪种 <code>distribution</code> 模式取决于你的具体布局需求。以下是一些建议：</p><ul><li>如果你希望子视图尽可能地填充可用空间，并且不关心它们的大小是否一致，那么 <code>Fill</code> 模式是一个不错的选择。</li><li>如果你希望所有子视图具有相同的大小，并且均匀地分布在 UIStackView 中，那么 <code>FillEqually</code> 模式非常适合。</li><li>如果你希望根据子视图的内容大小按比例分配空间，那么 <code>FillProportionally</code> 模式是最佳选择。</li><li>如果你希望保持子视图之间相等的间距，并且允许子视图根据其内容大小进行调整，那么 <code>EqualSpacing</code> 或 <code>EqualCentering</code> 模式会很有用。</li></ul><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><p>让我们通过一个简单的代码示例来演示如何配置 UIStackView 的 <code>distribution</code> 属性：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stackView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIStackView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.axis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .horizontal </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置为水平方向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.distribution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .fillEqually </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置为 FillEqually 模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alignment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .center </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置为居中对齐</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加子视图</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button1.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .red</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button2.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .blue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button3.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button3.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .green</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArrangedSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArrangedSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stackView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArrangedSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(button3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在这个例子中，我们创建了一个水平方向的 UIStackView，并将其 <code>distribution</code> 属性设置为 <code>FillEqually</code>。这意味着三个按钮将具有相同的大小，并均匀地分布在 UIStackView 中。🎉</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过灵活运用 UIStackView 的 <code>distribution</code> 属性，你可以轻松创建出各种各样的界面布局。希望这篇文章能够帮助你更好地理解和使用 UIStackView，让你的 iOS 开发之旅更加顺畅！🚀</p>`,14)]))}const c=i(l,[["render",e]]);export{E as __pageData,c as default};
