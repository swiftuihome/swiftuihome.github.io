import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"创建基本按钮结构","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/3.1_创建基本按钮结构.md","filePath":"custom_views/3.1_创建基本按钮结构.md"}'),t={name:"custom_views/3.1_创建基本按钮结构.md"};function l(p,s,h,r,k,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="创建基本按钮结构" tabindex="-1">创建基本按钮结构 <a class="header-anchor" href="#创建基本按钮结构" aria-label="Permalink to &quot;创建基本按钮结构&quot;">​</a></h1><h2 id="按钮的基石-text和image" tabindex="-1">按钮的基石：Text和Image <a class="header-anchor" href="#按钮的基石-text和image" aria-label="Permalink to &quot;按钮的基石：Text和Image&quot;">​</a></h2><p>在SwiftUI中，构建一个按钮的起点非常直观。你可以使用<code>Text</code>视图来显示文本标签，或者使用<code>Image</code>视图来展示图标。 🚀 想象一下，一个简单的“点击我”按钮，它就是由一个<code>Text</code>视图构成的。</p><p>你也可以将它们组合起来，创造出更丰富的视觉效果。例如，一个带有图标和文字的按钮，能够更清晰地传达其功能。</p><h2 id="组合视图-hstack和vstack的魔力" tabindex="-1">组合视图：HStack和VStack的魔力 <a class="header-anchor" href="#组合视图-hstack和vstack的魔力" aria-label="Permalink to &quot;组合视图：HStack和VStack的魔力&quot;">​</a></h2><p>为了将多个视图（比如一个图标和一个文本标签）组合在一起，<code>HStack</code>和<code>VStack</code>是你的得力助手。 <code>HStack</code>将视图水平排列，而<code>VStack</code>则垂直排列。</p><ul><li><strong>HStack</strong>: 非常适合并排显示图标和文本。</li><li><strong>VStack</strong>: 当你需要将文本分多行显示，或者在图标下方添加描述时，它会派上用场。</li></ul><p>通过巧妙地运用它们，你可以构建出各种布局。 🎨 超过85%的自定义按钮都受益于这两种布局容器。</p><h2 id="按钮的交互性-button视图" tabindex="-1">按钮的交互性：Button视图 <a class="header-anchor" href="#按钮的交互性-button视图" aria-label="Permalink to &quot;按钮的交互性：Button视图&quot;">​</a></h2><p>SwiftUI的<code>Button</code>视图是实现交互性的核心。 它接受两个主要参数：一个动作闭包和一个标签视图。 动作闭包定义了按钮被点击时会发生什么。</p><p>标签视图则是按钮的外观，它可以是任何<code>View</code>类型。 这意味着你可以将前面创建的<code>Text</code>、<code>Image</code>或<code>HStack</code>/<code>VStack</code>组合直接放入按钮的标签中。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里处理按钮点击事件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;按钮被点击了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我的自定义按钮&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.white)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cornerRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这段代码展示了一个带有蓝色背景和圆角的文本按钮。 🌟</p><h2 id="样式化-修饰符的应用" tabindex="-1">样式化：修饰符的应用 <a class="header-anchor" href="#样式化-修饰符的应用" aria-label="Permalink to &quot;样式化：修饰符的应用&quot;">​</a></h2><p>修饰符是SwiftUI中改变视图外观和行为的强大工具。 你可以链式调用它们来定制按钮的每一个细节。</p><p>例如，你可以调整字体、颜色、填充、背景和圆角。 🎨 这种链式调用方式让代码非常易读且富有表现力。</p><ul><li><code>.font(.title)</code>: 设置文本字体大小。</li><li><code>.foregroundColor(.white)</code>: 设置文本颜色为白色。</li><li><code>.padding()</code>: 为按钮内容添加内边距。</li><li><code>.background(Color.blue)</code>: 设置按钮背景颜色。</li><li><code>.cornerRadius(10)</code>: 使按钮边缘圆润。</li></ul><p>通过这些修饰符，你可以轻松地将一个普通的按钮变成一个视觉上吸引人的组件。 🚀 事实上，大约90%的视觉定制都是通过修饰符完成的。</p>`,18)]))}const E=a(t,[["render",l]]);export{c as __pageData,E as default};
