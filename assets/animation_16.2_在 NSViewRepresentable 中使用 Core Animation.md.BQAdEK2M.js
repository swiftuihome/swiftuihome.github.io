import{_ as s,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"16.2_在 NSViewRepresentable 中使用 Core Animation","description":"","frontmatter":{},"headers":[],"relativePath":"animation/16.2_在 NSViewRepresentable 中使用 Core Animation.md","filePath":"animation/16.2_在 NSViewRepresentable 中使用 Core Animation.md"}'),l={name:"animation/16.2_在 NSViewRepresentable 中使用 Core Animation.md"};function t(p,i,h,k,r,o){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_16-2-在-nsviewrepresentable-中使用-core-animation" tabindex="-1">16.2_在 NSViewRepresentable 中使用 Core Animation <a class="header-anchor" href="#_16-2-在-nsviewrepresentable-中使用-core-animation" aria-label="Permalink to &quot;16.2_在 NSViewRepresentable 中使用 Core Animation&quot;">​</a></h1><p>让我们一起探索如何在 <code>NSViewRepresentable</code> 中使用 Core Animation，为你的 SwiftUI 视图注入强大的动画效果！🚀</p><h2 id="拥抱-core-animation-的力量" tabindex="-1">拥抱 Core Animation 的力量 <a class="header-anchor" href="#拥抱-core-animation-的力量" aria-label="Permalink to &quot;拥抱 Core Animation 的力量&quot;">​</a></h2><p>Core Animation 是一个强大的动画引擎，它直接在渲染层工作，性能卓越。在 SwiftUI 中，通过 <code>NSViewRepresentable</code>，你可以将 Core Animation 的能力带入你的 Mac 应用。这为你提供了更精细的控制，尤其是在处理复杂的动画场景时。</p><ul><li><strong>性能优势</strong>: Core Animation 允许硬件加速，从而实现流畅的动画效果。</li><li><strong>精细控制</strong>: 你可以精确控制动画的各个方面，例如时间曲线、关键帧等。</li><li><strong>现有代码集成</strong>: 轻松地将现有的基于 Core Animation 的代码集成到 SwiftUI 项目中。</li></ul><h2 id="创建你的-nsviewrepresentable" tabindex="-1">创建你的 NSViewRepresentable <a class="header-anchor" href="#创建你的-nsviewrepresentable" aria-label="Permalink to &quot;创建你的 NSViewRepresentable&quot;">​</a></h2><p>首先，你需要创建一个符合 <code>NSViewRepresentable</code> 协议的结构体。这个结构体负责创建和配置 <code>NSView</code>，以及处理 SwiftUI 和 AppKit 之间的交互。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnimatedView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSViewRepresentable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeNSView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSView {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NSView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在这里配置你的 Core Animation 图层</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateNSView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nsView: NSView, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在这里更新你的视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="配置-core-animation-图层" tabindex="-1">配置 Core Animation 图层 <a class="header-anchor" href="#配置-core-animation-图层" aria-label="Permalink to &quot;配置 Core Animation 图层&quot;">​</a></h2><p>在 <code>makeNSView</code> 方法中，你可以创建和配置 <code>CALayer</code>，并将其添加到 <code>NSView</code> 的图层树中。这为你提供了完全的控制权，可以创建各种自定义动画。</p><ol><li>创建 <code>CALayer</code> 实例。</li><li>设置图层的属性，例如 <code>backgroundColor</code>、<code>bounds</code> 等。</li><li>创建 <code>CABasicAnimation</code> 或 <code>CAKeyframeAnimation</code> 实例，并配置动画属性。</li><li>将动画添加到图层。</li></ol><p>例如，创建一个简单的背景颜色动画：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CALayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">layer.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSColor.red.cgColor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">layer.bounds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.wantsLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 确保视图使用图层</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CABasicAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;backgroundColor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animation.toValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSColor.blue.cgColor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animation.duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animation.repeatCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">infinity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">layer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animation, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;backgroundColorAnimation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="swiftui-与-core-animation-的桥梁-🌉" tabindex="-1">SwiftUI 与 Core Animation 的桥梁 🌉 <a class="header-anchor" href="#swiftui-与-core-animation-的桥梁-🌉" aria-label="Permalink to &quot;SwiftUI 与 Core Animation 的桥梁 🌉&quot;">​</a></h2><p><code>NSViewRepresentable</code> 充当了 SwiftUI 和 Core Animation 之间的桥梁。通过 <code>updateNSView</code> 方法，你可以响应 SwiftUI 的状态变化，并相应地更新 Core Animation 图层。这使得你可以创建动态的、响应式的动画效果。</p><ul><li>使用 <code>@Binding</code> 属性来接收 SwiftUI 的状态。</li><li>在 <code>updateNSView</code> 中，根据状态变化更新图层的属性或动画。</li><li>确保在主线程上更新 UI，以避免线程安全问题。</li></ul><p>现在，你已经掌握了在 <code>NSViewRepresentable</code> 中使用 Core Animation 的基本技巧。尽情发挥你的创造力，为你的 SwiftUI 应用添加令人惊艳的动画效果吧！🎉</p>`,17)]))}const c=s(l,[["render",t]]);export{E as __pageData,c as default};
