import{_ as c,c as o,o as a,ag as d}from"./chunks/framework.ymCRTBvy.js";const u=JSON.parse('{"title":"2.2_UIScreen：物理屏幕信息","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/2.2_UIScreen：物理屏幕信息.md","filePath":"swift/uikit/basics/2.2_UIScreen：物理屏幕信息.md"}'),i={name:"swift/uikit/basics/2.2_UIScreen：物理屏幕信息.md"};function r(n,e,t,s,l,p){return a(),o("div",null,e[0]||(e[0]=[d('<h1 id="_2-2-uiscreen-物理屏幕信息" tabindex="-1">2.2_UIScreen：物理屏幕信息 <a class="header-anchor" href="#_2-2-uiscreen-物理屏幕信息" aria-label="Permalink to &quot;2.2_UIScreen：物理屏幕信息&quot;">​</a></h1><h2 id="认识uiscreen-你的app的画布-📱" tabindex="-1">认识UIScreen：你的App的画布 📱 <a class="header-anchor" href="#认识uiscreen-你的app的画布-📱" aria-label="Permalink to &quot;认识UIScreen：你的App的画布 📱&quot;">​</a></h2><p><code>UIScreen</code> 是一个非常强大的类，它代表了设备物理屏幕的属性。 想象一下，你的App就像一幅画，而 <code>UIScreen</code> 就是你作画的画布。 了解它能让你更好地适配各种设备，提供卓越的用户体验！ 🚀</p><h2 id="屏幕尺寸与坐标系-📏" tabindex="-1">屏幕尺寸与坐标系 📏 <a class="header-anchor" href="#屏幕尺寸与坐标系-📏" aria-label="Permalink to &quot;屏幕尺寸与坐标系 📏&quot;">​</a></h2><p>每个iOS设备都有其独特的屏幕尺寸。 <code>UIScreen</code> 的 <code>bounds</code> 属性提供了屏幕的整体尺寸和原点。</p><ul><li><code>bounds.size.width</code>：屏幕的宽度。</li><li><code>bounds.size.height</code>：屏幕的高度。</li></ul><p>这些值是以点（points）为单位的，而不是像素（pixels）。 例如，iPhone 13 Pro Max 的逻辑尺寸是 428x926 点。 掌握这些数据，你就能精确布局你的UI元素。</p><h2 id="比例因子-点与像素的桥梁-🌉" tabindex="-1">比例因子：点与像素的桥梁 🌉 <a class="header-anchor" href="#比例因子-点与像素的桥梁-🌉" aria-label="Permalink to &quot;比例因子：点与像素的桥梁 🌉&quot;">​</a></h2><p><code>UIScreen</code> 的 <code>scale</code> 属性揭示了点与像素之间的关系。 它表示一个点包含多少个物理像素。</p><ul><li><code>scale</code> 为 1.0 意味着 1 点 = 1 像素（例如，旧款非 Retina 屏幕）。</li><li><code>scale</code> 为 2.0 意味着 1 点 = 2x2 像素（例如，Retina 屏幕）。</li><li><code>scale</code> 为 3.0 意味着 1 点 = 3x3 像素（例如，Retina HD 屏幕）。</li></ul><p>目前，大多数新设备都拥有 2.0 或 3.0 的 <code>scale</code> 值。 了解 <code>scale</code> 对于处理图像资源至关重要，确保你的图片在不同分辨率下都能清晰显示。 🖼️</p><h2 id="亮度与显示模式-💡" tabindex="-1">亮度与显示模式 💡 <a class="header-anchor" href="#亮度与显示模式-💡" aria-label="Permalink to &quot;亮度与显示模式 💡&quot;">​</a></h2><p><code>UIScreen</code> 还提供了关于屏幕亮度的信息，你可以通过 <code>brightness</code> 属性获取当前屏幕的亮度级别（0.0 到 1.0）。 此外，<code>UIScreen</code> 还能让你了解设备支持的显示模式。</p><ul><li><code>availableModes</code>：一个包含所有可用 <code>UIScreenMode</code> 对象的数组。</li><li><code>currentMode</code>：当前正在使用的 <code>UIScreenMode</code>。</li></ul><p>这些模式定义了屏幕的像素尺寸和像素宽高比。 尽管在日常开发中你可能不常直接修改这些模式，但了解它们的存在能让你对屏幕显示有更全面的认识。</p><h2 id="屏幕方向与通知-🔄" tabindex="-1">屏幕方向与通知 🔄 <a class="header-anchor" href="#屏幕方向与通知-🔄" aria-label="Permalink to &quot;屏幕方向与通知 🔄&quot;">​</a></h2><p>虽然 <code>UIScreen</code> 本身不直接管理设备的方向，但它与设备方向的变化紧密相关。 当设备旋转时，<code>UIScreen</code> 的 <code>bounds</code> 会相应调整。 你可以通过监听 <code>UIDevice.orientationDidChangeNotification</code> 来响应设备方向的变化，并更新你的UI布局。</p><p>例如，当用户将手机从竖屏旋转到横屏时，<code>UIScreen.main.bounds.size.width</code> 和 <code>UIScreen.main.bounds.size.height</code> 的值会互换。 灵活应对这些变化，你的App就能在任何方向下都表现出色！ 🌟</p><h2 id="总结-掌握uiscreen-构建完美app-🎯" tabindex="-1">总结：掌握UIScreen，构建完美App！ 🎯 <a class="header-anchor" href="#总结-掌握uiscreen-构建完美app-🎯" aria-label="Permalink to &quot;总结：掌握UIScreen，构建完美App！ 🎯&quot;">​</a></h2><p><code>UIScreen</code> 是你构建出色iOS App的基石之一。 通过理解它的属性，如 <code>bounds</code>、<code>scale</code> 和 <code>brightness</code>，你将能够：</p><ol><li><strong>精确布局</strong>：根据屏幕尺寸调整UI元素。</li><li><strong>优化图像</strong>：为不同 <code>scale</code> 值提供合适的图片资源。</li><li><strong>响应式设计</strong>：在设备方向变化时优雅地调整布局。</li></ol><p>掌握 <code>UIScreen</code> 的知识，你就能为用户提供无缝且视觉上令人愉悦的体验。 继续探索，你的App一定会大放异彩！ ✨</p>',22)]))}const _=c(i,[["render",r]]);export{u as __pageData,_ as default};
