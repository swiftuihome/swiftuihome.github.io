import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const d=JSON.parse('{"title":"使用Auto_Layout约束内容视图的尺寸","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/8.2_使用Auto_Layout约束内容视图的尺寸.md","filePath":"swift/uikit/advanced/8.2_使用Auto_Layout约束内容视图的尺寸.md"}'),t={name:"swift/uikit/advanced/8.2_使用Auto_Layout约束内容视图的尺寸.md"};function l(o,s,p,h,r,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用auto-layout约束内容视图的尺寸" tabindex="-1">使用Auto_Layout约束内容视图的尺寸 <a class="header-anchor" href="#使用auto-layout约束内容视图的尺寸" aria-label="Permalink to &quot;使用Auto_Layout约束内容视图的尺寸&quot;">​</a></h1><h2 id="理解内容视图与auto-layout-🚀" tabindex="-1">理解内容视图与Auto Layout 🚀 <a class="header-anchor" href="#理解内容视图与auto-layout-🚀" aria-label="Permalink to &quot;理解内容视图与Auto Layout 🚀&quot;">​</a></h2><p>在<code>UIScrollView</code>中，内容视图（<code>contentView</code>）是承载所有可滚动内容的容器。它本身并不直接显示，而是作为其他UI元素的父视图。为了让<code>UIScrollView</code>知道如何滚动，我们必须明确地告诉它内容视图的尺寸。Auto Layout在这里扮演着至关重要的角色，它能帮助我们精确定义内容视图的大小。</p><h2 id="核心约束-确定内容尺寸-📏" tabindex="-1">核心约束：确定内容尺寸 📏 <a class="header-anchor" href="#核心约束-确定内容尺寸-📏" aria-label="Permalink to &quot;核心约束：确定内容尺寸 📏&quot;">​</a></h2><p>要让<code>UIScrollView</code>正常工作，内容视图的尺寸必须通过Auto Layout约束来确定。这意味着内容视图的宽度和高度不能是模糊的。通常，我们会将内容视图的边缘与<code>UIScrollView</code>的边缘对齐，并为其内部的子视图设置约束，从而间接决定内容视图的尺寸。</p><ul><li><strong>水平方向的约束</strong>： <ul><li>将内容视图的<code>leading</code>和<code>trailing</code>锚点约束到<code>UIScrollView</code>的<code>leading</code>和<code>trailing</code>锚点。</li><li>这确保了内容视图的宽度与滚动视图的宽度一致，除非你希望内容可以水平滚动。</li></ul></li><li><strong>垂直方向的约束</strong>： <ul><li>将内容视图的<code>top</code>和<code>bottom</code>锚点约束到<code>UIScrollView</code>的<code>top</code>和<code>bottom</code>锚点。</li><li>内容视图的高度将由其内部子视图的累积高度决定，从而实现垂直滚动。</li></ul></li></ul><h2 id="实践-设置内容视图约束-🛠️" tabindex="-1">实践：设置内容视图约束 🛠️ <a class="header-anchor" href="#实践-设置内容视图约束-🛠️" aria-label="Permalink to &quot;实践：设置内容视图约束 🛠️&quot;">​</a></h2><p>让我们通过一个具体的例子来理解如何设置这些约束。假设你有一个<code>UIScrollView</code>，并且在其中添加了一个<code>contentView</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scrollView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIScrollView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scrollView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scrollView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contentView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scrollView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contentView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 滚动视图约束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.topAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.leadingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.trailingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.bottomAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.safeAreaLayoutGuide.bottomAnchor),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 内容视图与滚动视图的边缘对齐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentView.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scrollView.contentLayoutGuide.topAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scrollView.contentLayoutGuide.leadingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentView.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scrollView.contentLayoutGuide.trailingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentView.bottomAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scrollView.contentLayoutGuide.bottomAnchor),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 关键：内容视图的宽度与滚动视图的frameLayoutGuide宽度一致</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentView.widthAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scrollView.frameLayoutGuide.widthAnchor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这里，<code>contentView.widthAnchor.constraint(equalTo: scrollView.frameLayoutGuide.widthAnchor)</code>是实现垂直滚动的关键。它告诉Auto Layout内容视图的宽度应该与滚动视图的可见宽度相同。</p><h2 id="动态内容高度的实现-✨" tabindex="-1">动态内容高度的实现 ✨ <a class="header-anchor" href="#动态内容高度的实现-✨" aria-label="Permalink to &quot;动态内容高度的实现 ✨&quot;">​</a></h2><p>一旦内容视图的宽度被固定，其高度将由其内部子视图的Auto Layout约束自动计算。例如，如果你在<code>contentView</code>中添加了多个<code>UILabel</code>或<code>UIImageView</code>，并为它们设置了垂直方向的约束（例如，一个视图的底部约束到下一个视图的顶部），那么<code>contentView</code>的高度就会根据这些子视图的总高度自动增长。</p><ul><li><strong>步骤一</strong>：将所有子视图添加到<code>contentView</code>中。</li><li><strong>步骤二</strong>：为每个子视图设置其相对于<code>contentView</code>的顶部、左侧和右侧约束。</li><li><strong>步骤三</strong>：确保所有子视图之间都有明确的垂直间距约束，并且最底部的子视图有一个明确的底部约束到<code>contentView</code>的底部。</li></ul><p>通过这种方式，<code>UIScrollView</code>就能根据<code>contentView</code>的固有内容大小来确定其<code>contentSize</code>，从而实现平滑的滚动体验。</p><h2 id="避免常见的auto-layout陷阱-⚠️" tabindex="-1">避免常见的Auto Layout陷阱 ⚠️ <a class="header-anchor" href="#避免常见的auto-layout陷阱-⚠️" aria-label="Permalink to &quot;避免常见的Auto Layout陷阱 ⚠️&quot;">​</a></h2><p>在使用Auto Layout约束内容视图时，有几个常见的错误需要避免：</p><ol><li><strong>未设置内容视图的宽度或高度</strong>：如果内容视图的尺寸不明确，<code>UIScrollView</code>将无法计算<code>contentSize</code>，导致滚动失效。</li><li><strong>混淆<code>contentLayoutGuide</code>和<code>frameLayoutGuide</code></strong>： <ul><li><code>contentLayoutGuide</code>定义了<code>UIScrollView</code>内容区域的布局。</li><li><code>frameLayoutGuide</code>定义了<code>UIScrollView</code>本身的可见区域（frame）的布局。</li><li>在约束内容视图时，通常会将其边缘约束到<code>contentLayoutGuide</code>，而将其宽度或高度约束到<code>frameLayoutGuide</code>，以实现特定的滚动方向。</li></ul></li><li><strong>子视图约束不完整</strong>：如果<code>contentView</code>内部的子视图没有完整的约束链，导致<code>contentView</code>的高度无法确定，滚动也会出现问题。</li></ol><p>通过遵循这些最佳实践，你将能够轻松地使用Auto Layout来管理<code>UIScrollView</code>的内容视图，创造出令人惊叹的动态滚动界面！🥳</p>`,18)]))}const E=i(t,[["render",l]]);export{d as __pageData,E as default};
