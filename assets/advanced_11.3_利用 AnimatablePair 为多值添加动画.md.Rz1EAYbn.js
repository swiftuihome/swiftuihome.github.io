import{_ as a,c as i,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"探索 AnimatablePair 的奥秘","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/11.3_利用 AnimatablePair 为多值添加动画.md","filePath":"advanced/11.3_利用 AnimatablePair 为多值添加动画.md"}'),e={name:"advanced/11.3_利用 AnimatablePair 为多值添加动画.md"};function t(p,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="探索-animatablepair-的奥秘" tabindex="-1">探索 AnimatablePair 的奥秘 <a class="header-anchor" href="#探索-animatablepair-的奥秘" aria-label="Permalink to &quot;探索 AnimatablePair 的奥秘&quot;">​</a></h1><blockquote><p>在 SwiftUI 动画的世界里，<code>AnimatablePair</code> 就像一位魔术师，能让你同时操控两个动画值，创造出更炫酷的效果！它遵循 <code>Animatable</code> 协议，允许你将两个符合 <code>Animatable</code> 协议的值组合在一起，实现同步动画。这简直是动画进阶的必备技能！</p></blockquote><h2 id="animatablepair-的基本用法" tabindex="-1"><code>AnimatablePair</code> 的基本用法 <a class="header-anchor" href="#animatablepair-的基本用法" aria-label="Permalink to &quot;\`AnimatablePair\` 的基本用法&quot;">​</a></h2><p><code>AnimatablePair</code> 的核心在于它能将两个独立的动画值捆绑在一起。例如，你可以同时改变一个视图的宽度和高度，或者同时调整颜色和透明度。想象一下，让一个按钮在变大的同时，颜色也逐渐改变，是不是很酷炫？😎</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAnimatableData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animatable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pair: AnimatablePair&lt;CGFloat, Color&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animatableData: AnimatablePair&lt;CGFloat, Color&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { pair }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { pair </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="实战演练-同步改变大小和颜色-🎨" tabindex="-1">实战演练：同步改变大小和颜色 🎨 <a class="header-anchor" href="#实战演练-同步改变大小和颜色-🎨" aria-label="Permalink to &quot;实战演练：同步改变大小和颜色 🎨&quot;">​</a></h2><p>让我们通过一个例子来深入理解。假设你想创建一个视图，在动画过程中同时改变其大小和颜色。你可以使用 <code>AnimatablePair</code> 来实现这个效果。首先，定义一个包含 <code>AnimatablePair</code> 的结构体，然后利用 <code>onTapGesture</code> 触发动画。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnimatedView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animationData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyAnimatableData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnimatablePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, .red))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animationData.animatableData.second)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: animationData.animatableData.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: animationData.animatableData.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onTapGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    animationData.pair </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AnimatablePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, .blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="进阶技巧-自定义动画效果-✨" tabindex="-1">进阶技巧：自定义动画效果 ✨ <a class="header-anchor" href="#进阶技巧-自定义动画效果-✨" aria-label="Permalink to &quot;进阶技巧：自定义动画效果 ✨&quot;">​</a></h2><p><code>AnimatablePair</code> 不仅限于简单的数值和颜色动画。你可以结合其他 SwiftUI 动画特性，创造出更复杂的动画效果。例如，你可以使用 <code>GeometryEffect</code> 来改变视图的形状，或者使用 <code>AnimatableModifier</code> 来添加自定义的动画修饰符。</p><ul><li><strong>组合动画</strong>: 将 <code>AnimatablePair</code> 与其他动画技术结合，创造更丰富的效果。</li><li><strong>自定义插值</strong>: 通过自定义插值逻辑，实现更精细的动画控制。</li><li><strong>多值同步</strong>: 利用 <code>AnimatablePair</code>，轻松实现多个属性的同步动画。</li></ul><p>掌握 <code>AnimatablePair</code>，你就能在 SwiftUI 动画的道路上更进一步，创造出令人惊艳的视觉效果！🎉 记住，实践是最好的老师，多尝试、多探索，你一定能成为动画大师！</p>`,12)]))}const o=a(e,[["render",t]]);export{c as __pageData,o as default};
