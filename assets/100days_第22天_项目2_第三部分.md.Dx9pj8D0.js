import{_ as t,c as l,o as e,ag as i}from"./chunks/framework.ymCRTBvy.js";const u=JSON.parse('{"title":"第22天 项目2 第三部分","description":"","frontmatter":{},"headers":[],"relativePath":"100days/第22天_项目2_第三部分.md","filePath":"100days/第22天_项目2_第三部分.md"}'),r={name:"100days/第22天_项目2_第三部分.md"};function a(n,o,s,d,c,p){return e(),l("div",null,o[0]||(o[0]=[i('<h1 id="第22天-项目2-第三部分" tabindex="-1">第22天 项目2 第三部分 <a class="header-anchor" href="#第22天-项目2-第三部分" aria-label="Permalink to &quot;第22天 项目2 第三部分&quot;">​</a></h1><p>在本项目中，你学习了图像、栈、渐变、按钮等知识，还接触了各种各样的新修饰符，这些都能帮助你将 UI 设计变为现实。</p><p>所有这些技能在你自己的 SwiftUI 应用中<em>一定会</em>派上用场 —— 不是可能会，而是<em>肯定会</em>。正如苏斯博士所说：“你读的书越多，知道的事情就越多；你学的东西越多，能去的地方就越多。” 而这正是本课程的目的：让你具备运用 SwiftUI 畅行无阻的能力，打造任何能助你实现目标的应用。</p><p>在进入下一个主题之前，我们需要暂停并回顾一下：你是否完全理解了所学的所有内容？这意味着还有一次测试，同时也有三个编程挑战，确保你能尽可能多地自己编写代码。</p><p><strong>今天，你需要完成项目 2 的总结章节，完成复习内容，然后攻克所有三个挑战。</strong></p><ul><li>猜国旗项目总结</li><li>猜国旗项目练习题</li></ul><p>完成这些后，告诉其他人：你已经完成了第二个 SwiftUI 项目，通过了测试，甚至还通过自己编写代码对项目进行了扩展。</p><p>你应该为自己取得的成就感到自豪 —— 做得好！</p><h2 id="猜国旗项目总结" tabindex="-1">猜国旗项目总结 <a class="header-anchor" href="#猜国旗项目总结" aria-label="Permalink to &quot;猜国旗项目总结&quot;">​</a></h2><p><em>作者：Paul Hudson 2022 年 12 月 29 日</em></p><p>又一个 SwiftUI 应用完成了，其中包含了许多重要的新技巧。在你未来制作的几乎每个项目中，都会用到 <code>VStack</code>、<code>HStack</code> 和 <code>ZStack</code>，而且你会发现，通过将它们组合在一起，就能快速构建复杂的布局。</p><p>很多人一开始会觉得 SwiftUI 显示警告框的方式有点奇怪：先创建警告框，设置触发条件，然后在之后的某个时刻触发该条件，这似乎比直接让警告框显示要麻烦得多。但就像我之前说的，视图必须始终能反映程序的状态，这就决定了我们不能随心所欲地显示警告框。</p><h2 id="回顾所学内容" tabindex="-1">回顾所学内容 <a class="header-anchor" href="#回顾所学内容" aria-label="Permalink to &quot;回顾所学内容&quot;">​</a></h2><p>任何人都能看完一个教程，但要记住所学的知识，还需要付出实际的努力。我的职责是确保你能从这些教程中收获尽可能多的知识，请完成后面的练习题，帮助你检验自己的学习成果。</p><h2 id="挑战" tabindex="-1">挑战 <a class="header-anchor" href="#挑战" aria-label="Permalink to &quot;挑战&quot;">​</a></h2><p>学习编程最好的方法之一就是尽可能多地自己编写代码，因此这里有三种扩展该应用的方式，帮助你确保完全理解其中的原理：</p><ol><li>添加一个 <code>@State</code> 属性来存储用户的得分，当用户答对或答错时修改得分，然后在警告框和得分标签中显示得分。</li><li>当用户选择了错误的国旗时，在警告框消息中告知他们错误所在 —— 例如，“错了！那是法国的国旗。”</li><li>让游戏只显示 8 道题，答题结束后，用户会看到一个最终警告框，显示对其得分的评价，并且可以重新开始游戏。</li></ol><p><strong>注意：最后一个挑战比前两个需要多一些思考。一个不错的切入点是添加第二个 <code>alert()</code> 修饰符，让它监听另一个布尔值属性，然后将警告框的按钮与 <code>reset()</code> 方法关联，使游戏恢复到初始状态。</strong></p><h2 id="猜国旗项目练习题" tabindex="-1">猜国旗项目练习题 <a class="header-anchor" href="#猜国旗项目练习题" aria-label="Permalink to &quot;猜国旗项目练习题&quot;">​</a></h2><p>第 1/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：<code>ZStack</code> 允许我们将视图分层叠加。</strong></li><li><strong>选项 2：装饰性图像总会被屏幕阅读器读取。</strong></li></ul><p>第 2/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：每个 <code>VStack</code> 都必须包含一个 <code>Spacer</code> 视图。</strong></li><li><strong>选项 2：语义化颜色是根据用途而非色调命名的颜色。</strong></li></ul><p>第 3/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：可以使用颜色数组或色标数组创建渐变。</strong></li><li><strong>选项 2：“圆锥渐变” 是径向渐变的另一种说法。</strong></li></ul><p>第 4/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：在 SwiftUI 中，颜色属于视图。</strong></li><li><strong>选项 2：我们可以从视图的 body 中返回 <code>nil</code>。</strong></li></ul><p>第 5/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：一个视图最多只能应用三个修饰符。</strong></li><li><strong>选项 2：<code>frame()</code> 修饰符允许我们为视图指定精确的宽度和高度。</strong></li></ul><p>第 6/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：SwiftUI 允许我们创建具有特定颜色和半径的阴影。</strong></li><li><strong>选项 2：可以使用 SwiftUI 的 <code>Capsule</code> 形状创建圆角矩形。</strong></li></ul><p>第 7/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：安全区域不包含主屏幕指示器占用的空间。</strong></li><li><strong>选项 2：渐变绝对不能在安全区域外使用。</strong></li></ul><p>第 8/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：按钮可以是纯文本形式，也可以包含图像，还可以包含其他类型的视图。</strong></li><li><strong>选项 2：一个栈中最多只能包含 10 个视图。</strong></li></ul><p>第 9/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：必须为按钮指定一个闭包，用于处理点击事件。</strong></li><li><strong>选项 2：苹果的符号图标集合名为 Wingdings。</strong></li></ul><p>第 10/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：<code>Int.random(in:)</code> 方法会从我们指定的范围内选择一个随机整数。</strong></li><li><strong>选项 2：数组不能与 <code>@State</code> 一起使用。</strong></li></ul><p>第 11/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：可以通过调用 <code>show()</code> 方法来显示警告框。</strong></li><li><strong>选项 2：可以将 <code>HStack</code> 嵌入到 <code>VStack</code> 中。</strong></li></ul><p>第 12/12 题：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：可以通过调用 <code>randomize()</code> 方法来打乱数组。</strong></li><li><strong>选项 2：材质（Materials）允许我们为视图背景应用毛玻璃风格的模糊效果。</strong></li></ul>',43)]))}const _=t(r,[["render",a]]);export{u as __pageData,_ as default};
