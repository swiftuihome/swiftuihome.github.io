import{_ as e,c as i,o as a,ag as l}from"./chunks/framework.ymCRTBvy.js";const b=JSON.parse('{"title":"理解 @Published 属性包装器","description":"","frontmatter":{},"headers":[],"relativePath":"core/4.4_理解 @Published 属性包装器.md","filePath":"core/4.4_理解 @Published 属性包装器.md"}'),t={name:"core/4.4_理解 @Published 属性包装器.md"};function n(d,s,h,r,p,o){return a(),i("div",null,s[0]||(s[0]=[l(`<h1 id="理解-published-属性包装器" tabindex="-1">理解 @Published 属性包装器 <a class="header-anchor" href="#理解-published-属性包装器" aria-label="Permalink to &quot;理解 @Published 属性包装器&quot;">​</a></h1><h2 id="published-的核心概念" tabindex="-1">@Published 的核心概念 <a class="header-anchor" href="#published-的核心概念" aria-label="Permalink to &quot;@Published 的核心概念&quot;">​</a></h2><p><code>@Published</code> 是 SwiftUI 中一个非常强大的属性包装器，它让你的属性能够自动发布变化。当一个被 <code>@Published</code> 标记的属性值发生改变时，任何订阅了它的视图都会自动刷新。这极大地简化了数据流管理！ 🚀</p><p>想象一下，你有一个数据模型，其中包含用户名称。如果这个名称改变了，所有显示这个名称的视图都会立即更新，无需手动干预。这真是太棒了，对不对？</p><h2 id="如何使用-published" tabindex="-1">如何使用 @Published <a class="header-anchor" href="#如何使用-published" aria-label="Permalink to &quot;如何使用 @Published&quot;">​</a></h2><p>要使用 <code>@Published</code>，你需要在一个遵循 <code>ObservableObject</code> 协议的类中使用它。这个类通常代表你的数据模型或视图模型。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>username</code> 和 <code>score</code> 都是可发布的属性。这意味着当 <code>username</code> 或 <code>score</code> 的值发生变化时，<code>UserSettings</code> 对象会通知所有观察者。</p><h2 id="published-的工作原理" tabindex="-1">@Published 的工作原理 <a class="header-anchor" href="#published-的工作原理" aria-label="Permalink to &quot;@Published 的工作原理&quot;">​</a></h2><p>当你在 <code>ObservableObject</code> 中声明一个 <code>@Published</code> 属性时，SwiftUI 会在幕后做一些神奇的事情。它会为这个属性添加一个发布者（Publisher）。</p><ul><li><strong>发布者</strong>: 负责在属性值改变时发出通知。</li><li><strong>订阅者</strong>: 任何使用 <code>@ObservedObject</code> 或 <code>@StateObject</code> 包装器来观察这个 <code>ObservableObject</code> 的视图，都会成为其属性变化的订阅者。</li></ul><p>这种机制确保了数据和 UI 之间的同步，让你的应用响应迅速且高效。大约 70% 的 SwiftUI 应用程序都受益于这种数据绑定模式。</p><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>@Published</code> 在许多场景下都非常有用，尤其是在构建复杂的用户界面时。</p><ul><li><strong>用户偏好设置</strong>: 当用户更改设置时，立即更新所有相关 UI。</li><li><strong>实时数据更新</strong>: 例如，股票价格或游戏分数。</li><li><strong>表单输入验证</strong>: 当用户输入数据时，实时显示验证结果。</li></ul><p>通过 <code>@Published</code>，你可以轻松构建出响应式、动态的 SwiftUI 应用程序。它让数据流变得清晰且易于管理，极大地提升了开发效率！ 🥳</p>`,16)]))}const u=e(t,[["render",n]]);export{b as __pageData,u as default};
