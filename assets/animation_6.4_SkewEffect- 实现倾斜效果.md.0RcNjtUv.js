import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"6.4_SkewEffect- 实现倾斜效果","description":"","frontmatter":{},"headers":[],"relativePath":"animation/6.4_SkewEffect- 实现倾斜效果.md","filePath":"animation/6.4_SkewEffect- 实现倾斜效果.md"}'),l={name:"animation/6.4_SkewEffect- 实现倾斜效果.md"};function t(k,s,p,h,r,E){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_6-4-skeweffect-实现倾斜效果" tabindex="-1">6.4_SkewEffect- 实现倾斜效果 <a class="header-anchor" href="#_6-4-skeweffect-实现倾斜效果" aria-label="Permalink to &quot;6.4_SkewEffect- 实现倾斜效果&quot;">​</a></h1><h2 id="理解倾斜效果" tabindex="-1">理解倾斜效果 <a class="header-anchor" href="#理解倾斜效果" aria-label="Permalink to &quot;理解倾斜效果&quot;">​</a></h2><p>倾斜效果，或称“Skew”，是一种强大的视觉变换。它能让你的视图沿着X轴或Y轴倾斜，创造出独特的透视感。想象一下，一个矩形如何变成平行四边形！✨</p><p>这种效果在UI设计中非常流行。你可以用它来模拟3D深度，或者为元素添加动感。例如，按钮在点击时轻微倾斜，会显得更加生动。</p><h2 id="实现-skeweffect" tabindex="-1">实现 SkewEffect <a class="header-anchor" href="#实现-skeweffect" aria-label="Permalink to &quot;实现 SkewEffect&quot;">​</a></h2><p>要实现倾斜效果，你需要创建一个遵循 <code>GeometryEffect</code> 协议的结构体。这个协议要求你实现 <code>effectValue(size:)</code> 方法。这个方法是核心，它定义了视图如何被变换。</p><p>在 <code>effectValue(size:)</code> 中，你将使用 <code>CGAffineTransform</code> 来应用倾斜。<code>CGAffineTransform</code> 是一个强大的工具，用于2D图形的仿射变换。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SkewEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GeometryEffect </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> skewAngle: CGFloat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animatableData: CGFloat {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { skewAngle }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { skewAngle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> effectValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGSize) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProjectionTransform {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ProjectionTransform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGAffineTransform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(skewAngle), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上面的代码中，<code>b: tan(skewAngle)</code> 是关键。它控制了X轴方向的倾斜量。<code>skewAngle</code> 越大，倾斜度就越大。</p><h2 id="应用倾斜动画" tabindex="-1">应用倾斜动画 <a class="header-anchor" href="#应用倾斜动画" aria-label="Permalink to &quot;应用倾斜动画&quot;">​</a></h2><p>一旦你定义了 <code>SkewEffect</code>，就可以将其应用到任何 <code>View</code> 上。使用 <code>.modifier()</code> 或 <code>. skewEffect()</code> 扩展方法。</p><p>例如，你可以让一个文本视图在轻触时倾斜：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;倾斜我！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">modifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SkewEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">skewAngle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isSkewed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.easeInOut, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isSkewed)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onTapGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isSkewed.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里，<code>isSkewed</code> 状态变量控制着倾斜角度。当 <code>isSkewed</code> 改变时，SwiftUI 会自动为 <code>skewAngle</code> 的变化添加动画。</p><h2 id="创意应用场景" tabindex="-1">创意应用场景 <a class="header-anchor" href="#创意应用场景" aria-label="Permalink to &quot;创意应用场景&quot;">​</a></h2><p>倾斜效果的应用非常广泛，可以极大地提升用户体验。</p><ul><li><strong>卡片翻转动画</strong>：在卡片翻转时加入轻微的倾斜，增加真实感。</li><li><strong>文字特效</strong>：为标题或特殊文字添加倾斜，使其更具视觉冲击力。</li><li><strong>视差滚动</strong>：结合滚动视图，创建元素倾斜的视差效果，带来深度感。</li></ul><p>通过巧妙地运用 <code>SkewEffect</code>，你的SwiftUI动画将变得更加生动和引人入胜。快去尝试吧！🚀</p>`,18)]))}const o=i(l,[["render",t]]);export{c as __pageData,o as default};
