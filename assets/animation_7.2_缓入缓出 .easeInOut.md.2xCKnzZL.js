import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"7.2_缓入缓出 .easeInOut","description":"","frontmatter":{},"headers":[],"relativePath":"animation/7.2_缓入缓出 .easeInOut.md","filePath":"animation/7.2_缓入缓出 .easeInOut.md"}'),t={name:"animation/7.2_缓入缓出 .easeInOut.md"};function l(h,s,r,o,p,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="_7-2-缓入缓出-easeinout" tabindex="-1">7.2_缓入缓出 .easeInOut <a class="header-anchor" href="#_7-2-缓入缓出-easeinout" aria-label="Permalink to &quot;7.2_缓入缓出 .easeInOut&quot;">​</a></h1><h2 id="探索缓入缓出动画" tabindex="-1">探索缓入缓出动画 <a class="header-anchor" href="#探索缓入缓出动画" aria-label="Permalink to &quot;探索缓入缓出动画&quot;">​</a></h2><p><code>easeInOut</code> 动画曲线是 SwiftUI 中非常常用的一种内置动画效果。 它能让你的动画在开始时缓慢加速，在中间达到最快速度，然后在结束时再次缓慢减速。 这种平滑的过渡效果让用户体验更加自然和愉悦。 🚀</p><h2 id="为什么选择-easeinout" tabindex="-1">为什么选择 easeInOut？ <a class="header-anchor" href="#为什么选择-easeinout" aria-label="Permalink to &quot;为什么选择 easeInOut？&quot;">​</a></h2><p><code>easeInOut</code> 曲线模拟了现实世界中物体运动的自然规律。 想象一下汽车启动和停止的过程，它不会瞬间加速或减速。 这种曲线提供了非常流畅的视觉感受。</p><ul><li><strong>提升用户体验</strong>: 动画看起来更专业，更具吸引力。</li><li><strong>减少视觉冲击</strong>: 避免了突然的动画变化，让眼睛更舒适。</li><li><strong>广泛适用性</strong>: 几乎适用于所有需要平滑过渡的动画场景。</li></ul><h2 id="实现-easeinout-动画" tabindex="-1">实现 easeInOut 动画 <a class="header-anchor" href="#实现-easeinout-动画" aria-label="Permalink to &quot;实现 easeInOut 动画&quot;">​</a></h2><p>在 SwiftUI 中使用 <code>easeInOut</code> 曲线非常简单。 你只需要在 <code>animation()</code> 修饰符中指定它。 比如，你可以让一个视图的尺寸变化使用这种动画。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好 SwiftUI&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isScaled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.easeInOut, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isScaled)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，当 <code>isScaled</code> 状态改变时，文本的缩放会以 <code>easeInOut</code> 曲线进行动画。 这种方式让你的界面动起来，而且非常优雅。 ✨</p><h2 id="缓入缓出曲线的优势" tabindex="-1">缓入缓出曲线的优势 <a class="header-anchor" href="#缓入缓出曲线的优势" aria-label="Permalink to &quot;缓入缓出曲线的优势&quot;">​</a></h2><p><code>easeInOut</code> 曲线在许多动画场景中都表现出色。 比如，当一个模态视图弹出或消失时，使用 <code>easeInOut</code> 可以让过渡更加柔和。 统计数据显示，超过 70% 的用户更喜欢带有平滑动画的应用界面。</p><ul><li><strong>平滑过渡</strong>: 动画开始和结束时都有缓冲。</li><li><strong>自然感受</strong>: 模拟真实世界的物理运动。</li><li><strong>易于使用</strong>: 无需复杂配置，直接调用即可。</li></ul><p>你可以尝试将 <code>easeInOut</code> 应用于视图的透明度、位置或旋转等属性。 你会发现它能显著提升动画的质量。 别犹豫，现在就开始尝试吧！ 🤩</p>`,14)]))}const u=a(t,[["render",l]]);export{c as __pageData,u as default};
