import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"处理加载与错误状态","description":"","frontmatter":{},"headers":[],"relativePath":"core/14.4_处理加载与错误状态.md","filePath":"core/14.4_处理加载与错误状态.md"}'),l={name:"core/14.4_处理加载与错误状态.md"};function p(t,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="处理加载与错误状态" tabindex="-1">处理加载与错误状态 <a class="header-anchor" href="#处理加载与错误状态" aria-label="Permalink to &quot;处理加载与错误状态&quot;">​</a></h1><blockquote><p>处理加载与错误状态是构建健壮 SwiftUI 应用的关键环节。让我们一起探索如何在异步操作中优雅地处理这些状态，确保用户体验流畅且信息丰富！🚀</p></blockquote><h2 id="加载状态的处理" tabindex="-1">加载状态的处理 <a class="header-anchor" href="#加载状态的处理" aria-label="Permalink to &quot;加载状态的处理&quot;">​</a></h2><p>在进行网络请求或其他耗时操作时，向用户展示加载状态至关重要。你可以使用 <code>@State</code> 变量来跟踪加载状态，并根据状态更新 UI。例如，显示一个 <code>ProgressView</code> 指示器。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLoading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当开始加载数据时，将 <code>isLoading</code> 设置为 <code>true</code>，加载完成后设置为 <code>false</code>。这能有效防止用户在数据加载期间进行不必要的操作，提升应用的响应性。</p><ul><li>使用 <code>ProgressView</code> 直观地展示加载进度。</li><li>禁用用户交互，避免在加载期间产生冲突。</li><li>提供加载取消选项，允许用户中断耗时操作。</li></ul><h2 id="错误状态的处理" tabindex="-1">错误状态的处理 <a class="header-anchor" href="#错误状态的处理" aria-label="Permalink to &quot;错误状态的处理&quot;">​</a></h2><p>网络请求或数据处理过程中难免会遇到错误。妥善处理这些错误，并向用户提供有意义的反馈，是提升应用质量的关键。你可以使用 <code>Result</code> 类型来封装异步操作的结果，并根据结果展示不同的 UI。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> invalidURL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> networkError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> decodingError</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用 <code>Result</code> 类型可以清晰地表示操作成功或失败，并携带相应的数据或错误信息。这使得错误处理更加结构化和易于维护。</p><ul><li>使用 <code>Alert</code> 或自定义视图显示错误信息。</li><li>提供重试选项，允许用户重新尝试失败的操作。</li><li>记录错误日志，方便调试和问题排查。</li></ul><h2 id="结合使用加载与错误状态" tabindex="-1">结合使用加载与错误状态 <a class="header-anchor" href="#结合使用加载与错误状态" aria-label="Permalink to &quot;结合使用加载与错误状态&quot;">​</a></h2><p>将加载状态和错误状态结合起来，可以构建更加完善的用户体验。例如，在加载数据时显示 <code>ProgressView</code>，加载失败时显示错误信息，加载成功时显示数据。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLoading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error: FetchError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isLoading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isLoading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 加载数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .networkError</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>通过这种方式，你可以清晰地向用户展示应用的状态，并提供必要的反馈和操作选项。这有助于提升用户满意度和信任度。🎉</p><ol><li>清晰地展示加载状态和错误信息。</li><li>提供重试和取消选项。</li><li>记录错误日志，方便调试。</li></ol><p>记住，良好的错误处理和加载状态管理是优秀应用的重要标志。希望这些技巧能帮助你构建更加健壮和用户友好的 SwiftUI 应用！💪</p>`,18)]))}const g=i(l,[["render",p]]);export{o as __pageData,g as default};
