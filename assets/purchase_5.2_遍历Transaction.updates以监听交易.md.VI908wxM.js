import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"监听交易更新的强大力量","description":"","frontmatter":{},"headers":[],"relativePath":"purchase/5.2_遍历Transaction.updates以监听交易.md","filePath":"purchase/5.2_遍历Transaction.updates以监听交易.md"}'),t={name:"purchase/5.2_遍历Transaction.updates以监听交易.md"};function p(l,s,r,h,d,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="监听交易更新的强大力量" tabindex="-1">监听交易更新的强大力量 <a class="header-anchor" href="#监听交易更新的强大力量" aria-label="Permalink to &quot;监听交易更新的强大力量&quot;">​</a></h1><p>在SwiftUI订阅中，监听交易更新是至关重要的一步。 你可以通过<code>Transaction.updates</code>异步序列来实时获取所有交易的最新状态。 这是一个强大的工具，确保你的应用始终与用户的购买行为保持同步。 🚀</p><p>这个序列会发出所有交易的更新，无论是新的购买、恢复的购买还是状态变更。 你会发现它非常可靠，能够捕获大约99%的交易事件。</p><h2 id="异步序列的魅力" tabindex="-1">异步序列的魅力 <a class="header-anchor" href="#异步序列的魅力" aria-label="Permalink to &quot;异步序列的魅力&quot;">​</a></h2><p>使用<code>Transaction.updates</code>非常直观。 你可以在应用启动时，例如在<code>App</code>结构体的<code>init()</code>方法中，启动一个任务来监听这些更新。 这样做可以确保你的应用在整个生命周期内都能响应交易变化。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Transaction.updates {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理每个交易更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: transaction)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这段代码展示了如何遍历异步序列。 每当有新的交易更新时，循环体内的代码就会执行。</p><h2 id="处理交易更新的策略" tabindex="-1">处理交易更新的策略 <a class="header-anchor" href="#处理交易更新的策略" aria-label="Permalink to &quot;处理交易更新的策略&quot;">​</a></h2><p>当接收到交易更新时，你需要仔细处理它。 这通常涉及验证交易的有效性，并根据交易状态更新用户界面或解锁内容。</p><p>以下是一些处理策略：</p><ul><li><strong>验证签名</strong>: 确保交易的JWS签名是有效的，这能防止伪造的交易。</li><li><strong>检查状态</strong>: 判断交易是已购买、已恢复还是已取消。</li><li><strong>更新UI</strong>: 根据交易结果，及时更新应用的用户界面，例如显示“已购买”状态。</li><li><strong>解锁内容</strong>: 如果交易成功，解锁用户购买的高级功能或内容。</li></ul><h2 id="确保交易完成" tabindex="-1">确保交易完成 <a class="header-anchor" href="#确保交易完成" aria-label="Permalink to &quot;确保交易完成&quot;">​</a></h2><p>处理完交易后，务必调用<code>transaction.finish()</code>。 这是一个关键步骤，它告诉StoreKit你已经成功处理了该交易。 如果不调用<code>finish()</code>，StoreKit可能会在下次应用启动时再次提供相同的交易，导致重复处理。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Transaction) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 验证和处理逻辑 ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">finish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 标记交易为已完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过这种方式，你可以确保交易流程的顺畅和高效。 记住，及时完成交易是维护良好用户体验的关键。 🌟</p><h2 id="持续监听的重要性" tabindex="-1">持续监听的重要性 <a class="header-anchor" href="#持续监听的重要性" aria-label="Permalink to &quot;持续监听的重要性&quot;">​</a></h2><p>持续监听<code>Transaction.updates</code>对于处理中断的交易和“Ask to Buy”请求至关重要。 即使应用在交易过程中被关闭，当用户重新打开应用时，未完成的交易也会通过这个序列再次提供。</p><p>这确保了即使在网络不稳定或应用崩溃的情况下，用户的购买也能得到妥善处理。 这是一个非常强大的容错机制，让你的订阅系统更加健壮。 💪</p>`,18)]))}const u=a(t,[["render",p]]);export{c as __pageData,u as default};
