import{_ as i,c as e,o as a,ag as l}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"使用.gridCellUnsizedAxes()忽略单元格尺寸计算","description":"","frontmatter":{},"headers":[],"relativePath":"grid/9.2_使用.gridCellUnsizedAxes()忽略单元格尺寸计算.md","filePath":"grid/9.2_使用.gridCellUnsizedAxes()忽略单元格尺寸计算.md"}'),n={name:"grid/9.2_使用.gridCellUnsizedAxes()忽略单元格尺寸计算.md"};function d(t,s,r,p,h,k){return a(),e("div",null,s[0]||(s[0]=[l(`<h1 id="使用-gridcellunsizedaxes-忽略单元格尺寸计算" tabindex="-1">使用.gridCellUnsizedAxes()忽略单元格尺寸计算 <a class="header-anchor" href="#使用-gridcellunsizedaxes-忽略单元格尺寸计算" aria-label="Permalink to &quot;使用.gridCellUnsizedAxes()忽略单元格尺寸计算&quot;">​</a></h1><h2 id="探索-gridcellunsizedaxes-的奥秘-🚀" tabindex="-1">探索 <code>.gridCellUnsizedAxes()</code> 的奥秘 🚀 <a class="header-anchor" href="#探索-gridcellunsizedaxes-的奥秘-🚀" aria-label="Permalink to &quot;探索 \`.gridCellUnsizedAxes()\` 的奥秘 🚀&quot;">​</a></h2><p>在 SwiftUI 的 <code>Grid</code> 布局中，<code>.gridCellUnsizedAxes()</code> 就像一位魔术师，能让你忽略特定轴上的单元格尺寸计算。这意味着你可以更灵活地控制网格中元素的大小，让布局更具动态性。准备好释放你的创造力了吗？🎉</p><h2 id="了解-gridcellunsizedaxes-的作用" tabindex="-1">了解 <code>.gridCellUnsizedAxes()</code> 的作用 <a class="header-anchor" href="#了解-gridcellunsizedaxes-的作用" aria-label="Permalink to &quot;了解 \`.gridCellUnsizedAxes()\` 的作用&quot;">​</a></h2><p><code>.gridCellUnsizedAxes()</code> 允许你指定哪些轴（水平或垂直）不参与单元格尺寸的自动计算。这在某些情况下非常有用，例如，当你想让一个视图根据自身内容调整大小，而不是被网格单元格的固定尺寸所限制时。</p><ul><li><strong>灵活性</strong>: 允许视图根据内容自适应大小。</li><li><strong>动态布局</strong>: 创建更具响应性的网格布局。</li><li><strong>自定义</strong>: 精确控制哪些轴参与尺寸计算。</li></ul><h2 id="如何使用-gridcellunsizedaxes" tabindex="-1">如何使用 <code>.gridCellUnsizedAxes()</code> <a class="header-anchor" href="#如何使用-gridcellunsizedaxes" aria-label="Permalink to &quot;如何使用 \`.gridCellUnsizedAxes()\`&quot;">​</a></h2><p>使用 <code>.gridCellUnsizedAxes()</code> 非常简单。你只需要将它添加到你想要忽略尺寸计算的视图上。例如，如果你想让一个视图在水平方向上自由调整大小，你可以这样写：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这段文字的宽度可以根据内容自由伸缩&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gridCellUnsizedAxes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.horizontal)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以下是一些使用 <code>.gridCellUnsizedAxes()</code> 的常见场景：</p><ol><li><strong>文本内容自适应</strong>: 让文本视图根据内容自动调整宽度或高度。</li><li><strong>图片尺寸控制</strong>: 允许图片根据自身比例显示，而不是被强制拉伸或压缩。</li><li><strong>复杂布局</strong>: 在需要更精细控制单元格尺寸的情况下，与其他布局修饰符结合使用。</li></ol><h2 id="gridcellunsizedaxes-的实际应用-💡" tabindex="-1"><code>.gridCellUnsizedAxes()</code> 的实际应用 💡 <a class="header-anchor" href="#gridcellunsizedaxes-的实际应用-💡" aria-label="Permalink to &quot;\`.gridCellUnsizedAxes()\` 的实际应用 💡&quot;">​</a></h2><p>让我们看一个实际的例子。假设你正在创建一个照片画廊，其中一些照片是横向的，而另一些是纵向的。你希望每张照片都能以其原始比例显示，而不是被强制适应网格单元格的尺寸。这时，<code>.gridCellUnsizedAxes()</code> 就能派上用场了！</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;landscape_photo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aspectRatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contentMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .fit)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gridCellUnsizedAxes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.horizontal) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 水平方向自适应</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;portrait_photo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aspectRatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contentMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .fit)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gridCellUnsizedAxes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.vertical) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 垂直方向自适应</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过使用 <code>.gridCellUnsizedAxes()</code>，你可以确保每张照片都能以最佳方式显示，而不会失真。这不仅提升了用户体验，也让你的布局更加专业和美观。✨</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li><code>.gridCellUnsizedAxes()</code> 只影响指定轴上的尺寸计算。</li><li>你可以同时忽略水平和垂直方向的尺寸计算：<code>.gridCellUnsizedAxes([.horizontal, .vertical])</code>。</li><li>合理使用 <code>.gridCellUnsizedAxes()</code> 可以创建更灵活和动态的网格布局，但过度使用可能会导致布局混乱。</li></ul><p>掌握了 <code>.gridCellUnsizedAxes()</code>，你就能更好地控制 SwiftUI <code>Grid</code> 布局，创造出令人惊艳的用户界面！继续探索，你会发现更多惊喜！🌈</p>`,18)]))}const g=i(n,[["render",d]]);export{c as __pageData,g as default};
