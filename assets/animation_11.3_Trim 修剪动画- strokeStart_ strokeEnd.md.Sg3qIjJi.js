import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"11.3_Trim 修剪动画- strokeStart, strokeEnd","description":"","frontmatter":{},"headers":[],"relativePath":"animation/11.3_Trim 修剪动画- strokeStart, strokeEnd.md","filePath":"animation/11.3_Trim 修剪动画- strokeStart, strokeEnd.md"}'),e={name:"animation/11.3_Trim 修剪动画- strokeStart, strokeEnd.md"};function l(r,s,k,p,h,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_11-3-trim-修剪动画-strokestart-strokeend" tabindex="-1">11.3_Trim 修剪动画- strokeStart, strokeEnd <a class="header-anchor" href="#_11-3-trim-修剪动画-strokestart-strokeend" aria-label="Permalink to &quot;11.3_Trim 修剪动画- strokeStart, strokeEnd&quot;">​</a></h1><p>在 SwiftUI 动画中，<code>strokeStart</code> 和 <code>strokeEnd</code> 是两个非常强大的属性，它们允许你通过控制形状描边的起始和结束位置，来创建引人入胜的动画效果。让我们一起探索如何使用它们吧！🚀</p><h2 id="理解-strokestart-和-strokeend" tabindex="-1">理解 <code>strokeStart</code> 和 <code>strokeEnd</code> <a class="header-anchor" href="#理解-strokestart-和-strokeend" aria-label="Permalink to &quot;理解 \`strokeStart\` 和 \`strokeEnd\`&quot;">​</a></h2><p><code>strokeStart</code> 和 <code>strokeEnd</code> 都是 <code>Animatable</code> 属性，取值范围是 0 到 1。</p><ul><li><code>strokeStart</code>：定义描边开始的位置，0 表示描边的起点，1 表示描边的终点。</li><li><code>strokeEnd</code>：定义描边结束的位置，0 表示描边的起点，1 表示描边的终点。</li></ul><p>通过动画改变这两个属性，你可以实现描边逐渐显示或消失的效果。是不是很酷？😎</p><h2 id="创建基本的-trim-动画" tabindex="-1">创建基本的 Trim 动画 <a class="header-anchor" href="#创建基本的-trim-动画" aria-label="Permalink to &quot;创建基本的 Trim 动画&quot;">​</a></h2><p>要创建一个基本的 Trim 动画，你需要：</p><ol><li>创建一个 <code>Shape</code>。</li><li>设置 <code>stroke</code> 的颜色和宽度。</li><li>使用 <code>.trim(from: strokeStart, to: strokeEnd)</code> 修改器来控制描边的显示。</li><li>使用 <code>withAnimation</code> 来动画改变 <code>strokeStart</code> 和 <code>strokeEnd</code> 的值。</li></ol><p>例如，让一条线从无到有地绘制出来：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> progress: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: progress)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stroke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.blue, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StrokeStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lineWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lineCap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .round))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">linear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在这个例子中，我们使用 <code>Circle()</code> 作为形状，并通过动画改变 <code>progress</code> 的值，从而控制 <code>strokeEnd</code> 的值，实现圆形逐渐绘制的效果。🎉</p><h2 id="高级-trim-动画技巧" tabindex="-1">高级 Trim 动画技巧 <a class="header-anchor" href="#高级-trim-动画技巧" aria-label="Permalink to &quot;高级 Trim 动画技巧&quot;">​</a></h2><ul><li><strong>组合动画</strong>：你可以同时动画改变 <code>strokeStart</code> 和 <code>strokeEnd</code>，创造更复杂的动画效果。例如，让描边从中间向两边展开。</li><li><strong>使用不同的 <code>TimingCurve</code></strong>：通过调整 <code>withAnimation</code> 中的 <code>TimingCurve</code>，你可以改变动画的速度曲线，让动画更自然。</li><li><strong>利用 <code>onAppear</code> 和 <code>onDisappear</code></strong>：在视图出现和消失时触发动画，可以创建更流畅的用户体验。</li></ul><p>以下是一些可以尝试的动画效果：</p><ol><li><strong>加载指示器</strong>：创建一个圆形加载指示器，通过循环动画改变 <code>strokeStart</code> 和 <code>strokeEnd</code> 的值。</li><li><strong>进度条</strong>：创建一个进度条，根据任务的完成度动画改变 <code>strokeEnd</code> 的值。</li><li><strong>手写效果</strong>：模拟手写文字的效果，通过动画改变 <code>strokeEnd</code> 的值，让文字逐笔显示。</li></ol><p>希望这些技巧能帮助你创建出令人惊艳的 SwiftUI 动画！加油！💪</p>`,17)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
