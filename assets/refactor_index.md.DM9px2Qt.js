import{_ as e,c as a,o as t,ag as r}from"./chunks/framework.ymCRTBvy.js";const p=JSON.parse('{"title":"📘 《SwiftUI封装与重构：构建可维护的UI》","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/index.md","filePath":"refactor/index.md"}'),l={name:"refactor/index.md"};function o(n,i,f,d,s,c){return t(),a("div",null,i[0]||(i[0]=[r('<h1 id="📘-《swiftui封装与重构-构建可维护的ui》" tabindex="-1">📘 《SwiftUI封装与重构：构建可维护的UI》 <a class="header-anchor" href="#📘-《swiftui封装与重构-构建可维护的ui》" aria-label="Permalink to &quot;📘 《SwiftUI封装与重构：构建可维护的UI》&quot;">​</a></h1><h2 id="📖-内容简介" tabindex="-1">📖 内容简介： <a class="header-anchor" href="#📖-内容简介" aria-label="Permalink to &quot;📖 内容简介：&quot;">​</a></h2><p>本书面向具有一定 SwiftUI 基础的开发者，专注于提升 UI 代码的可维护性与可复用性，系统讲解如何在实际项目中进行视图封装、样式提取、逻辑重构与模块划分。全书以“构建可维护 UI”为核心目标，通过真实项目场景、分层架构与组件化思维，帮助你掌握一套适用于中大型应用开发的 SwiftUI 工程实践方法。</p><p>书中内容围绕视图设计模式、ViewModifier、环境与依赖注入、自定义样式协议、泛型与类型擦除、设计系统构建等关键技术展开，涵盖了 SwiftUI 高级特性与架构思维的深度融合。</p><p>本书适合作为 SwiftUI 进阶开发者的工程实践手册，也可作为技术团队提升代码质量与协作效率的重要参考资料。</p><h2 id="✅-你将学到" tabindex="-1">✅ 你将学到： <a class="header-anchor" href="#✅-你将学到" aria-label="Permalink to &quot;✅ 你将学到：&quot;">​</a></h2><ul><li>如何通过 ViewModifier、ViewBuilder 等机制封装常见视图样式</li><li>构建可配置的 UI 组件，实现样式注入与内容复用</li><li>利用协议、泛型与类型擦除构建灵活的组件系统</li><li>使用环境对象与依赖注入分离视图逻辑与状态</li><li>组织大型 SwiftUI 项目的页面结构与模块划分</li><li>设计一套适用于团队协作的 SwiftUI 样式体系</li></ul><p>无论你正在为项目积累可复用的 UI 组件库，还是在思考如何让 SwiftUI 项目更具可扩展性与一致性，这本书都将为你提供系统化的思路与工具。</p>',8)]))}const I=e(l,[["render",o]]);export{p as __pageData,I as default};
