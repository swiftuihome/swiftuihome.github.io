import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"使用extension为数据模型添加计算属性","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/15.3_使用`extension`为数据模型添加计算属性.md","filePath":"refactor/15.3_使用`extension`为数据模型添加计算属性.md"}'),t={name:"refactor/15.3_使用`extension`为数据模型添加计算属性.md"};function l(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用extension为数据模型添加计算属性" tabindex="-1">使用<code>extension</code>为数据模型添加计算属性 <a class="header-anchor" href="#使用extension为数据模型添加计算属性" aria-label="Permalink to &quot;使用\`extension\`为数据模型添加计算属性&quot;">​</a></h1><p>在 SwiftUI 中，使用 <code>extension</code> 为数据模型添加计算属性是一种非常棒的方式，可以精炼视图逻辑，让你的代码更清晰、更易于维护。🎉 让我们一起看看如何操作吧！</p><h2 id="为什么使用-extension-添加计算属性" tabindex="-1">为什么使用 Extension 添加计算属性？ <a class="header-anchor" href="#为什么使用-extension-添加计算属性" aria-label="Permalink to &quot;为什么使用 Extension 添加计算属性？&quot;">​</a></h2><p>通过 <code>extension</code>，你可以为现有的数据模型添加新的功能，而无需修改原始模型的定义。这对于第三方库或你不想直接修改的模型来说尤其有用。计算属性可以根据模型现有的属性，动态地计算出新的值，从而简化视图中的数据处理逻辑。</p><ul><li><strong>代码清晰：</strong> 将计算逻辑从视图中分离出来，使视图代码更简洁。</li><li><strong>可重用性：</strong> 计算属性可以在多个视图中使用，避免重复代码。</li><li><strong>易于维护：</strong> 修改计算逻辑时，只需修改 <code>extension</code> 中的代码，而无需修改视图代码。</li></ul><h2 id="如何使用-extension-添加计算属性" tabindex="-1">如何使用 Extension 添加计算属性？ <a class="header-anchor" href="#如何使用-extension-添加计算属性" aria-label="Permalink to &quot;如何使用 Extension 添加计算属性？&quot;">​</a></h2><p>假设你有一个 <code>User</code> 数据模型：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在，你想在视图中显示用户的全名。你可以使用 <code>extension</code> 为 <code>User</code> 模型添加一个计算属性 <code>fullName</code>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(firstName)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \\(lastName)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>现在，你可以在视图中直接使用 <code>user.fullName</code>，而无需在视图中拼接字符串。是不是很方便呢？😎</p><h2 id="示例-格式化日期" tabindex="-1">示例：格式化日期 <a class="header-anchor" href="#示例-格式化日期" aria-label="Permalink to &quot;示例：格式化日期&quot;">​</a></h2><p>另一个常见的用例是格式化日期。假设你有一个 <code>Date</code> 类型的属性，你想以特定的格式显示它。你可以使用 <code>extension</code> 为 <code>Date</code> 添加一个计算属性：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formattedDate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DateFormatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        formatter.dateFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;yyyy-MM-dd&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样，你就可以在视图中直接使用 <code>date.formattedDate</code>，而无需每次都创建 <code>DateFormatter</code>。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>使用 <code>extension</code> 为数据模型添加计算属性，可以极大地简化 SwiftUI 视图的逻辑，提高代码的可读性和可维护性。 记住，清晰的代码是优秀应用的基础！🚀 试试看，你会发现它真的很有用！</p>`,17)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
