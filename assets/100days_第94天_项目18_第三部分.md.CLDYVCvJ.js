import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"第94天 项目 18 第三部分","description":"","frontmatter":{},"headers":[],"relativePath":"100days/第94天_项目18_第三部分.md","filePath":"100days/第94天_项目18_第三部分.md"}'),e={name:"100days/第94天_项目18_第三部分.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="第94天-项目-18-第三部分" tabindex="-1">第94天 项目 18 第三部分 <a class="header-anchor" href="#第94天-项目-18-第三部分" aria-label="Permalink to &quot;第94天 项目 18 第三部分&quot;">​</a></h1><p>你准备好完成我们最后的技巧项目了吗？希望你已经准备好了，因为你还有一次复习要完成，另外还有三个新的挑战等着你。现在我要提醒你：这些挑战都涉及<code>GeometryReader</code>，因为它会迫使你清晰地思考每个视图的框架是如何计算的，以及如何利用这些框架创造出有趣的效果。</p><p>我知道<code>GeometryReader</code>确实可能让你感到困惑，但要想熟练掌握它——有效地使用它，唯一的方法就是不断练习、练习、再练习。</p><p>我之前引用过艾米·莫林的话，今天我想最后再引用一次。她说：“生活中最美好的事情往往发生在我们的舒适区之外，而怀疑自己走出舒适区的能力会让你停滞不前。”所以，就从今天开始，走出你的舒适区，让<code>GeometryReader</code>听从你的“指挥”吧！</p><p>今天你需要完成项目18的总结章节，完成相关复习，然后攻克所有三个挑战。</p><ul><li>布局与几何：总结</li><li>项目18复习：布局与几何</li></ul><h2 id="布局与几何-总结" tabindex="-1">布局与几何：总结 <a class="header-anchor" href="#布局与几何-总结" aria-label="Permalink to &quot;布局与几何：总结&quot;">​</a></h2><p>作者：Paul Hudson 2024年2月21日</p><p>希望这个规模较小的技巧项目能让你在完成那些冗长的应用项目后得到一个愉快的调剂，但我更希望你现在已经开始对SwiftUI的布局系统有一个清晰的认知模型了。这个三步式的布局系统听起来可能很简单，但要完全理解它所带来的影响还需要时间。</p><p>至于<code>GeometryReader</code>，它属于那种你完全可以不用考虑也能应付日常开发的工具，这没什么问题。但有时候——只是有时候——你需要一些额外的功能，而这些功能是容器相对框架或其他SwiftUI选项无法提供的，这时候<code>GeometryReader</code>就能派上用场了。</p><h2 id="回顾所学内容" tabindex="-1">回顾所学内容 <a class="header-anchor" href="#回顾所学内容" aria-label="Permalink to &quot;回顾所学内容&quot;">​</a></h2><p>任何人都能看完一个教程，但要记住所学的知识还需要实际付出努力。确保你能从这些教程中收获尽可能多的知识是我的职责，完成后面的练习题可以帮助你检验自己的学习成果。</p><h2 id="挑战" tabindex="-1">挑战 <a class="header-anchor" href="#挑战" aria-label="Permalink to &quot;挑战&quot;">​</a></h2><p>学习编程最好的方法之一就是尽可能多地自己编写代码，所以我为你准备了三个挑战，让你通过实践来巩固对<code>GeometryReader</code>的理解。</p><p>首先，将你的<code>ContentView</code>恢复到我们之前做过的旋转彩色行示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colors: [Color] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [.red, .green, .blue, .orange, .pink, .purple, .yellow]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fullView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ScrollView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.vertical) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(index)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">maxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">infinity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colors[index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotation3DEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">degrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((proxy.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .global).minY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>完成上述操作后：</p><ol><li>让滚动视图顶部附近的视图淡出至透明度为0——建议从顶部约200点的位置开始。</li><li>让视图根据其垂直位置调整缩放比例，底部附近的视图较大，顶部附近的视图较小。建议最小缩放比例不低于正常大小的50%。</li><li>作为一个更高难度的挑战，让视图在滚动时改变颜色。为了达到最佳效果，你应该使用<code>Color(hue:saturation:brightness:)</code>初始化器来创建颜色，并为色调（hue）传入不同的值。</li></ol><p>要找到合适的数值，每一项挑战都需要你进行一些尝试和调整。无论如何，在缩放时你应该使用<code>max()</code>函数，确保视图不会缩小到正常大小的一半以下；在处理色调时使用<code>min()</code>函数，确保色调值不会超过1.0。</p><h2 id="布局与几何" tabindex="-1">布局与几何 <a class="header-anchor" href="#布局与几何" aria-label="Permalink to &quot;布局与几何&quot;">​</a></h2><p>问题1/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：SwiftUI使用三步式布局流程。</li><li><strong>选项2</strong>：<code>GeometryReader</code>总是会占据其父视图提供的所有可用空间。</li></ul><p>问题2/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：创建自定义对齐指南时，我们必须提供默认值。</li><li><strong>选项2</strong>：SwiftUI有五个内置的坐标空间。</li></ul><p>问题3/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：如果我们编写<code>Text(&quot;Hello, World!&quot;).background(.red)</code>，那么文本视图是背景视图的子视图。</li><li><strong>选项2</strong>：如果我们编写<code>Text(&quot;Hello, World!&quot;).background(.red)</code>，那么背景视图是文本视图的子视图。</li></ul><p>问题4/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：<code>Color</code>视图是布局中立的（layout neutral）。</li><li><strong>选项2</strong>：父视图可以强制其子视图采用特定的大小。</li></ul><p>问题5/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：在<code>HStack</code>中，我们可以使用第一个或最后一个文本视图的基线来对齐文本。</li><li><strong>选项2</strong>：子视图必须始终使用小于或等于父视图提供的空间。</li></ul><p>问题6/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：SwiftUI将视图的位置和大小存储为整数。</li><li><strong>选项2</strong>：<code>offset()</code>修饰符会改变视图的渲染位置，但不会实际改变其原始尺寸。</li></ul><p>问题7/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：文本的基线（baseline）是字母最低处的正下方。</li><li><strong>选项2</strong>：视图的大小始终与其主体（body）的大小完全相同。</li></ul><p>问题8/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：<code>GeometryReader</code>在其布局闭包中会提供一个值，该值是一个包含布局信息的<code>GeometryProxy</code>。</li><li><strong>选项2</strong>：除非我们指定自定义对齐方式，否则大多数父视图总会将其子视图放置在可用空间的左上角。</li></ul><p>问题9/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：文本视图会自动调整大小以适应显示所有文本行所需的空间。</li><li><strong>选项2</strong>：创建自定义对齐指南是个糟糕的主意。</li></ul><p>问题10/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：<code>GeometryReader</code>会告诉我们父视图提议的大小。</li><li><strong>选项2</strong>：<code>createCoordinate()</code>修饰符可以让我们创建自定义坐标空间。</li></ul><p>问题11/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：<code>alignmentGuide()</code>修饰符允许我们编写自定义代码来计算视图的对齐指南。</li><li><strong>选项2</strong>：在SwiftUI中无法绝对定位视图。</li></ul><p>问题12/12：以下哪些陈述是正确的？</p><ul><li><strong>选项1</strong>：<code>GeometryReader</code>提供的框架（frame）会在视图移动时自动更新。</li><li><strong>选项2</strong>：创建自定义对齐指南时，建议使用结构体（struct）而非枚举（enum）。</li></ul>`,44)]))}const g=i(e,[["render",t]]);export{E as __pageData,g as default};
