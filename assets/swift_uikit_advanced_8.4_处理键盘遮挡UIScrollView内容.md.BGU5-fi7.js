import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"处理键盘遮挡UIScrollView内容","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/8.4_处理键盘遮挡UIScrollView内容.md","filePath":"swift/uikit/advanced/8.4_处理键盘遮挡UIScrollView内容.md"}'),l={name:"swift/uikit/advanced/8.4_处理键盘遮挡UIScrollView内容.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="处理键盘遮挡uiscrollview内容" tabindex="-1">处理键盘遮挡UIScrollView内容 <a class="header-anchor" href="#处理键盘遮挡uiscrollview内容" aria-label="Permalink to &quot;处理键盘遮挡UIScrollView内容&quot;">​</a></h1><blockquote><p>在iOS开发中，<code>UIScrollView</code> 是一个非常强大的控件，它允许你展示比屏幕更大的内容。但是，当你的 <code>UIScrollView</code> 中包含文本输入框（<code>UITextField</code> 或 <code>UITextView</code>）时，键盘的出现可能会遮挡住这些输入框，影响用户体验。别担心，解决这个问题其实并不难！🎉</p></blockquote><h2 id="监听键盘事件" tabindex="-1">监听键盘事件 <a class="header-anchor" href="#监听键盘事件" aria-label="Permalink to &quot;监听键盘事件&quot;">​</a></h2><p>首先，你需要监听键盘的出现和消失事件。iOS提供了一套通知机制来帮助你做到这一点。你需要注册两个通知：<code>UIKeyboardWillShowNotification</code> 和 <code>UIKeyboardWillHideNotification</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NotificationCenter.default.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyboardWillShow), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UIResponder.keyboardWillShowNotification, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NotificationCenter.default.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyboardWillHide), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UIResponder.keyboardWillHideNotification, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="获取键盘高度" tabindex="-1">获取键盘高度 <a class="header-anchor" href="#获取键盘高度" aria-label="Permalink to &quot;获取键盘高度&quot;">​</a></h2><p>当键盘出现时，你需要知道键盘的高度，以便调整 <code>UIScrollView</code> 的 <code>contentInsets</code>。键盘高度信息包含在 <code>UIKeyboardWillShowNotification</code> 的 <code>userInfo</code> 字典中。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keyboardWillShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NSNotification) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyboardSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (notification.userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[UIResponder.keyboardFrameEndUserInfoKey] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSValue)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cgRectValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 调整 UIScrollView 的 contentInsets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="调整-contentinsets" tabindex="-1">调整 <code>contentInsets</code> <a class="header-anchor" href="#调整-contentinsets" aria-label="Permalink to &quot;调整 \`contentInsets\`&quot;">​</a></h2><p>获取到键盘高度后，你需要调整 <code>UIScrollView</code> 的 <code>contentInset</code> 和 <code>scrollIndicatorInsets</code>。<code>contentInset</code> 会在 <code>UIScrollView</code> 的四周增加额外的空白区域，而 <code>scrollIndicatorInsets</code> 则会调整滚动条的位置。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keyboardWillShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NSNotification) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyboardSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (notification.userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[UIResponder.keyboardFrameEndUserInfoKey] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSValue)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cgRectValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentInsets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIEdgeInsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: keyboardSize.height, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.contentInset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentInsets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.scrollIndicatorInsets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentInsets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keyboardWillHide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NSNotification) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentInsets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIEdgeInsets.zero</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.contentInset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentInsets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.scrollIndicatorInsets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentInsets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="滚动到可见区域" tabindex="-1">滚动到可见区域 <a class="header-anchor" href="#滚动到可见区域" aria-label="Permalink to &quot;滚动到可见区域&quot;">​</a></h2><p>最后，你需要确保当前正在编辑的文本输入框滚动到可见区域。你可以使用 <code>UIScrollView</code> 的 <code>scrollRectToVisible(_:animated:)</code> 方法来实现。首先，你需要获取当前正在编辑的输入框的 <code>frame</code>，然后将其转换为 <code>UIScrollView</code> 坐标系下的 <code>frame</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activeField </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activeTextField { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设 activeTextField 是当前正在编辑的文本框</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activeField.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activeField.bounds, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: scrollView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrollView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scrollRectToVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rect, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>假设你有一个包含多个 <code>UITextField</code> 的 <code>UIScrollView</code>。你可以通过以下步骤来处理键盘遮挡问题：</p><ol><li>声明一个变量 <code>activeTextField</code> 来存储当前正在编辑的 <code>UITextField</code>。</li><li>在 <code>UITextFieldDelegate</code> 的 <code>textFieldDidBeginEditing(_:)</code> 方法中，将当前 <code>UITextField</code> 赋值给 <code>activeTextField</code>。</li><li>在 <code>UITextFieldDelegate</code> 的 <code>textFieldDidEndEditing(_:)</code> 方法中，将 <code>activeTextField</code> 设置为 <code>nil</code>。</li><li>在 <code>keyboardWillShow</code> 方法中，获取键盘高度，调整 <code>contentInset</code> 和 <code>scrollIndicatorInsets</code>，并将 <code>activeTextField</code> 滚动到可见区域。</li><li>在 <code>keyboardWillHide</code> 方法中，将 <code>contentInset</code> 和 <code>scrollIndicatorInsets</code> 重置为 <code>UIEdgeInsets.zero</code>。</li></ol><p>通过以上步骤，你就可以轻松解决键盘遮挡 <code>UIScrollView</code> 内容的问题啦！🎉 记住，良好的用户体验是应用成功的关键！🚀</p>`,18)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
