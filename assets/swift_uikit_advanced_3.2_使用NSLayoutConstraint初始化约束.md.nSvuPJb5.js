import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"使用NSLayoutConstraint初始化约束","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/3.2_使用NSLayoutConstraint初始化约束.md","filePath":"swift/uikit/advanced/3.2_使用NSLayoutConstraint初始化约束.md"}'),e={name:"swift/uikit/advanced/3.2_使用NSLayoutConstraint初始化约束.md"};function l(p,s,h,r,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="使用nslayoutconstraint初始化约束" tabindex="-1">使用NSLayoutConstraint初始化约束 <a class="header-anchor" href="#使用nslayoutconstraint初始化约束" aria-label="Permalink to &quot;使用NSLayoutConstraint初始化约束&quot;">​</a></h1><h2 id="深入理解nslayoutconstraint初始化" tabindex="-1">深入理解NSLayoutConstraint初始化 <a class="header-anchor" href="#深入理解nslayoutconstraint初始化" aria-label="Permalink to &quot;深入理解NSLayoutConstraint初始化&quot;">​</a></h2><p>使用 <code>NSLayoutConstraint</code> 初始化约束是纯代码布局的核心。它允许你精确定义视图之间的几何关系，告别繁琐的 <code>frame</code> 计算。你将发现这种方法提供了无与伦比的灵活性和控制力！🚀</p><h2 id="nslayoutconstraint的构造函数" tabindex="-1">NSLayoutConstraint的构造函数 <a class="header-anchor" href="#nslayoutconstraint的构造函数" aria-label="Permalink to &quot;NSLayoutConstraint的构造函数&quot;">​</a></h2><p><code>NSLayoutConstraint</code> 的初始化方法非常强大，它能让你指定两个视图之间的复杂关系。这个方法有多个参数，每个都至关重要。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSLayoutConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item view1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   attribute attr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSLayoutConstraint.Attribute, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   relatedBy relation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSLayoutConstraint.Relation, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   toItem view2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   attribute attr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSLayoutConstraint.Attribute, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                   multiplier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGFloat, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   constant c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGFloat)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>让我们逐一剖析这些参数，确保你完全掌握它们！</p><h2 id="参数详解与应用" tabindex="-1">参数详解与应用 <a class="header-anchor" href="#参数详解与应用" aria-label="Permalink to &quot;参数详解与应用&quot;">​</a></h2><p>理解每个参数的含义是成功创建约束的关键。</p><ul><li><strong><code>item view1: Any</code></strong>: 这是约束的第一个视图或布局指南。它通常是你想要施加约束的视图。</li><li><strong><code>attribute attr1: NSLayoutConstraint.Attribute</code></strong>: <code>view1</code> 的布局属性，例如 <code>.leading</code>、<code>.top</code>、<code>.width</code> 等。选择正确的属性至关重要。</li><li><strong><code>relatedBy relation: NSLayoutConstraint.Relation</code></strong>: 定义了两个属性之间的关系，可以是 <code>.equal</code>、<code>.lessThanOrEqual</code> 或 <code>.greaterThanOrEqual</code>。这提供了极大的灵活性！</li><li><strong><code>toItem view2: Any?</code></strong>: 这是约束的第二个视图或布局指南。如果约束只涉及一个视图（例如设置宽度），则此参数为 <code>nil</code>。</li><li><strong><code>attribute attr2: NSLayoutConstraint.Attribute</code></strong>: <code>view2</code> 的布局属性。如果 <code>toItem</code> 为 <code>nil</code>，则此参数通常为 <code>.notAnAttribute</code>。</li><li><strong><code>multiplier: CGFloat</code></strong>: 一个乘数，用于调整 <code>attr2</code> 的值。例如，如果你想让 <code>view1</code> 的宽度是 <code>view2</code> 宽度的一半，你可以设置 <code>multiplier</code> 为 <code>0.5</code>。</li><li><strong><code>constant c: CGFloat</code></strong>: 一个常量值，直接添加到 <code>attr2</code> 的值上。这通常用于设置边距或固定尺寸。</li></ul><h2 id="实际案例-居中与固定尺寸" tabindex="-1">实际案例：居中与固定尺寸 <a class="header-anchor" href="#实际案例-居中与固定尺寸" aria-label="Permalink to &quot;实际案例：居中与固定尺寸&quot;">​</a></h2><p>假设你有一个名为 <code>myView</code> 的子视图，你想让它在父视图中水平居中，并且宽度为200点。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 禁用自动布局转换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 水平居中约束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> centerXConstraint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NSLayoutConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: myView, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                           attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .centerX, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                           relatedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .equal, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                           toItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                           attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .centerX, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                           multiplier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                           constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 宽度约束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> widthConstraint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NSLayoutConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: myView, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                         attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .width, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                         relatedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .equal, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                         toItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有第二个视图</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                         attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .notAnAttribute, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                         multiplier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                         constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 激活约束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([centerXConstraint, widthConstraint])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这个例子清晰地展示了如何使用 <code>NSLayoutConstraint</code> 来实现常见的布局需求。你现在可以自信地创建各种复杂的布局了！💪</p><h2 id="约束的激活与管理" tabindex="-1">约束的激活与管理 <a class="header-anchor" href="#约束的激活与管理" aria-label="Permalink to &quot;约束的激活与管理&quot;">​</a></h2><p>创建约束后，你必须激活它们才能使其生效。最推荐的方法是使用 <code>NSLayoutConstraint.activate(_:)</code> 类方法，它能批量激活约束，效率极高。</p><ul><li><strong>批量激活</strong>: <code>NSLayoutConstraint.activate([constraint1, constraint2])</code></li><li><strong>单个激活</strong>: <code>constraint.isActive = true</code></li></ul><p>记住，激活约束是布局生效的最后一步。没有激活，你的视图将不会按照你定义的规则进行布局。掌握这些，你的布局技能将达到新的高度！✨</p>`,18)]))}const E=i(e,[["render",l]]);export{c as __pageData,E as default};
