import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"理解父子视图控制器关系","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/15.1_理解父子视图控制器关系.md","filePath":"swift/uikit/advanced/15.1_理解父子视图控制器关系.md"}'),e={name:"swift/uikit/advanced/15.1_理解父子视图控制器关系.md"};function p(h,s,t,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="理解父子视图控制器关系" tabindex="-1">理解父子视图控制器关系 <a class="header-anchor" href="#理解父子视图控制器关系" aria-label="Permalink to &quot;理解父子视图控制器关系&quot;">​</a></h1><blockquote><p>在iOS开发中，理解父子视图控制器关系至关重要，尤其是在构建复杂的自定义容器视图控制器时。这种关系允许你以模块化的方式组织和管理你的应用程序界面，从而提高代码的可维护性和可重用性。让我们一起深入了解这个概念！🚀</p></blockquote><h2 id="什么是父子视图控制器关系" tabindex="-1">什么是父子视图控制器关系？ <a class="header-anchor" href="#什么是父子视图控制器关系" aria-label="Permalink to &quot;什么是父子视图控制器关系？&quot;">​</a></h2><p>简单来说，父子视图控制器关系是指一个视图控制器（父视图控制器）拥有并管理另一个或多个视图控制器（子视图控制器）。父视图控制器负责管理子视图控制器的生命周期，包括它们的视图的添加、移除和布局。这种结构类似于家庭关系，一个家庭（父视图控制器）可以有多个孩子（子视图控制器）。👨‍👩‍👧‍👦</p><h2 id="如何建立父子关系" tabindex="-1">如何建立父子关系？ <a class="header-anchor" href="#如何建立父子关系" aria-label="Permalink to &quot;如何建立父子关系？&quot;">​</a></h2><p>你可以使用以下方法来建立父子视图控制器关系：</p><ol><li><p><strong>addChild(_😃</strong>: 这个方法将一个视图控制器添加为当前视图控制器的子视图控制器。这不仅建立了逻辑上的父子关系，而且也通知了UIKit，以便它可以正确地管理视图控制器的生命周期。</p></li><li><p><strong>removeFromParent()</strong>: 这个方法将一个子视图控制器从其父视图控制器中移除。这会断开父子关系，并允许子视图控制器被释放（如果不再有其他强引用）。</p></li><li><p><strong>view.addSubview(_😃</strong>: 虽然这行代码将子视图控制器的视图添加到父视图控制器的视图中，但它本身并不建立父子视图控制器关系。你需要同时调用<code>addChild(_:)</code>来确保关系正确建立。</p></li></ol><h2 id="父子关系的重要性" tabindex="-1">父子关系的重要性 <a class="header-anchor" href="#父子关系的重要性" aria-label="Permalink to &quot;父子关系的重要性&quot;">​</a></h2><p>父子视图控制器关系对于以下几个方面至关重要：</p><ul><li><p><strong>生命周期管理</strong>: 父视图控制器负责调用子视图控制器的<code>viewWillAppear(_:)</code>, <code>viewDidAppear(_:)</code>, <code>viewWillDisappear(_:)</code>, 和 <code>viewDidDisappear(_:)</code>等方法。这确保了子视图控制器的生命周期事件与父视图控制器同步。</p></li><li><p><strong>事件传递</strong>: 父视图控制器可以拦截和处理子视图控制器的事件，例如触摸事件或通知。</p></li><li><p><strong>视图层级</strong>: 父视图控制器可以控制子视图控制器的视图在视图层级中的位置和大小。</p></li></ul><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><p>以下是一个简单的示例，展示了如何建立和移除父子视图控制器关系：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建父视图控制器和子视图控制器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parentVC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> childVC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建立父子关系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parentVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(childVC)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将子视图控制器的视图添加到父视图控制器的视图中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parentVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(childVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置子视图控制器的视图的frame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通知子视图控制器，它已经被添加到父视图控制器中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">didMove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: parentVC)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除父子关系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">willMove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeFromSuperview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childVC.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeFromParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ul><li>确保在添加子视图控制器的视图到父视图控制器的视图之前，先调用<code>addChild(_:)</code>。</li><li>在移除子视图控制器的视图之前，先调用<code>willMove(toParent: nil)</code>和<code>removeFromParent()</code>。</li><li>始终保持父子关系的同步，以避免出现意外的行为。</li></ul><p>理解并正确使用父子视图控制器关系是构建复杂iOS应用程序的关键。通过这种方式，你可以更好地组织你的代码，提高可维护性，并创建更灵活和可重用的UI组件。🎉</p>`,16)]))}const o=i(e,[["render",p]]);export{c as __pageData,o as default};
