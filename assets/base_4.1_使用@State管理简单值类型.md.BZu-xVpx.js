import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"使用@State管理简单值类型","description":"","frontmatter":{},"headers":[],"relativePath":"base/4.1_使用@State管理简单值类型.md","filePath":"base/4.1_使用@State管理简单值类型.md"}'),t={name:"base/4.1_使用@State管理简单值类型.md"};function l(p,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="使用-state管理简单值类型" tabindex="-1">使用@State管理简单值类型 <a class="header-anchor" href="#使用-state管理简单值类型" aria-label="Permalink to &quot;使用@State管理简单值类型&quot;">​</a></h1><p>在SwiftUI中，<code>@State</code> 是一个强大的属性包装器，它允许你管理视图内部的状态。这意味着你可以创建能够响应用户交互并动态更新的界面。想象一下，你正在构建一个简单的计数器应用，<code>@State</code> 将是你存储和更新计数器值的理想选择。</p><h2 id="声明和使用-state" tabindex="-1">声明和使用@State <a class="header-anchor" href="#声明和使用-state" aria-label="Permalink to &quot;声明和使用@State&quot;">​</a></h2><p>要使用 <code>@State</code>，你需要在你的视图结构体中声明一个属性，并用 <code>@State</code> 标记它。这个属性必须是 <code>var</code>，因为它的值会改变。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;计数器: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(counter)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个例子中，<code>counter</code> 是一个 <code>@State</code> 属性，它存储一个整数值，初始值为 0。<code>private</code> 关键字限制了 <code>counter</code> 只能在 <code>MyView</code> 内部访问，这是一种良好的实践，可以防止意外修改。</p><h2 id="修改-state属性" tabindex="-1">修改@State属性 <a class="header-anchor" href="#修改-state属性" aria-label="Permalink to &quot;修改@State属性&quot;">​</a></h2><p>要修改 <code>@State</code> 属性的值，你只需要像修改任何其他变量一样修改它。SwiftUI 会自动检测到值的变化，并重新渲染视图以反映新的状态。例如，你可以添加一个按钮来增加计数器：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;计数器: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(counter)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;增加&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>每次点击“增加”按钮，<code>counter</code> 的值都会增加 1，并且视图会立即更新以显示新的计数器值。是不是很酷？😎</p><h2 id="state的注意事项" tabindex="-1">@State的注意事项 <a class="header-anchor" href="#state的注意事项" aria-label="Permalink to &quot;@State的注意事项&quot;">​</a></h2><ul><li><code>@State</code> 应该只用于管理<strong>简单值类型</strong>，例如 <code>Int</code>、<code>String</code>、<code>Bool</code> 等。对于更复杂的数据类型，你应该使用 <code>@ObservedObject</code> 或 <code>@StateObject</code>。</li><li><code>@State</code> 属性是<strong>私有的</strong>，这意味着它们只能在声明它们的视图内部访问。这有助于保持数据的封装性，并防止意外修改。</li><li><code>@State</code> 属性的值在视图的<strong>生命周期</strong>内保持不变。即使视图被重新渲染，<code>@State</code> 属性的值也会被保留。</li></ul><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>@State</code> 在 SwiftUI 中有广泛的应用场景，例如：</p><ol><li><strong>切换开关状态</strong>：使用 <code>@State</code> 来控制一个布尔值，以显示或隐藏某个视图元素。</li><li><strong>文本输入框</strong>：使用 <code>@State</code> 来存储用户在文本输入框中输入的文本。</li><li><strong>动画控制</strong>：使用 <code>@State</code> 来触发和控制动画的播放。</li></ol><p>总而言之，<code>@State</code> 是 SwiftUI 中管理视图内部状态的关键工具。通过合理地使用 <code>@State</code>，你可以创建出动态、交互性强的用户界面。🎉 记住，实践是最好的老师！尝试构建一些简单的 SwiftUI 应用，并使用 <code>@State</code> 来管理视图的状态，你会很快掌握它的用法。🚀</p>`,16)]))}const E=a(t,[["render",l]]);export{o as __pageData,E as default};
