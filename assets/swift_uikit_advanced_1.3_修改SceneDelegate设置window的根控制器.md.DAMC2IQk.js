import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"修改SceneDelegate设置window的根控制器","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/1.3_修改SceneDelegate设置window的根控制器.md","filePath":"swift/uikit/advanced/1.3_修改SceneDelegate设置window的根控制器.md"}'),l={name:"swift/uikit/advanced/1.3_修改SceneDelegate设置window的根控制器.md"};function t(p,s,h,k,d,r){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="修改scenedelegate设置window的根控制器" tabindex="-1">修改SceneDelegate设置window的根控制器 <a class="header-anchor" href="#修改scenedelegate设置window的根控制器" aria-label="Permalink to &quot;修改SceneDelegate设置window的根控制器&quot;">​</a></h1><p>告别Storyboard，拥抱纯代码UI布局！🎉 让我们一起探索如何在<code>SceneDelegate</code>中设置<code>window</code>的根控制器，开启你的iOS开发新篇章。</p><h2 id="理解-scenedelegate-的作用" tabindex="-1">理解 SceneDelegate 的作用 <a class="header-anchor" href="#理解-scenedelegate-的作用" aria-label="Permalink to &quot;理解 SceneDelegate 的作用&quot;">​</a></h2><p><code>SceneDelegate</code> 是 iOS 13 引入的新概念，它负责管理 App 的场景（Scene）。每个场景代表 App 的一个用户界面实例。你需要在这里配置 <code>window</code>，并设置根视图控制器，从而决定 App 启动时显示的内容。</p><ul><li><strong>场景生命周期管理</strong>：<code>SceneDelegate</code> 负责处理场景的创建、激活、进入前台和后台等事件。</li><li><strong><code>window</code> 配置</strong>：<code>window</code> 是 App 内容的容器，<code>SceneDelegate</code> 负责创建和配置 <code>window</code>。</li><li><strong>根视图控制器设置</strong>：通过设置 <code>window</code> 的 <code>rootViewController</code> 属性，你可以指定 App 启动时显示的第一个视图控制器。</li></ul><h2 id="修改-scenedelegate-代码" tabindex="-1">修改 SceneDelegate 代码 <a class="header-anchor" href="#修改-scenedelegate-代码" aria-label="Permalink to &quot;修改 SceneDelegate 代码&quot;">​</a></h2><p>现在，让我们动手修改 <code>SceneDelegate</code> 的代码，设置 <code>window</code> 的根控制器。找到你的 <code>SceneDelegate.swift</code> 文件，并找到 <code>scene(_:willConnectTo:options:)</code> 方法。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene: UIScene, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">willConnectTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: UISceneSession, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionOptions: UIScene.ConnectionOptions) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowScene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIWindowScene) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">windowScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: windowScene)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换成你的根视图控制器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeKeyAndVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这段代码做了以下几件事：</p><ol><li><strong>获取 <code>UIWindowScene</code></strong>：确保场景是 <code>UIWindowScene</code> 类型。</li><li><strong>创建 <code>UIWindow</code></strong>：使用 <code>UIWindowScene</code> 创建 <code>UIWindow</code> 实例。</li><li><strong>创建根视图控制器</strong>：实例化你想要作为根视图控制器的 <code>ViewController</code>（或者其他任何你想要的控制器）。</li><li><strong>设置 <code>rootViewController</code></strong>：将创建的视图控制器赋值给 <code>window</code> 的 <code>rootViewController</code> 属性。</li><li><strong>显示 <code>window</code></strong>：调用 <code>makeKeyAndVisible()</code> 方法，使 <code>window</code> 可见并成为主窗口。</li></ol><h2 id="创建你的根视图控制器" tabindex="-1">创建你的根视图控制器 <a class="header-anchor" href="#创建你的根视图控制器" aria-label="Permalink to &quot;创建你的根视图控制器&quot;">​</a></h2><p>在上面的代码中，我们使用了 <code>ViewController</code> 作为根视图控制器。你需要创建这个类，或者替换成你自己的视图控制器。</p><ol><li><strong>创建新的 Swift 文件</strong>：在 Xcode 中创建一个新的 Swift 文件，命名为 <code>ViewController.swift</code>（或者你喜欢的名字）。</li><li><strong>继承 <code>UIViewController</code></strong>：让你的类继承 <code>UIViewController</code>。</li><li><strong>添加基本视图</strong>：在 <code>viewDidLoad()</code> 方法中，添加一些基本的视图，例如 <code>UILabel</code> 或 <code>UIButton</code>，以便在屏幕上看到效果。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .white </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置背景颜色</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World! 🎉&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.textAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .center</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.center </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view.center</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(label)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="运行你的-app" tabindex="-1">运行你的 App <a class="header-anchor" href="#运行你的-app" aria-label="Permalink to &quot;运行你的 App&quot;">​</a></h2><p>现在，运行你的 App，你应该能看到你创建的视图控制器显示在屏幕上。如果没有看到，请检查以下几点：</p><ul><li>确保 <code>SceneDelegate</code> 中的代码正确无误。</li><li>确保你的根视图控制器已经正确创建并添加到 <code>window</code> 上。</li><li>检查是否有其他代码干扰了 <code>window</code> 的显示。</li></ul><h2 id="深入理解" tabindex="-1">深入理解 <a class="header-anchor" href="#深入理解" aria-label="Permalink to &quot;深入理解&quot;">​</a></h2><p>你可能想知道，为什么我们需要在 <code>SceneDelegate</code> 中做这些事情？这是因为 iOS 13 引入了场景管理，<code>SceneDelegate</code> 负责处理每个场景的生命周期和配置。通过在 <code>SceneDelegate</code> 中设置 <code>window</code> 的根控制器，我们可以更好地控制 App 的启动流程和用户界面。</p><ul><li><strong>灵活性</strong>：使用 <code>SceneDelegate</code> 可以更灵活地管理 App 的多个窗口和场景。</li><li><strong>可测试性</strong>：将 UI 配置放在代码中，可以更容易地进行单元测试和 UI 测试。</li><li><strong>可维护性</strong>：纯代码布局可以提高代码的可读性和可维护性。</li></ul><p>希望这个教程能帮助你理解如何在 <code>SceneDelegate</code> 中设置 <code>window</code> 的根控制器。继续探索，你会发现更多纯代码布局的乐趣！🚀</p>`,21)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
