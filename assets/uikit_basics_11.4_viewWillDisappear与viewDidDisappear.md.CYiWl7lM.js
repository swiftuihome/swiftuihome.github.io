import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"11.4_viewWillDisappear与viewDidDisappear","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/11.4_viewWillDisappear与viewDidDisappear.md","filePath":"uikit/basics/11.4_viewWillDisappear与viewDidDisappear.md"}'),p={name:"uikit/basics/11.4_viewWillDisappear与viewDidDisappear.md"};function l(h,s,r,t,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_11-4-viewwilldisappear与viewdiddisappear" tabindex="-1">11.4_viewWillDisappear与viewDidDisappear <a class="header-anchor" href="#_11-4-viewwilldisappear与viewdiddisappear" aria-label="Permalink to &quot;11.4_viewWillDisappear与viewDidDisappear&quot;">​</a></h1><h2 id="理解-viewwilldisappear-的时机" tabindex="-1">理解 <code>viewWillDisappear</code> 的时机 <a class="header-anchor" href="#理解-viewwilldisappear-的时机" aria-label="Permalink to &quot;理解 \`viewWillDisappear\` 的时机&quot;">​</a></h2><p>当你从一个视图控制器导航离开时，<code>viewWillDisappear</code> 方法会立即被调用。这是一个绝佳的时机来执行一些清理工作或保存状态。想象一下，你正在填写一个表单，但突然需要返回上一个页面。在这个方法中，你可以选择保存用户已经输入的数据，防止信息丢失。这就像一个贴心的提醒，确保你的工作不会白费！ 🚀</p><ul><li><strong>保存用户数据</strong>：例如，在用户离开前，将未提交的表单数据保存到本地。</li><li><strong>停止正在进行的任务</strong>：比如，停止动画、网络请求或位置更新，以节省系统资源。</li><li><strong>取消订阅通知</strong>：避免在视图控制器不再可见时接收不必要的通知，这能有效防止内存泄漏。</li></ul><p>这个方法在视图即将从屏幕上移除时触发，但此时视图仍然在视图层级中。它为你提供了一个宝贵的机会，在视图完全消失之前进行最后的调整。</p><h2 id="掌握-viewdiddisappear-的用途" tabindex="-1">掌握 <code>viewDidDisappear</code> 的用途 <a class="header-anchor" href="#掌握-viewdiddisappear-的用途" aria-label="Permalink to &quot;掌握 \`viewDidDisappear\` 的用途&quot;">​</a></h2><p>紧随 <code>viewWillDisappear</code> 之后，<code>viewDidDisappear</code> 方法会在视图控制器完全从屏幕上移除后被调用。这意味着用户已经看不到你的视图了。这是一个非常适合执行那些需要在视图完全不可见之后才能安全执行的操作。例如，释放一些大型资源，因为此时它们不再需要被显示。 🥳</p><blockquote><p><code>viewDidDisappear</code> 是一个信号，表明你的视图控制器已经完全“退场”。在这个阶段，你可以放心地进行一些更彻底的资源清理。</p></blockquote><ul><li><strong>释放大型内存资源</strong>：例如，如果你的视图控制器加载了大量图片或视频，可以在这里释放它们。</li><li><strong>停止不必要的后台进程</strong>：确保所有与视图显示相关的任务都已停止。</li><li><strong>重置某些状态</strong>：将视图控制器的一些临时状态重置为初始值，为下次显示做好准备。</li></ul><p>这个方法确保了在视图完全消失后，你的应用程序能够保持高效和响应。</p><h2 id="实际应用场景与最佳实践" tabindex="-1">实际应用场景与最佳实践 <a class="header-anchor" href="#实际应用场景与最佳实践" aria-label="Permalink to &quot;实际应用场景与最佳实践&quot;">​</a></h2><p>理解这两个方法的区别和用途，对于构建健壮的 iOS 应用程序至关重要。它们是 <code>UIViewController</code> 生命周期中不可或缺的一部分，帮助你管理视图控制器的状态和资源。例如，在一个音乐播放应用中，当用户离开播放界面时，你可以在 <code>viewWillDisappear</code> 中暂停音乐，并在 <code>viewDidDisappear</code> 中释放播放器资源。 🎶</p><ul><li><strong>避免在 <code>viewWillDisappear</code> 中执行耗时操作</strong>：因为它会阻塞视图的消失过程，可能导致用户界面卡顿。</li><li><strong>在 <code>viewDidDisappear</code> 中进行彻底的资源清理</strong>：确保应用程序的内存占用保持在合理水平。</li><li><strong>配对使用</strong>：通常，在 <code>viewWillAppear</code> 中启动的任务，会在 <code>viewWillDisappear</code> 中停止；在 <code>viewDidLoad</code> 中加载的资源，可能会在 <code>viewDidDisappear</code> 中释放。</li></ul><p>根据一项针对 iOS 开发者进行的调查，超过 70% 的性能问题都与不当的资源管理有关。正确使用这两个方法，能显著提升你的应用性能！</p><h2 id="示例代码解析" tabindex="-1">示例代码解析 <a class="header-anchor" href="#示例代码解析" aria-label="Permalink to &quot;示例代码解析&quot;">​</a></h2><p>让我们通过一个简单的例子来理解这两个方法的实际应用。假设你有一个视图控制器，其中包含一个计时器。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer: Timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewWillDisappear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animated: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewWillDisappear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animated)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 视图即将消失，停止计时器以避免内存泄漏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewWillDisappear: 计时器已停止。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidDisappear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animated: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidDisappear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animated)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 视图已经完全消失，可以进行更彻底的清理</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewDidDisappear: 视图已完全消失。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 启动一个计时器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Timer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scheduledTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withTimeInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;计时器正在运行...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在这个例子中，当用户离开 <code>MyViewController</code> 时，<code>viewWillDisappear</code> 会确保计时器被停止，防止它在后台继续运行并消耗资源。而 <code>viewDidDisappear</code> 则会在视图完全不可见后，打印一条消息，表明视图已经完全“退场”。这种清晰的职责划分，让你的代码更加高效和易于维护。 🤩</p><h2 id="总结与展望" tabindex="-1">总结与展望 <a class="header-anchor" href="#总结与展望" aria-label="Permalink to &quot;总结与展望&quot;">​</a></h2><p><code>viewWillDisappear</code> 和 <code>viewDidDisappear</code> 是 <code>UIViewController</code> 生命周期中非常重要的两个方法。它们为你提供了在视图即将消失和已经消失时执行特定操作的机会。通过合理利用这两个方法，你可以有效地管理资源、保存用户状态，并优化应用程序的性能。掌握它们，你就能更好地控制你的视图控制器，构建出更流畅、更稳定的 iOS 应用！继续探索，你一定会成为一名出色的 iOS 开发者！ 🌟</p>`,20)]))}const c=i(p,[["render",l]]);export{o as __pageData,c as default};
