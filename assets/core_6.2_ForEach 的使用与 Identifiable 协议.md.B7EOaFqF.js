import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"ForEach 的使用与 Identifiable 协议","description":"","frontmatter":{},"headers":[],"relativePath":"core/6.2_ForEach 的使用与 Identifiable 协议.md","filePath":"core/6.2_ForEach 的使用与 Identifiable 协议.md"}'),l={name:"core/6.2_ForEach 的使用与 Identifiable 协议.md"};function h(t,s,p,r,d,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="foreach-的使用与-identifiable-协议" tabindex="-1">ForEach 的使用与 Identifiable 协议 <a class="header-anchor" href="#foreach-的使用与-identifiable-协议" aria-label="Permalink to &quot;ForEach 的使用与 Identifiable 协议&quot;">​</a></h1><h2 id="foreach-的强大之处-动态列表的基石-💪" tabindex="-1">ForEach 的强大之处：动态列表的基石 💪 <a class="header-anchor" href="#foreach-的强大之处-动态列表的基石-💪" aria-label="Permalink to &quot;ForEach 的强大之处：动态列表的基石 💪&quot;">​</a></h2><p>在 SwiftUI 中，<code>ForEach</code> 就像一位不知疲倦的工匠，它能根据你的数据，一遍又一遍地创建视图。它特别擅长处理集合类型，比如数组，让你可以轻松地将数据转化为动态列表。想象一下，你有一个包含 100 个名字的数组，<code>ForEach</code> 就能帮你生成 100 个对应的文本视图，是不是很酷？😎</p><ul><li><code>ForEach</code> 循环遍历集合中的每个元素。</li><li>为每个元素创建一个新的视图。</li><li>自动更新视图，当数据发生变化时。</li></ul><h2 id="identifiable-协议-让-swiftui-认识你的数据-🤝" tabindex="-1">Identifiable 协议：让 SwiftUI 认识你的数据 🤝 <a class="header-anchor" href="#identifiable-协议-让-swiftui-认识你的数据-🤝" aria-label="Permalink to &quot;Identifiable 协议：让 SwiftUI 认识你的数据 🤝&quot;">​</a></h2><p><code>Identifiable</code> 协议是 SwiftUI 识别列表中每个元素的关键。它要求你的数据类型有一个唯一的 <code>id</code> 属性。这个 <code>id</code> 就像每个元素的身份证，确保 SwiftUI 能够正确地追踪和更新列表中的视图。如果你的数据类型已经有一个唯一的标识符（比如数据库 ID），那么实现 <code>Identifiable</code> 协议就非常简单。</p><ul><li>确保每个数据项都有一个唯一的 <code>id</code>。</li><li><code>id</code> 可以是任何 <code>Hashable</code> 类型，比如 <code>Int</code> 或 <code>UUID</code>。</li><li>如果你的数据已经有唯一标识符，直接使用即可。</li></ul><h2 id="如何使用-foreach-构建动态列表-📝" tabindex="-1">如何使用 ForEach 构建动态列表 📝 <a class="header-anchor" href="#如何使用-foreach-构建动态列表-📝" aria-label="Permalink to &quot;如何使用 ForEach 构建动态列表 📝&quot;">​</a></h2><p>使用 <code>ForEach</code> 构建动态列表非常简单。首先，你需要一个符合 <code>Identifiable</code> 协议的数据数组。然后，在你的视图中使用 <code>ForEach</code> 循环遍历这个数组，并为每个元素创建一个视图。例如，你可以创建一个包含用户信息的数组，然后使用 <code>ForEach</code> 创建一个显示每个用户姓名的列表。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Identifiable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;王五&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users) { user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="深入理解-foreach-的初始化方法-🧐" tabindex="-1">深入理解 ForEach 的初始化方法 🧐 <a class="header-anchor" href="#深入理解-foreach-的初始化方法-🧐" aria-label="Permalink to &quot;深入理解 ForEach 的初始化方法 🧐&quot;">​</a></h2><p><code>ForEach</code> 提供了多种初始化方法，以适应不同的使用场景。最常用的方法是接受一个集合和一个闭包，闭包用于为集合中的每个元素创建一个视图。此外，<code>ForEach</code> 还可以接受一个范围（比如 <code>0..&lt;10</code>），并根据这个范围生成视图。理解这些不同的初始化方法，可以让你更灵活地使用 <code>ForEach</code> 构建动态列表。</p><ol><li><code>ForEach(data: content:)</code>: 用于处理符合 <code>Identifiable</code> 协议的数据。</li><li><code>ForEach(range: content:)</code>: 用于处理整数范围。</li><li><code>ForEach(data: id: content:)</code>: 当你的数据不符合 <code>Identifiable</code> 协议，但你可以提供一个唯一的 <code>id</code> 时使用。</li></ol><p>希望这些解释能帮助你更好地理解 <code>ForEach</code> 的使用与 <code>Identifiable</code> 协议！🎉</p>`,14)]))}const E=i(l,[["render",h]]);export{o as __pageData,E as default};
