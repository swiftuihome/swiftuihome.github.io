import{_ as i,c as n,o as a,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"使用 @EnvironmentObject 进行全局数据传递","description":"","frontmatter":{},"headers":[],"relativePath":"core/4.3_使用 @EnvironmentObject 进行全局数据传递.md","filePath":"core/4.3_使用 @EnvironmentObject 进行全局数据传递.md"}'),t={name:"core/4.3_使用 @EnvironmentObject 进行全局数据传递.md"};function l(p,s,h,r,k,d){return a(),n("div",null,s[0]||(s[0]=[e(`<h1 id="使用-environmentobject-进行全局数据传递" tabindex="-1">使用 @EnvironmentObject 进行全局数据传递 <a class="header-anchor" href="#使用-environmentobject-进行全局数据传递" aria-label="Permalink to &quot;使用 @EnvironmentObject 进行全局数据传递&quot;">​</a></h1><h2 id="掌握-environmentobject-的魔力-✨" tabindex="-1">掌握 @EnvironmentObject 的魔力 ✨ <a class="header-anchor" href="#掌握-environmentobject-的魔力-✨" aria-label="Permalink to &quot;掌握 @EnvironmentObject 的魔力 ✨&quot;">​</a></h2><p>你是否曾为在 SwiftUI 应用中跨多个视图传递数据而烦恼？别担心，<code>@EnvironmentObject</code> 就是你的救星！它提供了一种极其优雅且高效的方式，让你在视图层级中轻松共享数据，告去了繁琐的属性传递。</p><p>想象一下，你的数据就像一个宝藏，而 <code>@EnvironmentObject</code> 就像一张藏宝图，让所有需要的视图都能轻松找到它。这种全局数据传递机制，极大地简化了复杂应用的开发。</p><h2 id="为什么选择-environmentobject" tabindex="-1">为什么选择 @EnvironmentObject？ <a class="header-anchor" href="#为什么选择-environmentobject" aria-label="Permalink to &quot;为什么选择 @EnvironmentObject？&quot;">​</a></h2><p><code>@EnvironmentObject</code> 的核心优势在于其便捷性。你无需手动将数据从父视图一层层传递到子视图，这在深层嵌套的视图结构中尤其有用。它就像一个魔法通道，直接将数据送到需要它的地方。</p><ul><li><strong>简化代码</strong>: 告别冗长的初始化器和大量的 <code>@Binding</code> 属性。你的代码将变得更加简洁和易读。</li><li><strong>提高效率</strong>: 减少了不必要的视图更新，因为只有当 <code>EnvironmentObject</code> 中的数据发生变化时，依赖它的视图才会重新渲染。</li><li><strong>全局可访问</strong>: 一旦设置，任何子视图都可以访问到这个共享对象，无需额外的配置。</li></ul><h2 id="如何使用-environmentobject" tabindex="-1">如何使用 @EnvironmentObject？ <a class="header-anchor" href="#如何使用-environmentobject" aria-label="Permalink to &quot;如何使用 @EnvironmentObject？&quot;">​</a></h2><p>使用 <code>@EnvironmentObject</code> 的过程非常直观。首先，你需要创建一个遵循 <code>ObservableObject</code> 协议的类，并在其中使用 <code>@Published</code> 属性包装器来标记需要观察的属性。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SwiftUI 爱好者&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>接下来，在你的应用入口或者某个父视图中，使用 <code>.environmentObject()</code> 修饰符注入这个对象。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">environmentObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(settings) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在这里注入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>最后，在任何需要访问这个数据的子视图中，声明一个 <code>@EnvironmentObject</code> 属性。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProfileView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @EnvironmentObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings: UserSettings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;分数: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">score</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;增加分数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                settings.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="最佳实践与注意事项-💡" tabindex="-1">最佳实践与注意事项 💡 <a class="header-anchor" href="#最佳实践与注意事项-💡" aria-label="Permalink to &quot;最佳实践与注意事项 💡&quot;">​</a></h2><p>为了充分发挥 <code>@EnvironmentObject</code> 的优势，请记住以下几点：</p><ul><li><strong>只用于共享全局或半全局数据</strong>: 对于只在少数视图间传递的数据，考虑使用 <code>@Binding</code> 或 <code>@ObservedObject</code>。</li><li><strong>确保注入</strong>: 如果你忘记在视图层级中注入 <code>EnvironmentObject</code>，你的应用会在运行时崩溃。SwiftUI 会在需要时查找它。</li><li><strong>性能考量</strong>: 尽管 <code>@EnvironmentObject</code> 效率很高，但频繁更新大型对象可能会影响性能。合理设计你的数据模型至关重要。</li></ul><p>通过掌握 <code>@EnvironmentObject</code>，你将能够构建出更强大、更易于维护的 SwiftUI 应用。它无疑是 SwiftUI 数据流管理中的一颗璀璨明珠！🚀</p>`,18)]))}const o=i(t,[["render",l]]);export{E as __pageData,o as default};
