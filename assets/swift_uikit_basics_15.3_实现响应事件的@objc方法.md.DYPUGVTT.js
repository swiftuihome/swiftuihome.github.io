import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"15.3_实现响应事件的@objc方法","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/15.3_实现响应事件的@objc方法.md","filePath":"swift/uikit/basics/15.3_实现响应事件的@objc方法.md"}'),l={name:"swift/uikit/basics/15.3_实现响应事件的@objc方法.md"};function t(p,s,h,k,r,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_15-3-实现响应事件的-objc方法" tabindex="-1">15.3_实现响应事件的@objc方法 <a class="header-anchor" href="#_15-3-实现响应事件的-objc方法" aria-label="Permalink to &quot;15.3_实现响应事件的@objc方法&quot;">​</a></h1><blockquote><p>当然！让我们一起深入了解如何在 iOS 开发中使用 <code>@objc</code> 方法来响应事件，这可是 UIKit 编程中非常重要的一环！🎉</p></blockquote><h2 id="什么是-objc-方法" tabindex="-1">什么是 <code>@objc</code> 方法？ <a class="header-anchor" href="#什么是-objc-方法" aria-label="Permalink to &quot;什么是 \`@objc\` 方法？&quot;">​</a></h2><p>在 Swift 中，<code>@objc</code> 属性用于将 Swift 代码暴露给 Objective-C 运行时。这对于使用 Target-Action 模式至关重要，因为 UIKit 框架主要基于 Objective-C。简单来说，<code>@objc</code> 就像一个翻译器，让你的 Swift 代码可以被 UIKit 识别和调用。</p><h2 id="为什么需要-objc" tabindex="-1">为什么需要 <code>@objc</code>？ <a class="header-anchor" href="#为什么需要-objc" aria-label="Permalink to &quot;为什么需要 \`@objc\`？&quot;">​</a></h2><p>UIKit 控件（如按钮、滑块等）的事件处理机制依赖于 Objective-C 的运行时特性。当你为一个 UIControl 添加事件监听时，你需要提供一个方法来响应这个事件。为了让 UIKit 能够调用你的 Swift 方法，你必须使用 <code>@objc</code> 属性来标记它。如果没有 <code>@objc</code>，UIKit 就无法找到并执行你的方法，事件也就无法响应啦！</p><h2 id="如何实现-objc-方法" tabindex="-1">如何实现 <code>@objc</code> 方法？ <a class="header-anchor" href="#如何实现-objc-方法" aria-label="Permalink to &quot;如何实现 \`@objc\` 方法？&quot;">​</a></h2><p>实现 <code>@objc</code> 方法非常简单。你只需要在你的 Swift 方法前面加上 <code>@objc</code> 属性即可。下面是一个例子：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myButton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myButton.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buttonTapped), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .touchUpInside)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buttonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;按钮被点击了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个例子中，<code>buttonTapped()</code> 方法被 <code>@objc</code> 标记，这意味着它可以被 Objective-C 运行时调用。当按钮被点击时，<code>buttonTapped()</code> 方法会被执行，控制台会打印出 &quot;按钮被点击了！&quot; 🥳</p><h2 id="objc-方法的注意事项" tabindex="-1"><code>@objc</code> 方法的注意事项 <a class="header-anchor" href="#objc-方法的注意事项" aria-label="Permalink to &quot;\`@objc\` 方法的注意事项&quot;">​</a></h2><ul><li><strong>方法签名：</strong> <code>@objc</code> 方法的方法签名必须与 Objective-C 兼容。这意味着方法参数和返回值类型必须是 Objective-C 可以理解的类型。</li><li><strong>继承：</strong> 如果你的 Swift 类继承自 Objective-C 类（如 <code>NSObject</code>），那么你的 Swift 方法会自动暴露给 Objective-C 运行时，你不需要显式地使用 <code>@objc</code> 属性。</li><li><strong>命名冲突：</strong> 确保你的 <code>@objc</code> 方法的名称在 Objective-C 运行时中是唯一的，以避免命名冲突。</li></ul><h2 id="实例演示" tabindex="-1">实例演示 <a class="header-anchor" href="#实例演示" aria-label="Permalink to &quot;实例演示&quot;">​</a></h2><p>让我们通过一个更完整的例子来演示如何使用 <code>@objc</code> 方法。假设你想要创建一个简单的计数器应用，当点击按钮时，计数器会增加。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counterLabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> incrementButton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置UI元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        incrementButton.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(incrementCounter), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .touchUpInside)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> incrementCounter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        counterLabel.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;计数：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(count)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在这个例子中，<code>incrementCounter()</code> 方法被 <code>@objc</code> 标记，当 <code>incrementButton</code> 被点击时，计数器会增加，并且 <code>counterLabel</code> 会更新显示最新的计数。是不是很简单呢？👍</p><p>通过以上讲解，相信你已经掌握了如何在 iOS 开发中使用 <code>@objc</code> 方法来响应事件。记住，<code>@objc</code> 是 Swift 与 Objective-C 桥梁的关键，掌握它能让你在 UIKit 编程中更加得心应手！加油！💪</p>`,17)]))}const E=i(l,[["render",t]]);export{o as __pageData,E as default};
