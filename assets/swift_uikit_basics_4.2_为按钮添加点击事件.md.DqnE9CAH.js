import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"4.2_为按钮添加点击事件","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/4.2_为按钮添加点击事件.md","filePath":"swift/uikit/basics/4.2_为按钮添加点击事件.md"}'),t={name:"swift/uikit/basics/4.2_为按钮添加点击事件.md"};function l(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_4-2-为按钮添加点击事件" tabindex="-1">4.2_为按钮添加点击事件 <a class="header-anchor" href="#_4-2-为按钮添加点击事件" aria-label="Permalink to &quot;4.2_为按钮添加点击事件&quot;">​</a></h1><h2 id="按钮点击事件的核心概念" tabindex="-1">按钮点击事件的核心概念 <a class="header-anchor" href="#按钮点击事件的核心概念" aria-label="Permalink to &quot;按钮点击事件的核心概念&quot;">​</a></h2><p>为按钮添加点击事件是iOS应用交互性的基石。 🚀 当用户轻触屏幕上的按钮时，应用需要知道如何响应。 这正是目标-动作（Target-Action）机制发挥作用的地方，它是UIKit中处理用户交互的核心模式。 你将学会如何让你的应用“听懂”用户的每一次点击！</p><h2 id="实现点击事件的步骤" tabindex="-1">实现点击事件的步骤 <a class="header-anchor" href="#实现点击事件的步骤" aria-label="Permalink to &quot;实现点击事件的步骤&quot;">​</a></h2><p>实现按钮点击事件非常直接，主要涉及以下几个关键步骤。 你会发现这比你想象的要简单得多！ 🎯</p><ol><li><strong>创建按钮实例</strong>: 首先，你需要一个<code>UIButton</code>的实例。</li><li><strong>定义动作方法</strong>: 接下来，你需要编写一个方法，当按钮被点击时，这个方法就会被调用。</li><li><strong>关联目标与动作</strong>: 最后，你需要将按钮与你定义的动作方法连接起来。</li></ol><h2 id="编写动作方法" tabindex="-1">编写动作方法 <a class="header-anchor" href="#编写动作方法" aria-label="Permalink to &quot;编写动作方法&quot;">​</a></h2><p>动作方法是按钮被点击时执行的代码块。 这个方法通常会接收一个<code>sender</code>参数，它就是触发事件的按钮本身。 这样，你就可以在同一个方法中处理多个按钮的点击事件，并通过<code>sender</code>来区分它们。 💡</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buttonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sender: UIButton) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;按钮被点击了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里添加你希望按钮点击后执行的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sender.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;已点击&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>请注意，<code>@objc</code>关键字是必需的，因为它允许Objective-C运行时（UIKit的基础）识别并调用这个Swift方法。</p><h2 id="关联按钮与动作" tabindex="-1">关联按钮与动作 <a class="header-anchor" href="#关联按钮与动作" aria-label="Permalink to &quot;关联按钮与动作&quot;">​</a></h2><p>将按钮与动作方法关联起来是实现点击事件的关键一步。 你可以使用<code>addTarget(_:action:for:)</code>方法来完成这个任务。 这是一个非常强大的方法，让你能够精确控制事件的响应方式。 💪</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myButton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .system)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myButton.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myButton.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将按钮添加到视图层级中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myButton)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myButton.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buttonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_:)), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .touchUpInside)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>target</code>: 通常是<code>self</code>，表示当前视图控制器将处理这个动作。</li><li><code>action</code>: 使用<code>#selector</code>语法指定要调用的方法。</li><li><code>for</code>: 指定触发动作的事件类型。 <code>.</code>是<code>UIControl.Event</code>的简写，<code>touchUpInside</code>是最常用的事件类型，表示用户在按钮内部抬起手指时触发。</li></ul><h2 id="常见的事件类型" tabindex="-1">常见的事件类型 <a class="header-anchor" href="#常见的事件类型" aria-label="Permalink to &quot;常见的事件类型&quot;">​</a></h2><p>除了<code>touchUpInside</code>，还有其他几种常用的事件类型，你可以根据需要选择。 了解这些事件类型将帮助你创建更精细的用户交互。 🌟</p><ul><li><code>.touchDown</code>: 用户手指按下按钮时触发。</li><li><code>.touchDragInside</code>: 用户手指在按钮内部拖动时触发。</li><li><code>.touchDragOutside</code>: 用户手指在按钮外部拖动时触发。</li><li><code>.touchUpOutside</code>: 用户手指在按钮外部抬起时触发。</li><li><code>.valueChanged</code>: 适用于像<code>UISlider</code>或<code>UISegmentedControl</code>这样的控件，当它们的值改变时触发。</li></ul><p>通过掌握这些事件类型，你将能够构建出响应灵敏、用户体验极佳的iOS应用。 🚀 事实上，大约85%的按钮交互都使用<code>touchUpInside</code>，但了解其他选项能让你在特定场景下更灵活。</p>`,18)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
