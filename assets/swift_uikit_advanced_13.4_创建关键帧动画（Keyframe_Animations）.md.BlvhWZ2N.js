import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"创建关键帧动画（Keyframe_Animations）","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/13.4_创建关键帧动画（Keyframe_Animations）.md","filePath":"swift/uikit/advanced/13.4_创建关键帧动画（Keyframe_Animations）.md"}'),t={name:"swift/uikit/advanced/13.4_创建关键帧动画（Keyframe_Animations）.md"};function l(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="创建关键帧动画-keyframe-animations" tabindex="-1">创建关键帧动画（Keyframe_Animations） <a class="header-anchor" href="#创建关键帧动画-keyframe-animations" aria-label="Permalink to &quot;创建关键帧动画（Keyframe_Animations）&quot;">​</a></h1><h2 id="探索关键帧动画的奥秘-🚀" tabindex="-1">探索关键帧动画的奥秘 🚀 <a class="header-anchor" href="#探索关键帧动画的奥秘-🚀" aria-label="Permalink to &quot;探索关键帧动画的奥秘 🚀&quot;">​</a></h2><p>关键帧动画允许你创建复杂的动画序列，通过指定在不同时间点视图的状态来实现。你可以精确控制动画的每个阶段，从而实现令人惊叹的视觉效果。准备好释放你的创造力了吗？让我们一起深入了解关键帧动画的强大功能！</p><h2 id="关键帧动画的基础知识-🎨" tabindex="-1">关键帧动画的基础知识 🎨 <a class="header-anchor" href="#关键帧动画的基础知识-🎨" aria-label="Permalink to &quot;关键帧动画的基础知识 🎨&quot;">​</a></h2><p>关键帧动画的核心在于定义一系列的关键帧。每个关键帧描述了在特定时间点视图的属性值，例如位置、大小、透明度或旋转角度。系统会在这些关键帧之间平滑地插值，从而创建流畅的动画效果。</p><ul><li><strong>关键帧</strong>: 动画中的一个特定时间点，定义了视图的属性状态。</li><li><strong>属性</strong>: 可以动画化的视图特征，例如 <code>frame</code>、<code>alpha</code>、<code>transform</code>。</li><li><strong>时间</strong>: 每个关键帧发生的时间点，通常以秒为单位。</li></ul><h2 id="如何创建关键帧动画-🎬" tabindex="-1">如何创建关键帧动画 🎬 <a class="header-anchor" href="#如何创建关键帧动画-🎬" aria-label="Permalink to &quot;如何创建关键帧动画 🎬&quot;">​</a></h2><p>要创建关键帧动画，你需要使用 <code>UIView.animateKeyframes(withDuration:delay:options:animations:completion:)</code> 方法。这个方法允许你定义动画的总时长、延迟、选项以及一系列的关键帧。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animateKeyframes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加关键帧</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">completion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 <code>animations</code> 闭包中，你可以使用 <code>UIView.addKeyframe(withRelativeStartTime:relativeDuration:animations:)</code> 方法来添加每个关键帧。<code>relativeStartTime</code> 和 <code>relativeDuration</code> 参数指定了关键帧相对于整个动画的开始时间和持续时间。</p><h2 id="关键帧动画的示例-🌟" tabindex="-1">关键帧动画的示例 🌟 <a class="header-anchor" href="#关键帧动画的示例-🌟" aria-label="Permalink to &quot;关键帧动画的示例 🌟&quot;">​</a></h2><p>让我们创建一个简单的示例，让一个视图从屏幕左侧移动到右侧，然后淡出。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animateKeyframes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withRelativeStartTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relativeDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 移动到屏幕右侧</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.myView.frame.origin.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.frame.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.myView.frame.width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withRelativeStartTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relativeDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 淡出</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.myView.alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">completion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个例子中，我们首先将视图移动到屏幕右侧，然后让它淡出。每个关键帧的持续时间都是整个动画的一半。</p><h2 id="关键帧动画的进阶技巧-✨" tabindex="-1">关键帧动画的进阶技巧 ✨ <a class="header-anchor" href="#关键帧动画的进阶技巧-✨" aria-label="Permalink to &quot;关键帧动画的进阶技巧 ✨&quot;">​</a></h2><ul><li><strong>使用不同的缓动函数</strong>: 你可以使用 <code>options</code> 参数来指定不同的缓动函数，例如 <code>easeIn</code>、<code>easeOut</code> 或 <code>easeInOut</code>，以改变动画的速度曲线。</li><li><strong>组合多个属性</strong>: 你可以在同一个关键帧中同时动画化多个属性，例如位置、大小和旋转角度。</li><li><strong>创建复杂的动画序列</strong>: 你可以添加任意数量的关键帧，以创建复杂的动画序列。</li></ul><p>关键帧动画为你提供了无限的可能性，让你能够创建令人惊叹的动画效果。尝试不同的属性、时间和缓动函数，看看你能创造出什么！ 🚀🎉</p>`,17)]))}const g=i(t,[["render",l]]);export{o as __pageData,g as default};
