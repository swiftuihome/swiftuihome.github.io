import{_ as s,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"遵循UIViewControllerAnimatedTransitioning协议","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/14.3_遵循UIViewControllerAnimatedTransitioning协议.md","filePath":"swift/uikit/advanced/14.3_遵循UIViewControllerAnimatedTransitioning协议.md"}'),t={name:"swift/uikit/advanced/14.3_遵循UIViewControllerAnimatedTransitioning协议.md"};function l(r,i,p,h,o,k){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="遵循uiviewcontrolleranimatedtransitioning协议" tabindex="-1">遵循UIViewControllerAnimatedTransitioning协议 <a class="header-anchor" href="#遵循uiviewcontrolleranimatedtransitioning协议" aria-label="Permalink to &quot;遵循UIViewControllerAnimatedTransitioning协议&quot;">​</a></h1><h2 id="协议核心概念解析" tabindex="-1">协议核心概念解析 <a class="header-anchor" href="#协议核心概念解析" aria-label="Permalink to &quot;协议核心概念解析&quot;">​</a></h2><p><code>UIViewControllerAnimatedTransitioning</code> 协议是实现自定义转场动画的基石！🚀 它定义了两个核心方法，让你能够完全掌控视图控制器在屏幕上出现和消失的动画过程。当你想要摆脱系统默认的生硬转场，创造出独一无二的视觉体验时，这个协议就是你的最佳伙伴。理解并熟练运用它，将极大提升你的应用的用户体验。</p><h2 id="实现转场动画时长" tabindex="-1">实现转场动画时长 <a class="header-anchor" href="#实现转场动画时长" aria-label="Permalink to &quot;实现转场动画时长&quot;">​</a></h2><p>首先，你需要实现 <code>transitionDuration(using:)</code> 方法。这个方法非常直接，它告诉系统你的自定义转场动画将持续多长时间。例如，返回 <code>0.5</code> 意味着你的动画将在半秒内完成。这是一个 <code>NSTimeInterval</code> 类型的值，通常以秒为单位。精确控制动画时长是创造流畅用户体验的关键一步。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transitionDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transitionContext: UIViewControllerContextTransitioning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeInterval {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 动画将持续0.75秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="执行动画逻辑" tabindex="-1">执行动画逻辑 <a class="header-anchor" href="#执行动画逻辑" aria-label="Permalink to &quot;执行动画逻辑&quot;">​</a></h2><p>接下来，也是最激动人心的部分，你需要实现 <code>animateTransition(using:)</code> 方法。这是你真正施展魔法的地方！✨ 在这个方法中，你将获得一个 <code>UIViewControllerContextTransitioning</code> 对象，它包含了转场所需的所有关键信息，比如：</p><ul><li><strong><code>containerView</code></strong>: 这是所有转场视图的父视图。你的动画视图都应该添加到这里。</li><li><strong><code>viewController(forKey:)</code></strong>: 通过 <code>UITransitionContextViewControllerKey.from</code> 和 <code>UITransitionContextViewControllerKey.to</code> 获取参与转场的源视图控制器和目标视图控制器。</li><li><strong><code>view(forKey:)</code></strong>: 类似地，通过 <code>UITransitionContextViewKey.from</code> 和 <code>UITransitionContextViewKey.to</code> 获取源视图和目标视图。</li></ul><p>你可以在这里对这些视图进行各种动画操作，例如改变它们的位置、大小、透明度等。</p><h2 id="动画完成通知" tabindex="-1">动画完成通知 <a class="header-anchor" href="#动画完成通知" aria-label="Permalink to &quot;动画完成通知&quot;">​</a></h2><p>在 <code>animateTransition(using:)</code> 方法的最后，无论动画是成功完成还是被取消，你都<strong>必须</strong>调用 <code>transitionContext.completeTransition(true)</code> 或 <code>transitionContext.completeTransition(false)</code>。这会通知系统转场已经结束，让系统能够正确地清理和更新视图层级。忘记这一步会导致视图层级混乱，甚至应用崩溃。大约有15%的开发者初次尝试时会遗漏这一步，所以务必牢记！</p><h2 id="动画示例-淡入淡出效果" tabindex="-1">动画示例：淡入淡出效果 <a class="header-anchor" href="#动画示例-淡入淡出效果" aria-label="Permalink to &quot;动画示例：淡入淡出效果&quot;">​</a></h2><p>让我们看一个简单的淡入淡出动画例子。假设我们想让目标视图控制器（toVC）从完全透明淡入到完全不透明：</p><ol><li>获取 <code>containerView</code>、<code>fromView</code> 和 <code>toView</code>。</li><li>将 <code>toView</code> 添加到 <code>containerView</code>。</li><li>将 <code>toView.alpha</code> 设置为 <code>0.0</code>。</li><li>使用 <code>UIView.animate</code> 动画块，在 <code>transitionDuration</code> 时间内将 <code>toView.alpha</code> 变为 <code>1.0</code>。</li><li>在动画完成回调中，调用 <code>transitionContext.completeTransition(true)</code>。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> animateTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transitionContext: UIViewControllerContextTransitioning) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transitionContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .to) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transitionContext.containerView</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    containerView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(toView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toView.alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 初始状态：完全透明</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transitionDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: transitionContext)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: duration, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        toView.alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 动画结束：完全不透明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        transitionContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">completeTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通知系统动画完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>通过遵循 <code>UIViewControllerAnimatedTransitioning</code> 协议，你将拥有无限可能去创造令人惊叹的转场动画。这不仅能让你的应用看起来更专业，还能显著提升用户与应用的互动体验。去尝试吧，你会爱上它的！💖</p>`,17)]))}const E=s(t,[["render",l]]);export{c as __pageData,E as default};
