import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"泛型在数据展示组件中的应用","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/6.4_泛型在数据展示组件中的应用.md","filePath":"refactor/6.4_泛型在数据展示组件中的应用.md"}'),l={name:"refactor/6.4_泛型在数据展示组件中的应用.md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="泛型在数据展示组件中的应用" tabindex="-1">泛型在数据展示组件中的应用 <a class="header-anchor" href="#泛型在数据展示组件中的应用" aria-label="Permalink to &quot;泛型在数据展示组件中的应用&quot;">​</a></h1><p>泛型在 SwiftUI 中简直是数据展示的利器！🚀 它们能让你创建可复用的组件，轻松应对各种数据类型。想象一下，你不再需要为每种数据类型编写不同的列表或卡片视图，是不是很棒？</p><h2 id="泛型数据模型的优势" tabindex="-1">泛型数据模型的优势 <a class="header-anchor" href="#泛型数据模型的优势" aria-label="Permalink to &quot;泛型数据模型的优势&quot;">​</a></h2><p>使用泛型数据模型，你可以构建一个通用的列表视图，它可以展示任何类型的数据。这不仅减少了代码量，还提高了代码的可维护性。例如，你可以创建一个 <code>GenericListView&lt;T&gt;</code>，其中 <code>T</code> 可以是 <code>String</code>、<code>Int</code>、甚至是自定义的 <code>User</code> 类型。</p><ul><li>代码复用性大大提高。</li><li>减少了冗余代码，让项目更简洁。</li><li>易于维护和扩展。</li></ul><h2 id="构建灵活的数据展示组件" tabindex="-1">构建灵活的数据展示组件 <a class="header-anchor" href="#构建灵活的数据展示组件" aria-label="Permalink to &quot;构建灵活的数据展示组件&quot;">​</a></h2><p>利用泛型，你可以创建非常灵活的数据展示组件。比如，一个通用的卡片视图，可以展示任何包含标题和描述的数据。你可以定义一个 <code>CardView&lt;T&gt;</code>，其中 <code>T</code> 必须遵循一个包含 <code>title</code> 和 <code>description</code> 属性的协议。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Displayable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> description: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CardView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Displayable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item: T</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.title).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.headline)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="实际案例-展示不同类型的数据" tabindex="-1">实际案例：展示不同类型的数据 <a class="header-anchor" href="#实际案例-展示不同类型的数据" aria-label="Permalink to &quot;实际案例：展示不同类型的数据&quot;">​</a></h2><p>假设你需要展示书籍和电影的信息。你可以创建 <code>Book</code> 和 <code>Movie</code> 结构体，并让它们都遵循 <code>Displayable</code> 协议。然后，你就可以使用同一个 <code>CardView</code> 来展示它们了！🎉</p><ol><li>定义 <code>Book</code> 和 <code>Movie</code> 结构体，遵循 <code>Displayable</code> 协议。</li><li>创建 <code>CardView</code> 实例，传入 <code>Book</code> 或 <code>Movie</code> 对象。</li><li>搞定！同一个视图，展示不同数据，简直不要太方便！</li></ol><h2 id="泛型与数据转换" tabindex="-1">泛型与数据转换 <a class="header-anchor" href="#泛型与数据转换" aria-label="Permalink to &quot;泛型与数据转换&quot;">​</a></h2><p>有时候，你需要对数据进行转换才能展示。泛型可以帮助你优雅地处理这种情况。你可以创建一个泛型函数，将数据转换为适合展示的格式。例如，将日期格式化为字符串，或者将数字转换为货币格式。</p><blockquote><p>记住，泛型的强大之处在于它的灵活性和可复用性。只要你善于运用，就能构建出高效、可维护的 SwiftUI 应用。💪</p></blockquote>`,14)]))}const E=i(l,[["render",t]]);export{o as __pageData,E as default};
