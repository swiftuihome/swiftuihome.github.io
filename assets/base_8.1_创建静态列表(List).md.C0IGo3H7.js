import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"创建静态列表(List)","description":"","frontmatter":{},"headers":[],"relativePath":"base/8.1_创建静态列表(List).md","filePath":"base/8.1_创建静态列表(List).md"}'),n={name:"base/8.1_创建静态列表(List).md"};function t(p,s,h,r,d,k){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="创建静态列表-list" tabindex="-1">创建静态列表(List) <a class="header-anchor" href="#创建静态列表-list" aria-label="Permalink to &quot;创建静态列表(List)&quot;">​</a></h1><p>在 SwiftUI 中，<code>List</code> 视图是构建用户界面的基石，尤其是在展示静态数据时。你可以使用它来创建一个简单的列表，无需任何动态数据源。让我们一起探索如何创建静态列表，让你的应用界面更加清晰和易于管理！🎉</p><h2 id="静态列表基础" tabindex="-1">静态列表基础 <a class="header-anchor" href="#静态列表基础" aria-label="Permalink to &quot;静态列表基础&quot;">​</a></h2><p>静态列表非常适合展示预定义好的、不会频繁更改的数据。你可以直接在 <code>List</code> 视图中添加静态内容，例如 <code>Text</code> 视图、<code>Image</code> 视图或其他任何 SwiftUI 视图。</p><ul><li>使用 <code>List</code> 结构体创建列表。</li><li>在 <code>List</code> 中直接嵌入静态视图。</li><li>每个视图代表列表中的一个项目。</li></ul><p>例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第一项&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第二项&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第三项&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="列表样式与分隔符" tabindex="-1">列表样式与分隔符 <a class="header-anchor" href="#列表样式与分隔符" aria-label="Permalink to &quot;列表样式与分隔符&quot;">​</a></h2><p>你可以自定义列表的样式，使其更符合你的应用设计。SwiftUI 提供了多种列表样式，你可以根据需要选择。此外，你还可以控制列表项之间的分隔符。</p><ul><li>使用 <code>.listStyle()</code> 修饰符来改变列表样式。</li><li>可以移除或自定义分隔符的颜色和粗细。</li><li>不同的样式可以显著改变列表的外观。</li></ul><p>以下是一些常用的列表样式：</p><ol><li><code>plain</code>：简洁的纯文本样式。</li><li><code>grouped</code>：分组样式，适用于组织相关内容。</li><li><code>insetGrouped</code>：带有内边距的分组样式。</li></ol><h2 id="添加更多元素到列表" tabindex="-1">添加更多元素到列表 <a class="header-anchor" href="#添加更多元素到列表" aria-label="Permalink to &quot;添加更多元素到列表&quot;">​</a></h2><p>除了 <code>Text</code> 视图，你还可以在静态列表中添加其他 SwiftUI 视图，例如 <code>Image</code>、<code>Button</code> 或自定义视图。这使得你可以创建更丰富的列表项，提升用户体验。</p><ul><li>在列表中混合使用不同类型的视图。</li><li>使用 <code>HStack</code> 和 <code>VStack</code> 来布局列表项。</li><li>添加交互元素，如按钮，增强用户互动。</li></ul><p>例如，你可以创建一个包含图片和文字的列表项：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    HStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;star.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;星标项目&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="静态列表的优势与应用场景" tabindex="-1">静态列表的优势与应用场景 <a class="header-anchor" href="#静态列表的优势与应用场景" aria-label="Permalink to &quot;静态列表的优势与应用场景&quot;">​</a></h2><p>静态列表的优势在于其简单性和易用性。它们非常适合用于展示应用设置、关于页面或任何不需要动态更新的数据。</p><ul><li>适用于展示不经常变化的数据。</li><li>易于创建和维护。</li><li>可以快速构建清晰的用户界面。</li></ul><p>静态列表在以下场景中非常有用：</p><ol><li>应用设置页面：展示各种设置选项。</li><li>关于页面：展示应用的版本信息和开发者信息。</li><li>帮助文档：展示常见问题解答。</li></ol><p>希望这个指南能帮助你更好地理解和使用 SwiftUI 中的静态列表！继续探索，你会发现更多有趣的功能！🚀</p>`,23)]))}const E=i(n,[["render",t]]);export{c as __pageData,E as default};
