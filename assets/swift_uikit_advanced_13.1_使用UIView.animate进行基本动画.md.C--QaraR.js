import{_ as s,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"使用UIView.animate进行基本动画","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/13.1_使用UIView.animate进行基本动画.md","filePath":"swift/uikit/advanced/13.1_使用UIView.animate进行基本动画.md"}'),l={name:"swift/uikit/advanced/13.1_使用UIView.animate进行基本动画.md"};function t(p,i,h,k,r,d){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="使用uiview-animate进行基本动画" tabindex="-1">使用UIView.animate进行基本动画 <a class="header-anchor" href="#使用uiview-animate进行基本动画" aria-label="Permalink to &quot;使用UIView.animate进行基本动画&quot;">​</a></h1><p>使用 <code>UIView.animate</code> 进行基本动画，让你的 iOS 应用动起来！🎉 你会发现，通过简单的代码，就能为你的界面增添生机。</p><h2 id="基础动画原理" tabindex="-1">基础动画原理 <a class="header-anchor" href="#基础动画原理" aria-label="Permalink to &quot;基础动画原理&quot;">​</a></h2><p><code>UIView.animate</code> 是一个强大的工具，它允许你轻松地改变 <code>UIView</code> 的属性，例如位置、大小、透明度等。动画的本质就是在一段时间内，平滑地改变这些属性的值。你可以想象成一个魔术，让你的视图在用户眼前翩翩起舞。💃</p><ul><li><strong>属性改变：</strong> 动画的核心在于改变视图的属性。</li><li><strong>时间控制：</strong> 你可以设置动画的持续时间，让动画按照你的节奏进行。</li><li><strong>平滑过渡：</strong> 系统会自动处理属性值之间的平滑过渡，让动画看起来自然流畅。</li></ul><h2 id="如何使用-uiview-animate" tabindex="-1">如何使用 <code>UIView.animate</code> <a class="header-anchor" href="#如何使用-uiview-animate" aria-label="Permalink to &quot;如何使用 \`UIView.animate\`&quot;">​</a></h2><p>使用 <code>UIView.animate</code> 非常简单，你只需要提供动画的持续时间和一个闭包，在闭包中设置你想要改变的属性即可。例如，让一个视图淡出：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这段代码会在 1 秒钟内将 <code>myView</code> 的透明度变为 0，实现淡出效果。是不是很简单？😎</p><ul><li><code>withDuration</code>: 动画的持续时间，单位是秒。</li><li>闭包: 在闭包中设置动画结束时的属性值。</li></ul><h2 id="动画属性" tabindex="-1">动画属性 <a class="header-anchor" href="#动画属性" aria-label="Permalink to &quot;动画属性&quot;">​</a></h2><p>你可以动画很多 <code>UIView</code> 的属性，包括：</p><ol><li><code>frame</code>: 视图的位置和大小。</li><li><code>bounds</code>: 视图的内部坐标系。</li><li><code>center</code>: 视图的中心点。</li><li><code>alpha</code>: 视图的透明度。</li><li><code>transform</code>: 视图的形变，例如旋转、缩放。</li></ol><p>例如，让一个视图移动到屏幕中心：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.center </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bounds.midX, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.bounds.midY)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="动画完成回调" tabindex="-1">动画完成回调 <a class="header-anchor" href="#动画完成回调" aria-label="Permalink to &quot;动画完成回调&quot;">​</a></h2><p>有时候，你需要在动画完成后执行一些操作。<code>UIView.animate</code> 提供了完成回调闭包，让你可以在动画结束后做任何你想做的事情。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UIView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) { (finished) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finished {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeFromSuperview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;动画完成，视图已移除&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个例子中，当动画完成后，视图会被从父视图中移除，并且会打印一条消息。</p><ul><li><code>animations</code>: 动画闭包，设置动画过程中的属性变化。</li><li><code>completion</code>: 完成回调闭包，在动画结束后执行。</li></ul><h2 id="更多动画技巧" tabindex="-1">更多动画技巧 <a class="header-anchor" href="#更多动画技巧" aria-label="Permalink to &quot;更多动画技巧&quot;">​</a></h2><p>除了基本属性动画，你还可以组合多个动画，或者使用不同的动画选项，创造出更复杂的动画效果。例如，你可以使用 <code>UIView.animateKeyframes</code> 创建关键帧动画，或者使用 <code>UIView.transition</code> 创建视图之间的过渡动画。这些高级技巧可以让你成为动画大师！ 👨‍🎨</p><p>记住，动画的目的是为了提升用户体验，让你的应用更加吸引人。不要过度使用动画，以免分散用户的注意力。适度的动画可以为你的应用增添活力，让用户爱不释手。💖</p>`,23)]))}const c=s(l,[["render",t]]);export{o as __pageData,c as default};
