import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"使用@Published发布属性变更","description":"","frontmatter":{},"headers":[],"relativePath":"base/5.4_使用@Published发布属性变更.md","filePath":"base/5.4_使用@Published发布属性变更.md"}'),l={name:"base/5.4_使用@Published发布属性变更.md"};function t(h,s,p,d,r,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用-published发布属性变更" tabindex="-1">使用@Published发布属性变更 <a class="header-anchor" href="#使用-published发布属性变更" aria-label="Permalink to &quot;使用@Published发布属性变更&quot;">​</a></h1><p>使用 <strong>@Published</strong> 发布属性变更，是构建响应式 SwiftUI 应用的关键一步！🚀 让我们一起深入了解如何利用它来驱动视图更新。</p><h2 id="什么是-published" tabindex="-1">什么是 @Published？ <a class="header-anchor" href="#什么是-published" aria-label="Permalink to &quot;什么是 @Published？&quot;">​</a></h2><p><code>@Published</code> 是一个属性包装器，用于标记 <code>ObservableObject</code> 中的属性。当被 <code>@Published</code> 标记的属性发生变化时，它会自动通知所有监听该对象的视图，从而触发视图更新。这使得数据变化能够实时反映在用户界面上。</p><ul><li>它简化了手动发送通知的复杂性。</li><li>确保数据更改自动同步到 UI。</li><li>是构建动态 SwiftUI 应用的基础。</li></ul><h2 id="如何使用-published" tabindex="-1">如何使用 @Published <a class="header-anchor" href="#如何使用-published" aria-label="Permalink to &quot;如何使用 @Published&quot;">​</a></h2><p>首先，你需要创建一个符合 <code>ObservableObject</code> 协议的类。然后，在你希望能够触发视图更新的属性前添加 <code>@Published</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这个例子中，<code>userName</code> 属性被标记为 <code>@Published</code>。每当 <code>userName</code> 的值发生改变，所有订阅了 <code>UserData</code> 对象的视图都会自动更新。</p><p>以下是一些使用 <code>@Published</code> 的步骤：</p><ol><li>创建一个类并使其符合 <code>ObservableObject</code> 协议。</li><li>使用 <code>@Published</code> 标记你想要监听的属性。</li><li>在视图中使用 <code>@ObservedObject</code> 或 <code>@StateObject</code> 来监听该对象。</li></ol><h2 id="示例-实时更新用户名" tabindex="-1">示例：实时更新用户名 <a class="header-anchor" href="#示例-实时更新用户名" aria-label="Permalink to &quot;示例：实时更新用户名&quot;">​</a></h2><p>让我们创建一个简单的 SwiftUI 视图，它显示并允许用户编辑用户名。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ObservedObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(userData.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            TextField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;输入你的名字&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $userData.userName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个例子中，<code>TextField</code> 通过双向绑定 <code>$userData.userName</code> 连接到 <code>UserData</code> 对象的 <code>userName</code> 属性。每当用户在 <code>TextField</code> 中输入新的名字，<code>userName</code> 的值就会更新，并且 <code>Text</code> 视图会自动更新以显示新的用户名。🎉</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li><code>@Published</code> 只能用于类中的属性。</li><li>确保你的类符合 <code>ObservableObject</code> 协议。</li><li>使用 <code>@ObservedObject</code> 或 <code>@StateObject</code> 来监听对象的变化。</li></ul><p>通过合理使用 <code>@Published</code>，你可以轻松构建出响应迅速、数据驱动的 SwiftUI 应用。记住，实践是最好的老师！动手尝试，你会发现 <code>@Published</code> 的强大之处。💪</p>`,18)]))}const b=i(l,[["render",t]]);export{o as __pageData,b as default};
