import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"理解约束的优先级（Priority）","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/3.4_理解约束的优先级（Priority）.md","filePath":"swift/uikit/advanced/3.4_理解约束的优先级（Priority）.md"}'),l={name:"swift/uikit/advanced/3.4_理解约束的优先级（Priority）.md"};function e(h,s,p,r,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="理解约束的优先级-priority" tabindex="-1">理解约束的优先级（Priority） <a class="header-anchor" href="#理解约束的优先级-priority" aria-label="Permalink to &quot;理解约束的优先级（Priority）&quot;">​</a></h1><p>约束的优先级是自动布局中一个非常重要的概念，它允许你定义哪些约束更重要，哪些约束可以在必要时被打破。理解并合理运用优先级，能让你的界面在不同屏幕尺寸和设备方向上表现得更加灵活和健壮。💪</p><h2 id="约束优先级的概念" tabindex="-1">约束优先级的概念 <a class="header-anchor" href="#约束优先级的概念" aria-label="Permalink to &quot;约束优先级的概念&quot;">​</a></h2><p>约束优先级本质上是一个数值，范围从 1 到 1000。数值越高，优先级越高，约束就越重要。当自动布局引擎无法同时满足所有约束时，它会优先满足优先级高的约束，而允许打破优先级低的约束。默认情况下，所有约束的优先级都是 1000 (Required)。</p><ul><li><strong>Required (1000)</strong>: 这是最高的优先级，表示约束必须被满足。</li><li><strong>High (750)</strong>: 高优先级，表示约束应该尽可能被满足。</li><li><strong>Low (250)</strong>: 低优先级，表示约束在其他约束都满足后才应该被满足。</li><li><strong>Fitting Size Level (50)</strong>: 极低的优先级，通常用于内容自适应。</li></ul><h2 id="如何设置约束优先级" tabindex="-1">如何设置约束优先级 <a class="header-anchor" href="#如何设置约束优先级" aria-label="Permalink to &quot;如何设置约束优先级&quot;">​</a></h2><p>你可以通过代码来设置约束的优先级。在创建 <code>NSLayoutConstraint</code> 对象后，使用 <code>priority</code> 属性来设置。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myConstraint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NSLayoutConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .top, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relatedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .equal, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .bottom, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiplier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myConstraint.priority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .defaultHigh </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置为高优先级 (750)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myConstraint.isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你也可以使用 <code>UILayoutPriority</code> 枚举来设置优先级，例如 <code>.required</code> (1000), <code>.defaultHigh</code> (750), <code>.defaultLow</code> (250)。</p><h2 id="约束优先级的使用场景" tabindex="-1">约束优先级的使用场景 <a class="header-anchor" href="#约束优先级的使用场景" aria-label="Permalink to &quot;约束优先级的使用场景&quot;">​</a></h2><p>约束优先级在很多场景下都非常有用。例如，当你想让一个视图在屏幕上居中，但又希望它在某些情况下可以偏移时，你可以使用优先级来控制。</p><ol><li><strong>内容自适应</strong>: 当视图的内容决定其大小时，可以使用低优先级约束来允许视图根据内容调整大小。</li><li><strong>屏幕适配</strong>: 在不同尺寸的屏幕上，某些约束可能需要被打破以适应屏幕。</li><li><strong>动画</strong>: 在动画过程中，你可能需要临时改变某些约束，这时可以使用优先级来确保动画的平滑进行。</li></ol><h2 id="约束优先级示例" tabindex="-1">约束优先级示例 <a class="header-anchor" href="#约束优先级示例" aria-label="Permalink to &quot;约束优先级示例&quot;">​</a></h2><p>假设你想要创建一个按钮，默认情况下，按钮距离父视图顶部 20pt，但当屏幕高度不够时，允许按钮向上移动，甚至与顶部重叠。你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按钮距离顶部至少 20pt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> topConstraint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.topAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">topConstraint.priority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .defaultHigh </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优先级设置为 High (750)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按钮顶部与父视图顶部对齐 (优先级低于上面的约束)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> topConstraint2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.topAnchor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">topConstraint2.priority </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .defaultLow </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优先级设置为 Low (250)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([topConstraint, topConstraint2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个例子中，<code>topConstraint</code> 的优先级较高，所以按钮会尽量保持距离顶部 20pt。但是，如果屏幕高度不够，自动布局引擎会打破 <code>topConstraint</code>，转而满足 <code>topConstraint2</code>，使按钮与顶部对齐。🎉</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>理解约束的优先级是掌握自动布局的关键。通过合理设置约束的优先级，你可以创建出更加灵活和适应性强的界面。记住，优先级越高，约束越重要，自动布局引擎会优先满足高优先级的约束。希望你能灵活运用约束优先级，打造出精美的 iOS 应用！🚀</p>`,18)]))}const g=i(l,[["render",e]]);export{E as __pageData,g as default};
