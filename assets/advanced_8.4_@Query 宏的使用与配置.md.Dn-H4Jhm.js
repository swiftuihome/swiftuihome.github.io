import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"@Query 宏的使用与配置","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/8.4_@Query 宏的使用与配置.md","filePath":"advanced/8.4_@Query 宏的使用与配置.md"}'),n={name:"advanced/8.4_@Query 宏的使用与配置.md"};function r(l,s,d,p,h,o){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="query-宏的使用与配置" tabindex="-1">@Query 宏的使用与配置 <a class="header-anchor" href="#query-宏的使用与配置" aria-label="Permalink to &quot;@Query 宏的使用与配置&quot;">​</a></h1><h2 id="探索-query-宏的强大功能-🚀" tabindex="-1">探索 @Query 宏的强大功能 🚀 <a class="header-anchor" href="#探索-query-宏的强大功能-🚀" aria-label="Permalink to &quot;探索 @Query 宏的强大功能 🚀&quot;">​</a></h2><p>准备好深入了解 SwiftData 中 <code>@Query</code> 宏的强大功能了吗？它就像一个神奇的过滤器，可以帮助你轻松地从数据库中获取所需的数据。使用 <code>@Query</code>，你可以声明式地定义你的数据需求，SwiftData 会自动处理剩下的事情！是不是很棒？🎉</p><h2 id="query-宏的基础使用" tabindex="-1"><code>@Query</code> 宏的基础使用 <a class="header-anchor" href="#query-宏的基础使用" aria-label="Permalink to &quot;`@Query` 宏的基础使用&quot;">​</a></h2><p><code>@Query</code> 宏是 SwiftData 的核心部分，它允许你从持久化存储中获取数据。你可以简单地声明一个属性，并使用 <code>@Query</code> 宏来指定你想要获取的数据类型。例如，如果你有一个 <code>Task</code> 模型，你可以这样使用 <code>@Query</code>：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks: [Task]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行代码会创建一个名为 <code>tasks</code> 的属性，它会自动包含所有 <code>Task</code> 实体。是不是很简单？😎</p><ul><li>你可以使用 <code>@Query</code> 获取任何类型的 SwiftData 模型。</li><li><code>@Query</code> 会自动更新你的视图，当数据发生变化时。</li><li>你可以使用排序和过滤来进一步定制你的查询。</li></ul><h2 id="配置你的-query" tabindex="-1">配置你的 <code>@Query</code> <a class="header-anchor" href="#配置你的-query" aria-label="Permalink to &quot;配置你的 `@Query`&quot;">​</a></h2><p><code>@Query</code> 宏不仅仅是获取所有数据，你还可以通过添加排序规则和过滤器来配置它。例如，你可以按照任务的优先级进行排序，或者只获取已完成的任务。这使得你可以精确地控制你想要显示的数据。</p><ol><li><strong>排序</strong>：你可以使用 <code>SortDescriptor</code> 来指定排序规则。</li><li><strong>过滤</strong>：你可以使用 <code>Predicate</code> 来指定过滤条件。</li><li><strong>动画</strong>：你可以使用 <code>animation</code> 来指定动画效果。</li></ol><p>例如，要按照任务的创建日期进行排序，你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\.creationDate) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks: [Task]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>要只获取已完成的任务，你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #Predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isCompleted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks: [Task]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="高级配置与技巧" tabindex="-1">高级配置与技巧 <a class="header-anchor" href="#高级配置与技巧" aria-label="Permalink to &quot;高级配置与技巧&quot;">​</a></h2><p>除了基本的排序和过滤，<code>@Query</code> 宏还支持更高级的配置。你可以使用多个排序规则，或者使用复杂的谓词来过滤数据。你还可以使用 <code>animation</code> 参数来为你的数据更新添加动画效果。</p><ul><li>使用多个 <code>SortDescriptor</code> 来进行多级排序。</li><li>使用 <code>NSCompoundPredicate</code> 来组合多个谓词。</li><li>使用 <code>withAnimation</code> 来为数据更新添加动画效果。</li></ul><p>例如，要按照优先级和创建日期进行排序，你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SortDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.priority), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SortDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.creationDate)]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks: [Task]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过掌握 <code>@Query</code> 宏的使用与配置，你可以轻松地在你的 SwiftUI 应用中管理和展示数据。加油！💪 你会发现 SwiftData 是一个非常强大的工具。</p>',21)]))}const u=i(n,[["render",r]]);export{c as __pageData,u as default};
