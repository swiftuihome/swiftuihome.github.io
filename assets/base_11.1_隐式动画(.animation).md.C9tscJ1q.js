import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"隐式动画(.animation)","description":"","frontmatter":{},"headers":[],"relativePath":"base/11.1_隐式动画(.animation).md","filePath":"base/11.1_隐式动画(.animation).md"}'),l={name:"base/11.1_隐式动画(.animation).md"};function t(p,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="隐式动画-animation" tabindex="-1">隐式动画(.animation) <a class="header-anchor" href="#隐式动画-animation" aria-label="Permalink to &quot;隐式动画(.animation)&quot;">​</a></h1><p>SwiftUI 隐式动画，让你的界面动起来！🎉 让我们一起探索如何使用 <code>.animation</code> 修饰符，为你的 SwiftUI 视图添加流畅的动画效果。</p><h2 id="什么是隐式动画" tabindex="-1">什么是隐式动画？ <a class="header-anchor" href="#什么是隐式动画" aria-label="Permalink to &quot;什么是隐式动画？&quot;">​</a></h2><p>隐式动画就像魔法一样，✨ 当视图的某个属性发生变化时，SwiftUI 会自动地为这个变化添加动画效果。你只需要告诉 SwiftUI 你想要动画，它就会帮你完成剩下的工作！是不是很棒？</p><ul><li>隐式动画非常容易使用。</li><li>可以为视图的各种属性添加动画，例如 <code>opacity</code>、<code>scale</code>、<code>position</code> 等。</li><li>让你的应用看起来更生动、更吸引人。</li></ul><h2 id="如何使用-animation-修饰符" tabindex="-1">如何使用 <code>.animation</code> 修饰符？ <a class="header-anchor" href="#如何使用-animation-修饰符" aria-label="Permalink to &quot;如何使用 \`.animation\` 修饰符？&quot;">​</a></h2><p>使用 <code>.animation</code> 修饰符非常简单。你只需要将它添加到你想要添加动画的视图上，并指定你想要的动画类型。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isTapped: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点我！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isTapped.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isTapped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isTapped)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个例子中，当按钮被点击时，<code>isTapped</code> 的值会改变，<code>scaleEffect</code> 也会随之改变。<code>.animation</code> 修饰符会为这个变化添加一个 <code>easeInOut</code> 动画，动画时长为 0.5 秒。</p><ul><li><code>.easeInOut</code> 是一种常用的动画类型，它会使动画开始和结束时速度较慢，中间速度较快。</li><li><code>value: isTapped</code> 确保只有当 <code>isTapped</code> 的值改变时，动画才会触发。</li></ul><h2 id="更多动画选项" tabindex="-1">更多动画选项 <a class="header-anchor" href="#更多动画选项" aria-label="Permalink to &quot;更多动画选项&quot;">​</a></h2><p>SwiftUI 提供了多种动画选项，你可以根据自己的需求选择合适的动画类型。</p><ol><li><code>linear</code>: 匀速动画。</li><li><code>easeIn</code>: 动画开始时速度较慢。</li><li><code>easeOut</code>: 动画结束时速度较慢。</li><li><code>easeInOut</code>: 动画开始和结束时速度较慢。</li><li><code>spring</code>: 弹簧动画，模拟弹簧的物理效果。</li></ol><p>你还可以自定义动画的持续时间、延迟等参数，让动画效果更加个性化。 例如，你可以使用 <code>.delay(1)</code> 来延迟动画 1 秒钟。</p><h2 id="实际应用" tabindex="-1">实际应用 <a class="header-anchor" href="#实际应用" aria-label="Permalink to &quot;实际应用&quot;">​</a></h2><p>隐式动画可以用于各种场景，例如：</p><ul><li>按钮点击反馈：当用户点击按钮时，可以添加一个缩放动画，让用户知道他们的操作已经被响应。</li><li>状态切换：当视图的状态发生变化时，可以添加一个淡入淡出动画，让状态切换更加平滑。</li><li>加载动画：在加载数据时，可以添加一个旋转动画，让用户知道应用正在工作。</li></ul><p>隐式动画是 SwiftUI 中一个非常强大的工具，可以帮助你创建更具吸引力和用户体验的应用。🚀 尝试使用不同的动画类型和参数，看看你能创造出什么样的效果吧！</p>`,18)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
