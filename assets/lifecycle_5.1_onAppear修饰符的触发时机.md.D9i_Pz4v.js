import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"onAppear 修饰符：揭秘触发时机 🚀","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/5.1_onAppear修饰符的触发时机.md","filePath":"lifecycle/5.1_onAppear修饰符的触发时机.md"}'),p={name:"lifecycle/5.1_onAppear修饰符的触发时机.md"};function l(t,s,r,h,o,k){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="onappear-修饰符-揭秘触发时机-🚀" tabindex="-1"><code>onAppear</code> 修饰符：揭秘触发时机 🚀 <a class="header-anchor" href="#onappear-修饰符-揭秘触发时机-🚀" aria-label="Permalink to &quot;\`onAppear\` 修饰符：揭秘触发时机 🚀&quot;">​</a></h1><blockquote><p><code>onAppear</code> 修饰符是 SwiftUI 中一个非常实用的工具，它允许你在视图首次出现在屏幕上时执行一些操作。理解它的触发时机至关重要，可以帮助你更好地控制视图的行为和性能。</p></blockquote><h2 id="首次渲染与-onappear-的关系" tabindex="-1">首次渲染与 <code>onAppear</code> 的关系 <a class="header-anchor" href="#首次渲染与-onappear-的关系" aria-label="Permalink to &quot;首次渲染与 \`onAppear\` 的关系&quot;">​</a></h2><p>当 SwiftUI 首次渲染一个视图时，<code>onAppear</code> 修饰符会被调用。这通常发生在视图被添加到视图层级结构中，并且准备好显示在屏幕上的时候。你可以把它想象成视图“破壳而出”的那一刻！🐣</p><ul><li><strong>首次渲染</strong>: 视图第一次出现在屏幕上。</li><li><strong>视图层级</strong>: 视图被添加到视图结构中。</li><li><strong>准备显示</strong>: 视图准备好呈现给用户。</li></ul><h2 id="何时使用-onappear" tabindex="-1">何时使用 <code>onAppear</code>？ <a class="header-anchor" href="#何时使用-onappear" aria-label="Permalink to &quot;何时使用 \`onAppear\`？&quot;">​</a></h2><p><code>onAppear</code> 非常适合执行一些初始化任务，例如：</p><ol><li><strong>加载数据</strong>: 从网络或本地数据库获取数据。</li><li><strong>启动动画</strong>: 开始一个动画效果，让视图更生动。</li><li><strong>设置初始状态</strong>: 根据某些条件设置视图的初始状态。</li></ol><p>例如，你可以使用 <code>onAppear</code> 在视图加载时显示一个欢迎信息，或者启动一个加载指示器。🎉</p><h2 id="onappear-的触发条件" tabindex="-1"><code>onAppear</code> 的触发条件 <a class="header-anchor" href="#onappear-的触发条件" aria-label="Permalink to &quot;\`onAppear\` 的触发条件&quot;">​</a></h2><p><code>onAppear</code> 的触发并非总是那么直观。以下是一些需要注意的关键点：</p><ul><li><strong>视图必须可见</strong>: 只有当视图真正可见时，<code>onAppear</code> 才会触发。如果视图被隐藏或遮挡，<code>onAppear</code> 不会被调用。</li><li><strong>父视图的影响</strong>: 如果父视图首次出现，其子视图的 <code>onAppear</code> 也会被触发。</li><li><strong>导航的影响</strong>: 在导航视图中，当视图被推入导航堆栈时，<code>onAppear</code> 会被调用。</li></ul><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><p>让我们看一个简单的例子：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;视图加载中...&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 模拟加载数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                DispatchQueue.main.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asyncAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">deadline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;视图加载完成！&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在这个例子中，当 <code>MyView</code> 首次出现在屏幕上时，<code>onAppear</code> 会被调用，并在两秒后更新 <code>message</code> 的值。是不是很简单呢？😊</p><p>希望这些解释能够帮助你更好地理解 <code>onAppear</code> 修饰符的触发时机！记住，掌握这些细节可以让你编写出更高效、更流畅的 SwiftUI 应用。👍</p>`,17)]))}const E=a(p,[["render",l]]);export{c as __pageData,E as default};
