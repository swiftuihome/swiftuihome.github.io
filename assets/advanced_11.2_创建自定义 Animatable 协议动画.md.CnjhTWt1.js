import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"创建自定义 Animatable 协议动画","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/11.2_创建自定义 Animatable 协议动画.md","filePath":"advanced/11.2_创建自定义 Animatable 协议动画.md"}'),t={name:"advanced/11.2_创建自定义 Animatable 协议动画.md"};function e(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="创建自定义-animatable-协议动画" tabindex="-1">创建自定义 Animatable 协议动画 <a class="header-anchor" href="#创建自定义-animatable-协议动画" aria-label="Permalink to &quot;创建自定义 Animatable 协议动画&quot;">​</a></h1><h2 id="探索-animatable-协议的奥秘-🚀" tabindex="-1">探索 Animatable 协议的奥秘 🚀 <a class="header-anchor" href="#探索-animatable-协议的奥秘-🚀" aria-label="Permalink to &quot;探索 Animatable 协议的奥秘 🚀&quot;">​</a></h2><p>想让你的 SwiftUI 动画更上一层楼吗？✨ Animatable 协议就是你的秘密武器！它允许你定义如何平滑地改变自定义数据类型，从而创建出令人惊叹的动画效果。准备好深入了解了吗？让我们一起开始吧！</p><h2 id="animatable-协议-动画的基石" tabindex="-1">Animatable 协议：动画的基石 <a class="header-anchor" href="#animatable-协议-动画的基石" aria-label="Permalink to &quot;Animatable 协议：动画的基石&quot;">​</a></h2><p>Animatable 协议的核心在于 <code>animatableData</code> 属性。这个属性必须是符合 VectorArithmetic 协议的类型，例如 <code>Double</code>、<code>CGFloat</code> 或 <code>CGPoint</code>。当你改变一个视图的 <code>animatableData</code> 时，SwiftUI 会自动在起始值和目标值之间进行插值，从而产生动画效果。</p><ul><li><strong>VectorArithmetic</strong>: 确保你的数据类型支持加法和标量乘法。</li><li><strong>插值</strong>: SwiftUI 会自动计算中间值，让动画流畅自然。</li><li><strong>自定义</strong>: 你可以控制动画的每一个细节！</li></ul><h2 id="实战演练-创建自定义动画" tabindex="-1">实战演练：创建自定义动画 <a class="header-anchor" href="#实战演练-创建自定义动画" aria-label="Permalink to &quot;实战演练：创建自定义动画&quot;">​</a></h2><p>让我们通过一个例子来理解如何使用 Animatable 协议。假设你想创建一个可以平滑改变半径的圆形。你可以创建一个自定义的 <code>Animatable</code> 结构体，并让它的 <code>animatableData</code> 属性是半径。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnimatableCircle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Shape </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius: CGFloat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animatableData: CGFloat {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { radius }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect: CGRect) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addArc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: rect.midX, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: rect.midY), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: radius, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startAngle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">degrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endAngle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Angle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">degrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">360</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clockwise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>现在，你可以使用 <code>.animation()</code> 修饰符来触发动画。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AnimatableCircle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isExpanded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isExpanded)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="进阶技巧-更复杂的动画" tabindex="-1">进阶技巧：更复杂的动画 <a class="header-anchor" href="#进阶技巧-更复杂的动画" aria-label="Permalink to &quot;进阶技巧：更复杂的动画&quot;">​</a></h2><p>Animatable 协议不仅仅适用于简单的数值类型。你可以使用 <code>AnimatablePair</code> 来组合多个值，或者创建更复杂的自定义数据类型。例如，你可以创建一个包含颜色和半径的结构体，并让它们同时进行动画。</p><ul><li><strong>AnimatablePair</strong>: 用于组合两个符合 <code>Animatable</code> 协议的值。</li><li><strong>自定义数据类型</strong>: 创建你自己的结构体或类，并让它们符合 <code>Animatable</code> 协议。</li><li><strong>无限可能</strong>: 只要你的数据类型符合 <code>VectorArithmetic</code> 协议，你就可以创建任何你想要的动画！</li></ul><p>掌握 Animatable 协议，你就能创造出令人惊叹的 SwiftUI 动画效果。大胆尝试，发挥你的创造力吧！🎉</p>`,15)]))}const g=i(t,[["render",e]]);export{c as __pageData,g as default};
