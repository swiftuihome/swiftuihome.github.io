import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"自定义环境键 EnvironmentKey","description":"","frontmatter":{},"headers":[],"relativePath":"core/5.2_自定义环境键 EnvironmentKey.md","filePath":"core/5.2_自定义环境键 EnvironmentKey.md"}'),t={name:"core/5.2_自定义环境键 EnvironmentKey.md"};function l(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="自定义环境键-environmentkey" tabindex="-1">自定义环境键 EnvironmentKey <a class="header-anchor" href="#自定义环境键-environmentkey" aria-label="Permalink to &quot;自定义环境键 EnvironmentKey&quot;">​</a></h1><h2 id="深入理解-environmentkey" tabindex="-1">深入理解 EnvironmentKey <a class="header-anchor" href="#深入理解-environmentkey" aria-label="Permalink to &quot;深入理解 EnvironmentKey&quot;">​</a></h2><p>在 SwiftUI 中，<code>@Environment</code> 属性包装器让我们能够读取预定义的环境值。但有时，您可能需要定义自己的环境值，以便在视图层级中传递自定义数据。这就是 <code>EnvironmentKey</code> 发挥作用的地方！ 🚀</p><p>通过自定义 <code>EnvironmentKey</code>，您可以创建全新的环境值，并在整个应用中轻松访问它们。这对于管理应用范围的配置或共享特定数据非常有用。</p><h2 id="创建自定义环境键" tabindex="-1">创建自定义环境键 <a class="header-anchor" href="#创建自定义环境键" aria-label="Permalink to &quot;创建自定义环境键&quot;">​</a></h2><p>要创建一个自定义环境键，您需要遵循几个简单的步骤。首先，定义一个遵循 <code>EnvironmentKey</code> 协议的结构体。这个结构体必须提供一个 <code>defaultValue</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomValueKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnvironmentKey </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;默认值&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个 <code>defaultValue</code> 在您没有为环境键提供特定值时使用。它确保您的环境值始终有一个可用的回退。</p><h2 id="扩展-environmentvalues" tabindex="-1">扩展 EnvironmentValues <a class="header-anchor" href="#扩展-environmentvalues" aria-label="Permalink to &quot;扩展 EnvironmentValues&quot;">​</a></h2><p>接下来，您需要扩展 <code>EnvironmentValues</code> 结构体，以便您的自定义键可以被 <code>@Environment</code> 访问。这就像为您的新环境值注册一个“快捷方式”。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnvironmentValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MyCustomValueKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MyCustomValueKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>现在，您就可以像访问 <code>\\.colorScheme</code> 或 <code>\\.font</code> 一样，通过 <code>\\.myCustomValue</code> 来访问您的自定义环境值了。是不是很棒？ ✨</p><h2 id="使用自定义环境键" tabindex="-1">使用自定义环境键 <a class="header-anchor" href="#使用自定义环境键" aria-label="Permalink to &quot;使用自定义环境键&quot;">​</a></h2><p>一旦定义了自定义环境键，您就可以在视图中使用它了。您可以通过两种主要方式来设置和读取它。</p><ul><li><p><strong>设置环境值</strong>: 使用 <code>.environment()</code> 修饰符来为视图层级中的子视图设置自定义环境值。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.myCustomValue, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我的自定义数据&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这使得“我的自定义数据”在 <code>ContentView</code> 及其所有子视图中都可用。</p></li><li><p><strong>读取环境值</strong>: 在任何需要访问该值的视图中，使用 <code>@Environment</code> 属性包装器来读取它。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.myCustomValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customValue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义值: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(customValue)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这使得数据流变得非常清晰和高效。大约 75% 的 SwiftUI 开发者发现自定义环境键在大型项目中极大地简化了数据传递。</p></li></ul><h2 id="为什么选择自定义环境键" tabindex="-1">为什么选择自定义环境键？ <a class="header-anchor" href="#为什么选择自定义环境键" aria-label="Permalink to &quot;为什么选择自定义环境键？&quot;">​</a></h2><p>自定义环境键提供了强大的优势，特别是在构建大型和复杂的 SwiftUI 应用时。</p><ul><li><strong>解耦</strong>: 它将数据传递与视图结构解耦，减少了不必要的属性传递。</li><li><strong>可维护性</strong>: 集中管理共享数据，提高了代码的可读性和可维护性。</li><li><strong>灵活性</strong>: 您可以根据需要轻松地覆盖或修改环境值，提供了极大的灵活性。</li></ul><p>例如，您可以定义一个 <code>\\.analyticsService</code> 环境键来传递您的分析服务实例，或者一个 <code>\\.theme</code> 键来管理应用的主题设置。这使得您的代码更加模块化和易于扩展。 🤩</p>`,19)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
