import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"视图坐标空间转换","description":"","frontmatter":{},"headers":[],"relativePath":"core/8.5_视图坐标空间转换.md","filePath":"core/8.5_视图坐标空间转换.md"}'),e={name:"core/8.5_视图坐标空间转换.md"};function t(p,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="视图坐标空间转换" tabindex="-1">视图坐标空间转换 <a class="header-anchor" href="#视图坐标空间转换" aria-label="Permalink to &quot;视图坐标空间转换&quot;">​</a></h1><h2 id="理解-swiftui-中的坐标空间" tabindex="-1">理解 SwiftUI 中的坐标空间 <a class="header-anchor" href="#理解-swiftui-中的坐标空间" aria-label="Permalink to &quot;理解 SwiftUI 中的坐标空间&quot;">​</a></h2><p>在 SwiftUI 中，视图的坐标空间是一个非常重要的概念，它决定了视图如何定位和布局。理解坐标空间转换，能让你更精确地控制视图的位置和交互。🚀 坐标空间允许你在不同的参考系中定位视图，这对于创建复杂的动画和自定义布局至关重要。</p><ul><li><strong>全局坐标空间 (Global Coordinate Space)</strong>：指的是屏幕的坐标系。</li><li><strong>本地坐标空间 (Local Coordinate Space)</strong>：指的是视图自身的坐标系。</li><li><strong>自定义命名坐标空间 (Named Coordinate Space)</strong>：允许你创建自己的坐标系，并在视图层级中共享。</li></ul><h2 id="坐标空间转换方法" tabindex="-1">坐标空间转换方法 <a class="header-anchor" href="#坐标空间转换方法" aria-label="Permalink to &quot;坐标空间转换方法&quot;">​</a></h2><p>SwiftUI 提供了几种方法来进行坐标空间转换，让你可以在不同的坐标系之间进行切换。这些方法包括 <code>frame(in:)</code> 和 <code>position(in:)</code>。</p><ol><li><p><strong><code>frame(in:)</code></strong>：这个方法可以获取视图在指定坐标空间中的 frame。例如，你可以获取视图在全局坐标空间中的位置，从而确定它在屏幕上的绝对位置。</p></li><li><p><strong><code>position(in:)</code></strong>：这个方法允许你设置视图在指定坐标空间中的位置。这对于创建复杂的布局和动画非常有用。</p></li></ol><h2 id="坐标空间转换的应用" tabindex="-1">坐标空间转换的应用 <a class="header-anchor" href="#坐标空间转换的应用" aria-label="Permalink to &quot;坐标空间转换的应用&quot;">​</a></h2><p>坐标空间转换在很多场景下都非常有用。例如，你可以使用它来实现拖拽视图的功能，或者创建自定义的动画效果。🎉</p><ul><li><strong>拖拽视图</strong>：通过获取视图在全局坐标空间中的位置，你可以轻松地实现拖拽功能。</li><li><strong>自定义动画</strong>：通过在不同的坐标空间中设置视图的位置，你可以创建出各种各样的动画效果。</li></ul><h2 id="实例演示" tabindex="-1">实例演示 <a class="header-anchor" href="#实例演示" aria-label="Permalink to &quot;实例演示&quot;">​</a></h2><p>让我们通过一个简单的例子来演示坐标空间转换的使用。假设你想要创建一个可以拖拽的视图，并且希望在拖拽过程中，视图能够保持在屏幕的中心位置。你可以使用 <code>GeometryReader</code> 来获取屏幕的尺寸，然后使用 <code>position(in:)</code> 方法来设置视图的位置。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DraggableRectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGSize.zero</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset.width, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset.height)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    DragGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.translation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个例子中，我们使用了 <code>GeometryReader</code> 来获取屏幕的尺寸，然后使用 <code>position(in:)</code> 方法来设置矩形的位置。通过拖拽手势，我们可以改变 <code>offset</code> 的值，从而实现拖拽效果。希望这个例子能帮助你更好地理解坐标空间转换的使用。👍</p>`,14)]))}const g=i(e,[["render",t]]);export{o as __pageData,g as default};
