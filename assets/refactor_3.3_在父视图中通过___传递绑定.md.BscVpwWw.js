import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"在父视图中通过$传递绑定","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/3.3_在父视图中通过`$`传递绑定.md","filePath":"refactor/3.3_在父视图中通过`$`传递绑定.md"}'),t={name:"refactor/3.3_在父视图中通过`$`传递绑定.md"};function l(p,s,r,h,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="在父视图中通过-传递绑定" tabindex="-1">在父视图中通过<code>$</code>传递绑定 <a class="header-anchor" href="#在父视图中通过-传递绑定" aria-label="Permalink to &quot;在父视图中通过\`$\`传递绑定&quot;">​</a></h1><h2 id="传递绑定的魔法-✨" tabindex="-1">传递绑定的魔法 ✨ <a class="header-anchor" href="#传递绑定的魔法-✨" aria-label="Permalink to &quot;传递绑定的魔法 ✨&quot;">​</a></h2><p>在SwiftUI中，当您需要在父视图和子视图之间建立双向数据流时，<code>@Binding</code>是您的最佳选择。 想象一下，您有一个子视图，它需要修改父视图中的某个状态。 这就是<code>$</code>符号发挥作用的地方！</p><h2 id="理解-操作符" tabindex="-1">理解<code>$</code>操作符 <a class="header-anchor" href="#理解-操作符" aria-label="Permalink to &quot;理解\`$\`操作符&quot;">​</a></h2><p><code>$</code>操作符是SwiftUI中一个非常强大的工具。 它允许您将一个<code>@State</code>属性转换为一个<code>Binding</code>。 当您在父视图中声明一个<code>@State</code>变量时，它拥有数据的“所有权”。</p><p>例如，如果您有一个<code>@State var count: Int = 0</code>，那么<code>count</code>就是实际的值。 但是，如果您想将这个值传递给子视图并允许子视图修改它，您就需要传递一个绑定。</p><h2 id="如何在父视图中传递绑定" tabindex="-1">如何在父视图中传递绑定 <a class="header-anchor" href="#如何在父视图中传递绑定" aria-label="Permalink to &quot;如何在父视图中传递绑定&quot;">​</a></h2><p>在父视图中，将<code>@State</code>属性传递给子视图的<code>@Binding</code>属性时，您只需在<code>@State</code>属性名称前加上<code>$</code>符号。 这会创建一个对原始<code>@State</code>属性的引用，而不是复制它的值。</p><p>让我们看一个例子：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> progress: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;当前进度: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(progress, specifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%.2f&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 传递一个绑定到子视图</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ChildView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">currentProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $progress)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个例子中，<code>$progress</code>创建了一个<code>Binding&lt;Double&gt;</code>，它指向<code>ParentView</code>中的<code>progress</code>状态变量。 子视图<code>ChildView</code>会接收这个绑定，并可以通过它直接修改父视图的<code>progress</code>。</p><h2 id="为什么-如此重要" tabindex="-1">为什么<code>$</code>如此重要？ <a class="header-anchor" href="#为什么-如此重要" aria-label="Permalink to &quot;为什么\`$\`如此重要？&quot;">​</a></h2><p>使用<code>$</code>传递绑定是实现SwiftUI双向数据流的关键。 它确保了父子视图之间的数据同步，让您的UI响应更加流畅和直观。 🚀</p><ul><li><strong>实时更新</strong>: 当子视图通过绑定修改数据时，父视图会立即感知到变化并更新其UI。</li><li><strong>代码简洁</strong>: 避免了传统的回调函数或委托模式，使代码更加简洁易读。</li><li><strong>类型安全</strong>: Swift的类型系统确保您传递的绑定类型与子视图期望的类型匹配。</li></ul><p>通过这种方式，您可以轻松构建高度交互和可维护的SwiftUI组件。 掌握<code>$</code>操作符，您就掌握了SwiftUI数据流的核心！ 🌟</p>`,15)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
