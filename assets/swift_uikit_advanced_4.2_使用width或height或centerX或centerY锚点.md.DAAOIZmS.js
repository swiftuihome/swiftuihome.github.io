import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"使用width或height或centerX或centerY锚点","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/4.2_使用width或height或centerX或centerY锚点.md","filePath":"swift/uikit/advanced/4.2_使用width或height或centerX或centerY锚点.md"}'),t={name:"swift/uikit/advanced/4.2_使用width或height或centerX或centerY锚点.md"};function h(l,s,p,r,k,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用width或height或centerx或centery锚点" tabindex="-1">使用width或height或centerX或centerY锚点 <a class="header-anchor" href="#使用width或height或centerx或centery锚点" aria-label="Permalink to &quot;使用width或height或centerX或centerY锚点&quot;">​</a></h1><blockquote><p>在UIKit中，<code>widthAnchor</code>、<code>heightAnchor</code>、<code>centerXAnchor</code> 和 <code>centerYAnchor</code> 是用于创建和管理视图约束的关键属性。它们允许你精确地控制视图的大小和位置，而无需依赖传统的frame设置。让我们深入了解如何使用这些锚点来构建灵活且响应式的用户界面。🚀</p></blockquote><h2 id="理解-width-和-height-锚点" tabindex="-1">理解 Width 和 Height 锚点 <a class="header-anchor" href="#理解-width-和-height-锚点" aria-label="Permalink to &quot;理解 Width 和 Height 锚点&quot;">​</a></h2><p><code>widthAnchor</code> 和 <code>heightAnchor</code> 分别用于定义视图的宽度和高度。你可以使用它们来设置固定尺寸，或者将视图的尺寸与其他视图关联起来。例如，你可以让一个按钮的宽度等于其父视图宽度的一半。</p><ul><li><strong>固定尺寸</strong>: 你可以设置一个视图的宽度或高度为一个常量值。</li><li><strong>相对尺寸</strong>: 你可以使一个视图的宽度或高度与另一个视图的宽度或高度相关联。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置视图的宽度为100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.widthAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置视图的高度为50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.heightAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="使用-centerx-和-centery-锚点" tabindex="-1">使用 CenterX 和 CenterY 锚点 <a class="header-anchor" href="#使用-centerx-和-centery-锚点" aria-label="Permalink to &quot;使用 CenterX 和 CenterY 锚点&quot;">​</a></h2><p><code>centerXAnchor</code> 和 <code>centerYAnchor</code> 用于将视图的中心点与其父视图或其他视图的中心点对齐。这对于在屏幕上精确定位视图非常有用。你可以将一个视图水平居中，垂直居中，或者同时水平和垂直居中。</p><ul><li><strong>水平居中</strong>: 使用 <code>centerXAnchor</code> 将视图的中心点与父视图的中心点在水平方向上对齐。</li><li><strong>垂直居中</strong>: 使用 <code>centerYAnchor</code> 将视图的中心点与父视图的中心点在垂直方向上对齐。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将视图水平居中于父视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.centerXAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(superview.centerXAnchor).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将视图垂直居中于父视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.centerYAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(superview.centerYAnchor).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="组合使用锚点" tabindex="-1">组合使用锚点 <a class="header-anchor" href="#组合使用锚点" aria-label="Permalink to &quot;组合使用锚点&quot;">​</a></h2><p>你可以将 <code>widthAnchor</code>、<code>heightAnchor</code>、<code>centerXAnchor</code> 和 <code>centerYAnchor</code> 组合起来，以创建复杂的布局。例如，你可以创建一个按钮，使其宽度为父视图的一半，高度为40，并且在父视图中水平和垂直居中。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置宽度为父视图的一半</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myButton.widthAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(superview.widthAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiplier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置高度为40</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myButton.heightAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 水平居中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myButton.centerXAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(superview.centerXAnchor).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 垂直居中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myButton.centerYAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(superview.centerYAnchor).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="示例-创建一个居中正方形" tabindex="-1">示例：创建一个居中正方形 <a class="header-anchor" href="#示例-创建一个居中正方形" aria-label="Permalink to &quot;示例：创建一个居中正方形&quot;">​</a></h2><p>让我们创建一个简单的例子，在父视图中创建一个居中的正方形。这个正方形的宽度和高度相等，并且在父视图中水平和垂直居中。</p><ol><li>创建正方形视图。</li><li>设置宽度和高度相等。</li><li>水平居中。</li><li>垂直居中。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> squareView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squareView.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIColor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">redColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squareView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">superview.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(squareView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置宽度等于高度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squareView.widthAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(squareView.heightAnchor).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置宽度为100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squareView.widthAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 水平居中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squareView.centerXAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(superview.centerXAnchor).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 垂直居中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squareView.centerYAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraintEqualToAnchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(superview.centerYAnchor).active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过使用 <code>widthAnchor</code>、<code>heightAnchor</code>、<code>centerXAnchor</code> 和 <code>centerYAnchor</code>，你可以创建灵活且适应性强的用户界面。这些锚点提供了一种强大而直观的方式来定义视图的大小和位置，确保你的应用在各种设备上都能呈现出最佳效果。记住，实践是掌握这些概念的关键！💪 祝你编码愉快！🎉</p>`,19)]))}const E=i(t,[["render",h]]);export{o as __pageData,E as default};
