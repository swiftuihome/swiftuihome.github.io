import{_ as i,c as a,o as t,ag as s}from"./chunks/framework.ymCRTBvy.js";const u=JSON.parse('{"title":"更新视图：updateUIView/updateUIViewController 的魔力 ✨","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/13.3_updateUIView-updateUIViewController方法.md","filePath":"lifecycle/13.3_updateUIView-updateUIViewController方法.md"}'),l={name:"lifecycle/13.3_updateUIView-updateUIViewController方法.md"};function n(o,e,d,p,r,c){return t(),a("div",null,e[0]||(e[0]=[s('<h1 id="更新视图-updateuiview-updateuiviewcontroller-的魔力-✨" tabindex="-1">更新视图：<code>updateUIView/updateUIViewController</code> 的魔力 ✨ <a class="header-anchor" href="#更新视图-updateuiview-updateuiviewcontroller-的魔力-✨" aria-label="Permalink to &quot;更新视图：`updateUIView/updateUIViewController` 的魔力 ✨&quot;">​</a></h1><blockquote><p>当你使用 <code>UIViewRepresentable</code> 或 <code>UIViewControllerRepresentable</code> 将 UIKit/AppKit 视图集成到 SwiftUI 中时，<code>updateUIView</code> 或 <code>updateUIViewController</code> 方法扮演着至关重要的角色。它们是 SwiftUI 与底层视图进行数据同步的桥梁。</p><p>这个方法会在 SwiftUI 视图的状态发生变化时被调用。例如，如果你的 <code>@State</code> 变量更新了，或者 <code>Binding</code> 属性发生了改变，SwiftUI 就会通知你的 <code>Representable</code> 去更新其封装的 UIKit/AppKit 视图。</p></blockquote><h2 id="何时调用-updateuiview-updateuiviewcontroller-🚀" tabindex="-1">何时调用 <code>updateUIView/updateUIViewController</code> 🚀 <a class="header-anchor" href="#何时调用-updateuiview-updateuiviewcontroller-🚀" aria-label="Permalink to &quot;何时调用 `updateUIView/updateUIViewController` 🚀&quot;">​</a></h2><p>理解这个方法的调用时机至关重要。它不是每次视图重新渲染时都调用，而是当 SwiftUI 认为需要更新底层视图时。</p><p>以下是一些常见的触发场景：</p><ul><li><strong>状态变化：</strong> 当 <code>Representable</code> 结构体中的 <code>@State</code> 或 <code>@Binding</code> 属性发生变化时。</li><li><strong>环境对象更新：</strong> 如果你的视图依赖于 <code>EnvironmentObject</code>，并且该对象发布了更新。</li><li><strong>父视图更新：</strong> 当包含 <code>Representable</code> 的父 SwiftUI 视图重新渲染，并传递了新的数据给 <code>Representable</code>。</li></ul><h2 id="实现高效的更新逻辑-💡" tabindex="-1">实现高效的更新逻辑 💡 <a class="header-anchor" href="#实现高效的更新逻辑-💡" aria-label="Permalink to &quot;实现高效的更新逻辑 💡&quot;">​</a></h2><p>在 <code>updateUIView</code> 或 <code>updateUIViewController</code> 中，你应该只更新那些真正需要改变的属性。避免不必要的视图重绘或昂贵的操作，这会显著提升性能。</p><p>例如，如果你有一个 <code>UILabel</code>，并且只有文本内容改变了，就只更新 <code>label.text</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiView: UILabel, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uiView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uiView.textColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.textColor</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="性能优化小贴士-📈" tabindex="-1">性能优化小贴士 📈 <a class="header-anchor" href="#性能优化小贴士-📈" aria-label="Permalink to &quot;性能优化小贴士 📈&quot;">​</a></h2><p>为了确保你的集成视图表现出色，请记住以下几点：</p><ul><li><strong>最小化更新：</strong> 仅更新视图中发生变化的属性。</li><li><strong>避免昂贵操作：</strong> 避免在 <code>update</code> 方法中执行耗时的计算或网络请求。</li><li><strong>利用 <code>Coordinator</code>：</strong> 对于更复杂的交互和委托模式，<code>Coordinator</code> 是一个绝佳的选择。</li></ul><p>通过精心实现 <code>updateUIView</code> 或 <code>updateUIViewController</code>，你可以确保你的 SwiftUI 应用与 UIKit/AppKit 组件无缝协作，提供流畅且响应迅速的用户体验。你正在掌握 SwiftUI 集成的核心！🥳</p>',14)]))}const k=i(l,[["render",n]]);export{u as __pageData,k as default};
