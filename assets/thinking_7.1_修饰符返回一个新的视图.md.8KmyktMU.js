import{_ as a,c as s,o as e,ag as l}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"修饰符返回一个新的视图","description":"","frontmatter":{},"headers":[],"relativePath":"thinking/7.1_修饰符返回一个新的视图.md","filePath":"thinking/7.1_修饰符返回一个新的视图.md"}'),t={name:"thinking/7.1_修饰符返回一个新的视图.md"};function n(o,i,r,p,d,h){return e(),s("div",null,i[0]||(i[0]=[l(`<h1 id="修饰符返回一个新的视图" tabindex="-1">修饰符返回一个新的视图 <a class="header-anchor" href="#修饰符返回一个新的视图" aria-label="Permalink to &quot;修饰符返回一个新的视图&quot;">​</a></h1><blockquote><p>SwiftUI 的修饰符设计中，一个核心概念是<strong>修饰符总是返回一个新的视图</strong>。这意味着每次你应用一个修饰符，你实际上并没有改变原始视图，而是创建了一个新的、修改后的视图。这对于理解 SwiftUI 的工作方式至关重要。🎉</p></blockquote><h2 id="修饰符的不可变性" tabindex="-1">修饰符的不可变性 <a class="header-anchor" href="#修饰符的不可变性" aria-label="Permalink to &quot;修饰符的不可变性&quot;">​</a></h2><p>在 SwiftUI 中，视图是不可变的。当你使用一个修饰符时，例如 <code>.padding()</code> 或 <code>.foregroundColor()</code>，你不是在修改现有的视图实例，而是在创建一个新的视图实例，这个新实例包含了你所应用的修改。这种不可变性是 SwiftUI 数据驱动架构的基础。</p><ul><li>视图的不可变性确保了数据流的可预测性。</li><li>每次修改都会产生新的视图，避免了副作用。</li><li>这使得 SwiftUI 能够高效地管理和更新 UI。</li></ul><h2 id="创建新视图的机制" tabindex="-1">创建新视图的机制 <a class="header-anchor" href="#创建新视图的机制" aria-label="Permalink to &quot;创建新视图的机制&quot;">​</a></h2><p>修饰符通过返回一个新的视图来实现其功能。这个新的视图通常是原始视图的一个包装器，它包含了原始视图以及修饰符所带来的改变。例如，当你使用 <code>.padding()</code> 时，SwiftUI 实际上创建了一个新的视图，这个视图在原始视图周围添加了指定的内边距。</p><ol><li>原始视图保持不变。</li><li>修饰符创建一个新的视图实例。</li><li>新的视图包含了原始视图和修改。</li></ol><h2 id="链式调用的影响" tabindex="-1">链式调用的影响 <a class="header-anchor" href="#链式调用的影响" aria-label="Permalink to &quot;链式调用的影响&quot;">​</a></h2><p>由于每个修饰符都返回一个新的视图，你可以将多个修饰符链式调用在一起。每个修饰符都会在前一个修饰符返回的视图上进行操作，最终生成一个包含了所有修改的新视图。这种链式调用是 SwiftUI 声明式语法的关键。</p><ul><li>链式调用使得代码更简洁易读。</li><li>每个修饰符都独立工作，易于理解和维护。</li><li>最终的视图是所有修饰符的组合结果。</li></ul><p>例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.title)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>.padding()</code> 返回一个新的视图，然后 <code>.foregroundColor(.blue)</code> 在这个新的视图上再次创建一个新的视图，最后 <code>.font(.title)</code> 再次创建一个新的视图。最终，你得到的是一个包含了所有这些修改的 <code>Text</code> 视图。</p><h2 id="性能考量" tabindex="-1">性能考量 <a class="header-anchor" href="#性能考量" aria-label="Permalink to &quot;性能考量&quot;">​</a></h2><p>虽然每次应用修饰符都会创建一个新的视图，但 SwiftUI 进行了优化，以确保性能不会受到影响。SwiftUI 使用了一种称为“差异化更新”的技术，它只更新屏幕上真正发生变化的部分。这意味着即使你创建了许多新的视图，SwiftUI 也会尽可能地重用现有的视图，从而减少了不必要的渲染。🚀</p><p>总而言之，理解修饰符返回一个新的视图是掌握 SwiftUI 的关键。这种设计模式确保了数据流的可预测性，使得 UI 的构建和维护更加简单和高效。记住，每次你应用一个修饰符，你都在创建一个新的视图，而不是修改现有的视图。👍</p>`,17)]))}const u=a(t,[["render",n]]);export{k as __pageData,u as default};
