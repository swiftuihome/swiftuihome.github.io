import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"10.1_KeyframeAnimator 视图基础","description":"","frontmatter":{},"headers":[],"relativePath":"animation/10.1_KeyframeAnimator 视图基础.md","filePath":"animation/10.1_KeyframeAnimator 视图基础.md"}'),l={name:"animation/10.1_KeyframeAnimator 视图基础.md"};function t(r,s,p,h,k,E){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_10-1-keyframeanimator-视图基础" tabindex="-1">10.1_KeyframeAnimator 视图基础 <a class="header-anchor" href="#_10-1-keyframeanimator-视图基础" aria-label="Permalink to &quot;10.1_KeyframeAnimator 视图基础&quot;">​</a></h1><h2 id="keyframeanimator-视图基础" tabindex="-1">KeyframeAnimator 视图基础 <a class="header-anchor" href="#keyframeanimator-视图基础" aria-label="Permalink to &quot;KeyframeAnimator 视图基础&quot;">​</a></h2><p>准备好探索 SwiftUI 中令人兴奋的关键帧动画了吗？🎉 <code>KeyframeAnimator</code> 视图为你打开了一扇大门，让你能够以精确的时间控制和令人惊叹的视觉效果来制作动画。让我们一起深入了解吧！</p><p><code>KeyframeAnimator</code> 允许你定义动画的关键帧，这些关键帧指定了动画在特定时间点的值。你可以使用不同的关键帧类型，例如线性、弹簧和立方关键帧，来创建各种动画效果。这为你提供了极大的灵活性，可以根据你的需求定制动画。</p><ul><li>关键帧动画非常适合创建复杂的动画序列。</li><li>你可以精确控制动画的时间和值。</li><li>它允许你创建各种动画效果，从简单的过渡到复杂的运动。</li></ul><h2 id="使用-keyframeanimator" tabindex="-1">使用 KeyframeAnimator <a class="header-anchor" href="#使用-keyframeanimator" aria-label="Permalink to &quot;使用 KeyframeAnimator&quot;">​</a></h2><p>使用 <code>KeyframeAnimator</code> 非常简单。你需要做的就是创建一个 <code>KeyframeAnimator</code> 视图，并指定要动画化的值和关键帧轨道。关键帧轨道定义了动画在不同时间点的值。</p><p>例如，你可以使用 <code>KeyframeAnimator</code> 来动画化视图的位置、大小、旋转或任何其他可动画化的属性。这为你提供了无限的可能性，可以创建引人入胜且令人难忘的用户体验。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KeyframeAnimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initialValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyframes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    KeyframeTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="关键帧轨道" tabindex="-1">关键帧轨道 <a class="header-anchor" href="#关键帧轨道" aria-label="Permalink to &quot;关键帧轨道&quot;">​</a></h2><p>关键帧轨道是 <code>KeyframeAnimator</code> 的核心。它定义了动画在不同时间点的值。你可以使用不同的关键帧类型来创建各种动画效果。</p><p>以下是一些常用的关键帧类型：</p><ol><li><strong>LinearKeyframe</strong>: 在两个值之间创建线性过渡。</li><li><strong>SpringKeyframe</strong>: 创建一个弹簧动画效果。</li><li><strong>CubicKeyframe</strong>: 使用三次贝塞尔曲线创建平滑的过渡。</li></ol><p>通过组合不同的关键帧类型，你可以创建复杂的动画序列，这些序列可以精确控制动画的时间和值。</p><h2 id="动画配置" tabindex="-1">动画配置 <a class="header-anchor" href="#动画配置" aria-label="Permalink to &quot;动画配置&quot;">​</a></h2><p><code>KeyframeAnimator</code> 还允许你配置动画的各种属性，例如循环模式、速度和延迟。这为你提供了更多的控制权，可以根据你的需求定制动画。</p><ul><li>你可以设置动画循环播放。</li><li>你可以调整动画的速度。</li><li>你可以添加延迟，以便在动画开始之前等待一段时间。</li></ul><p>通过配置这些属性，你可以创建更具吸引力和互动性的动画。相信你一定能掌握它！🚀</p>`,18)]))}const m=i(l,[["render",t]]);export{o as __pageData,m as default};
