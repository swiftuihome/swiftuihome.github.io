import{_ as e,c as d,o as a,ag as c}from"./chunks/framework.ymCRTBvy.js";const u=JSON.parse('{"title":"实现自定义导航控制器（Push或Pop）转场","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/14.2_实现自定义导航控制器（Push或Pop）转场.md","filePath":"swift/uikit/advanced/14.2_实现自定义导航控制器（Push或Pop）转场.md"}'),t={name:"swift/uikit/advanced/14.2_实现自定义导航控制器（Push或Pop）转场.md"};function i(r,o,n,l,p,s){return a(),d("div",null,o[0]||(o[0]=[c('<h1 id="实现自定义导航控制器-push或pop-转场" tabindex="-1">实现自定义导航控制器（Push或Pop）转场 <a class="header-anchor" href="#实现自定义导航控制器-push或pop-转场" aria-label="Permalink to &quot;实现自定义导航控制器（Push或Pop）转场&quot;">​</a></h1><h2 id="导航控制器转场核心概念" tabindex="-1">导航控制器转场核心概念 <a class="header-anchor" href="#导航控制器转场核心概念" aria-label="Permalink to &quot;导航控制器转场核心概念&quot;">​</a></h2><p>自定义导航控制器转场是iOS开发中的一项强大技术，它允许你完全掌控视图控制器在<code>push</code>和<code>pop</code>操作时的视觉呈现。这不仅仅是美观，更是提升用户体验的关键！想象一下，你的应用可以拥有独一无二的切换效果，让用户眼前一亮。✨</p><h2 id="实现自定义push转场" tabindex="-1">实现自定义Push转场 <a class="header-anchor" href="#实现自定义push转场" aria-label="Permalink to &quot;实现自定义Push转场&quot;">​</a></h2><p>要实现自定义<code>push</code>转场，你需要遵循<code>UINavigationControllerDelegate</code>协议。这个协议提供了一个关键方法：<code>navigationController(_:animationControllerFor:from:to:)</code>。在这个方法中，你将返回一个遵循<code>UIViewControllerAnimatedTransitioning</code>协议的对象，它负责定义动画的具体细节。</p><ul><li><strong>步骤一</strong>：设置导航控制器的代理为你的自定义对象。</li><li><strong>步骤二</strong>：在代理方法中，判断转场类型是否为<code>push</code>。</li><li><strong>步骤三</strong>：返回一个自定义的动画控制器实例。</li></ul><p>例如，你可以创建一个从底部滑入的<code>push</code>动画，让新视图控制器优雅地出现在屏幕上。</p><h2 id="实现自定义pop转场" tabindex="-1">实现自定义Pop转场 <a class="header-anchor" href="#实现自定义pop转场" aria-label="Permalink to &quot;实现自定义Pop转场&quot;">​</a></h2><p>与<code>push</code>转场类似，<code>pop</code>转场也通过<code>navigationController(_:animationControllerFor:from:to:)</code>方法来处理。关键在于识别转场操作是<code>pop</code>。通常，<code>pop</code>动画会是<code>push</code>动画的逆过程，确保用户体验的连贯性。</p><ul><li><strong>步骤一</strong>：在同一个代理方法中，判断转场类型是否为<code>pop</code>。</li><li><strong>步骤二</strong>：返回一个针对<code>pop</code>操作的动画控制器实例。</li><li><strong>步骤三</strong>：确保<code>pop</code>动画与<code>push</code>动画在视觉上形成对称。</li></ul><p>一个常见的<code>pop</code>动画是让视图控制器向下滑出屏幕，与从底部滑入的<code>push</code>形成完美闭环。</p><h2 id="动画控制器详解" tabindex="-1">动画控制器详解 <a class="header-anchor" href="#动画控制器详解" aria-label="Permalink to &quot;动画控制器详解&quot;">​</a></h2><p>动画控制器（遵循<code>UIViewControllerAnimatedTransitioning</code>协议的对象）是自定义转场的真正核心。它有两个主要方法：</p><ol><li><code>transitionDuration(using:)</code>：定义动画的持续时间。一个流畅的动画通常在0.3到0.7秒之间。</li><li><code>animateTransition(using:)</code>：这是你编写所有动画逻辑的地方。你将在这里操作<code>from</code>视图和<code>to</code>视图的<code>transform</code>、<code>alpha</code>等属性。</li></ol><p>例如，你可以让<code>from</code>视图逐渐缩小并淡出，同时让<code>to</code>视图从屏幕外放大并淡入。这需要精确计算视图的初始和最终状态。</p><h2 id="动画上下文与视图层级" tabindex="-1">动画上下文与视图层级 <a class="header-anchor" href="#动画上下文与视图层级" aria-label="Permalink to &quot;动画上下文与视图层级&quot;">​</a></h2><p>在<code>animateTransition(using:)</code>方法中，你将获得一个<code>UIViewControllerContextTransitioning</code>对象。这个上下文提供了转场所需的所有信息，包括：</p><ul><li><code>containerView</code>：所有转场动画发生的地方。你必须将<code>to</code>视图添加到这个视图上。</li><li><code>view(forKey:)</code>：获取<code>from</code>视图和<code>to</code>视图。</li><li><code>viewController(forKey:)</code>：获取<code>from</code>视图控制器和<code>to</code>视图控制器。</li></ul><p>记住，正确的视图层级管理至关重要。通常，<code>to</code>视图会被添加到<code>containerView</code>的顶部，而<code>from</code>视图则在其下方。完成动画后，务必调用<code>context.completeTransition(true)</code>来通知系统转场已完成。🚀 掌握这些，你就能创造出令人惊叹的导航转场效果！</p>',19)]))}const _=e(t,[["render",i]]);export{u as __pageData,_ as default};
