import{_ as e,c as t,o as i,ag as r}from"./chunks/framework.ymCRTBvy.js";const u=JSON.parse('{"title":"UIKit编程入门：纯代码界面开发基础","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/目录.md","filePath":"swift/uikit/basics/目录.md"}'),o={name:"swift/uikit/basics/目录.md"};function l(n,a,_,s,h,c){return i(),t("div",null,a[0]||(a[0]=[r('<h1 id="uikit编程入门-纯代码界面开发基础" tabindex="-1">UIKit编程入门：纯代码界面开发基础 <a class="header-anchor" href="#uikit编程入门-纯代码界面开发基础" aria-label="Permalink to &quot;UIKit编程入门：纯代码界面开发基础&quot;">​</a></h1><h2 id="_1-创建无storyboard项目" tabindex="-1">1. 创建无Storyboard项目 <a class="header-anchor" href="#_1-创建无storyboard项目" aria-label="Permalink to &quot;1. 创建无Storyboard项目&quot;">​</a></h2><p>1.1_安装和配置Xcode开发环境 1.2_创建新的iOS_App项目模板 1.3_删除Main.storyboard文件 1.4_移除Info.plist中的Storyboard配置 1.5_修改SceneDelegate以编程方式设置根视图</p><h2 id="_2-理解uikit核心概念" tabindex="-1">2. 理解UIKit核心概念 <a class="header-anchor" href="#_2-理解uikit核心概念" aria-label="Permalink to &quot;2. 理解UIKit核心概念&quot;">​</a></h2><p>2.1_UIWindow：应用内容的容器 2.2_UIScreen：物理屏幕信息 2.3_UIView：视图对象的基础 2.4_UIViewController：视图控制器角色 2.5_UIApplication与AppDelegate生命周期 2.6_UIScene与SceneDelegate生命周期</p><h2 id="_3-文本与标签控件" tabindex="-1">3. 文本与标签控件 <a class="header-anchor" href="#_3-文本与标签控件" aria-label="Permalink to &quot;3. 文本与标签控件&quot;">​</a></h2><p>3.1_创建和配置UILabel 3.2_创建和配置UITextField 3.3_创建和配置UITextView 3.4_富文本NSAttributedString使用</p><h2 id="_4-按钮与交互控件" tabindex="-1">4. 按钮与交互控件 <a class="header-anchor" href="#_4-按钮与交互控件" aria-label="Permalink to &quot;4. 按钮与交互控件&quot;">​</a></h2><p>4.1_创建和配置UIButton 4.2_为按钮添加点击事件 4.3_创建和配置UISwitch 4.4_创建和配置UISlider 4.5_创建和配置UISegmentedControl</p><h2 id="_5-视图与显示控件" tabindex="-1">5. 视图与显示控件 <a class="header-anchor" href="#_5-视图与显示控件" aria-label="Permalink to &quot;5. 视图与显示控件&quot;">​</a></h2><p>5.1_创建和配置UIImageView 5.2_使用UIActivityIndicatorView显示加载 5.3_使用UIProgressView显示进度 5.4_创建和配置UIView作为容器</p><h2 id="_6-数据集合视图" tabindex="-1">6. 数据集合视图 <a class="header-anchor" href="#_6-数据集合视图" aria-label="Permalink to &quot;6. 数据集合视图&quot;">​</a></h2><p>6.1_创建和配置UITableView基础：创建与数据源 6.2_UITableViewDelegate协议方法 6.3_自定义UITableViewCell 6.4_创建和配置UICollectionView基础：创建与布局 6.5_UICollectionView数据源与代理 6.6_自定义UICollectionViewCell</p><h2 id="_7-auto-layout核心概念" tabindex="-1">7. Auto Layout核心概念 <a class="header-anchor" href="#_7-auto-layout核心概念" aria-label="Permalink to &quot;7. Auto Layout核心概念&quot;">​</a></h2><p>7.1_约束（NSLayoutConstraint）基础 7.2_关闭translatesAutoresizingMaskIntoConstraints 7.3_理解视图布局的生命周期 7.4_安全区域（Safe Area）的使用</p><h2 id="_8-使用nslayoutconstraint" tabindex="-1">8. 使用NSLayoutConstraint <a class="header-anchor" href="#_8-使用nslayoutconstraint" aria-label="Permalink to &quot;8. 使用NSLayoutConstraint&quot;">​</a></h2><p>8.1_手动创建单个NSLayoutConstraint 8.2_批量激活和停用约束 8.3_修改约束的constant属性以实现动画 8.4_设置约束的优先级（Priority）</p><h2 id="_9-使用nslayoutanchor锚点" tabindex="-1">9. 使用NSLayoutAnchor锚点 <a class="header-anchor" href="#_9-使用nslayoutanchor锚点" aria-label="Permalink to &quot;9. 使用NSLayoutAnchor锚点&quot;">​</a></h2><p>9.1_使用leading或trailing锚点设置水平约束 9.2_使用top或bottom锚点设置垂直约束 9.3_使用width或height锚点设置尺寸约束 9.4_使用centerX或centerY锚点设置居中</p><h2 id="_10-高级布局容器" tabindex="-1">10. 高级布局容器 <a class="header-anchor" href="#_10-高级布局容器" aria-label="Permalink to &quot;10. 高级布局容器&quot;">​</a></h2><p>10.1_使用UIStackView进行线性布局 10.2_配置UIStackView的distribution属性 10.3_配置UIStackView的alignment属性 10.4_配置UIStackView的spacing属性</p><h2 id="_11-uiviewcontroller生命周期" tabindex="-1">11. UIViewController生命周期 <a class="header-anchor" href="#_11-uiviewcontroller生命周期" aria-label="Permalink to &quot;11. UIViewController生命周期&quot;">​</a></h2><p>11.1_loadView方法的用途 11.2_viewDidLoad方法的使用 11.3_viewWillAppear与viewDidAppear 11.4_viewWillDisappear与viewDidDisappear 11.5_viewWillLayoutSubviews与viewDidLayoutSubviews</p><h2 id="_12-导航控制器uinavigationcontroller" tabindex="-1">12. 导航控制器UINavigationController <a class="header-anchor" href="#_12-导航控制器uinavigationcontroller" aria-label="Permalink to &quot;12. 导航控制器UINavigationController&quot;">​</a></h2><p>12.1_创建和设置UINavigationController 12.2_Push操作：压入新的视图控制器 12.3_Pop操作：弹出当前视图控制器 12.4_自定义NavigationBar外观 12.5_配置UIBarButtonItem</p><h2 id="_13-标签栏控制器uitabbarcontroller" tabindex="-1">13. 标签栏控制器UITabBarController <a class="header-anchor" href="#_13-标签栏控制器uitabbarcontroller" aria-label="Permalink to &quot;13. 标签栏控制器UITabBarController&quot;">​</a></h2><ul><li>创建和设置UITabBarController</li><li>为标签栏添加多个视图控制器</li><li>自定义TabBarItem的标题和图标</li><li>处理标签栏的切换事件</li></ul><h2 id="_14-模态呈现-present-modally" tabindex="-1">14. 模态呈现（Present Modally） <a class="header-anchor" href="#_14-模态呈现-present-modally" aria-label="Permalink to &quot;14. 模态呈现（Present Modally）&quot;">​</a></h2><p>14.1_使用present方法模态弹出视图控制器 14.2_使用dismiss方法关闭模态视图 14.3_理解不同的Modal_Presentation_Styles 14.4_理解不同的Modal_Transition_Styles</p><h2 id="_15-target-action模式" tabindex="-1">15. Target-Action模式 <a class="header-anchor" href="#_15-target-action模式" aria-label="Permalink to &quot;15. Target-Action模式&quot;">​</a></h2><p>15.1_理解Target-Action设计模式 15.2_为UIControl控件添加事件监听 15.3_实现响应事件的@objc方法 15.4_传递事件发送者（sender）参数</p><h2 id="_16-代理-delegate-模式" tabindex="-1">16. 代理（Delegate）模式 <a class="header-anchor" href="#_16-代理-delegate-模式" aria-label="Permalink to &quot;16. 代理（Delegate）模式&quot;">​</a></h2><p>16.1_理解Delegate设计模式 16.2_遵循系统协议（如UITextFieldDelegate） 16.3_实现代理方法以响应特定事件 16.4_自定义协议和代理</p><h2 id="_17-手势识别uigesturerecognizer" tabindex="-1">17. 手势识别UIGestureRecognizer <a class="header-anchor" href="#_17-手势识别uigesturerecognizer" aria-label="Permalink to &quot;17. 手势识别UIGestureRecognizer&quot;">​</a></h2><p>17.1_添加点击手势UITapGestureRecognizer 17.2_添加长按手势UILongPressGestureRecognizer 17.3_添加滑动手势UISwipeGestureRecognizer 17.4_添加拖动手势UIPanGestureRecognizer 17.5_添加缩放手势UIPinchGestureRecognizer 17.6_添加旋转手势UIRotationGestureRecognizer</p>',35)]))}const p=e(o,[["render",l]]);export{u as __pageData,p as default};
