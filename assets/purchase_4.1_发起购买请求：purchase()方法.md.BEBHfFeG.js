import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"启动购买流程","description":"","frontmatter":{},"headers":[],"relativePath":"purchase/4.1_发起购买请求：purchase()方法.md","filePath":"purchase/4.1_发起购买请求：purchase()方法.md"}'),p={name:"purchase/4.1_发起购买请求：purchase()方法.md"};function l(h,s,r,t,k,c){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="启动购买流程" tabindex="-1">启动购买流程 <a class="header-anchor" href="#启动购买流程" aria-label="Permalink to &quot;启动购买流程&quot;">​</a></h1><p>发起购买请求是用户订阅或购买应用内产品的关键一步。您将使用 <code>Product</code> 对象的 <code>purchase()</code> 方法来启动这个过程。这个方法是异步的，意味着它会立即返回，而实际的购买操作会在后台进行。🚀</p><p>调用 <code>purchase()</code> 方法时，系统会自动处理用户界面。这包括显示购买确认弹窗，以及在需要时引导用户进行身份验证。整个过程对用户来说非常流畅。</p><h2 id="purchase-方法详解" tabindex="-1">purchase() 方法详解 <a class="header-anchor" href="#purchase-方法详解" aria-label="Permalink to &quot;purchase() 方法详解&quot;">​</a></h2><p><code>purchase()</code> 方法是 <code>Product</code> 结构体的一部分。它返回一个 <code>PurchaseResult</code> 枚举，您需要处理这个结果来确定购买是否成功。这个方法是 <code>async throws</code> 的，所以您需要使用 <code>await</code> 关键字来调用它，并用 <code>do-catch</code> 块来捕获可能发生的错误。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product: Product) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">purchase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> verification)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理成功的购买</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .pending</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 购买待处理（例如，需要家长批准）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .userCancelled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 用户取消了购买</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .unverified</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 购买未经验证</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理未来可能新增的案例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>您会发现这个方法非常强大，因为它将复杂的购买逻辑封装起来。</p><h2 id="处理购买结果" tabindex="-1">处理购买结果 <a class="header-anchor" href="#处理购买结果" aria-label="Permalink to &quot;处理购买结果&quot;">​</a></h2><p><code>purchase()</code> 方法的返回值 <code>PurchaseResult</code> 是一个枚举，它有几个重要的案例。每个案例都代表了购买流程中的一种特定状态。理解这些状态对于构建健壮的购买逻辑至关重要。</p><ul><li><code>.success(let verification)</code>：这表示购买成功。您会收到一个 <code>verification</code> 对象，其中包含交易的详细信息。这是您最希望看到的结果！🎉</li><li><code>.pending</code>：购买处于待处理状态。这通常发生在“询问购买”功能启用时，例如儿童账户需要家长批准。</li><li><code>.userCancelled</code>：用户在购买过程中取消了操作。这很常见，您需要优雅地处理这种情况。</li><li><code>.unverified</code>：购买未经验证。这可能表示存在欺诈风险或网络问题。</li></ul><p>处理这些不同的结果，确保您的应用能够对每种情况做出正确的响应。</p><h2 id="最佳实践与注意事项" tabindex="-1">最佳实践与注意事项 <a class="header-anchor" href="#最佳实践与注意事项" aria-label="Permalink to &quot;最佳实践与注意事项&quot;">​</a></h2><p>在调用 <code>purchase()</code> 方法之前，确保您已经获取了最新的产品信息。过时的产品信息可能导致购买失败或显示不正确的价格。定期刷新产品列表是一个好习惯。</p><p>在实际应用中，您应该在用户点击“购买”按钮后立即调用此方法。同时，考虑在购买过程中禁用购买按钮，以防止用户重复点击，从而避免不必要的错误或重复交易。</p><p>记住，网络连接对于购买流程至关重要。在网络不稳定时，<code>purchase()</code> 方法可能会抛出错误。因此，实现适当的错误处理机制是必不可少的。例如，您可以显示一个友好的提示，告知用户检查网络连接。📶</p>`,15)]))}const u=a(p,[["render",l]]);export{o as __pageData,u as default};
