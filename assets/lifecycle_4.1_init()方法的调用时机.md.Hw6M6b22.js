import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"init() 方法的调用时机","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/4.1_init()方法的调用时机.md","filePath":"lifecycle/4.1_init()方法的调用时机.md"}'),l={name:"lifecycle/4.1_init()方法的调用时机.md"};function t(p,s,h,r,d,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="init-方法的调用时机" tabindex="-1"><code>init()</code> 方法的调用时机 <a class="header-anchor" href="#init-方法的调用时机" aria-label="Permalink to &quot;\`init()\` 方法的调用时机&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，<code>init()</code> 方法是视图生命周期中至关重要的一环。它负责初始化视图的状态，为视图的首次渲染做好准备。理解 <code>init()</code> 方法的调用时机，能帮助你更好地控制视图的行为，避免潜在的错误。🎉</p></blockquote><h2 id="首次创建视图时" tabindex="-1">首次创建视图时 <a class="header-anchor" href="#首次创建视图时" aria-label="Permalink to &quot;首次创建视图时&quot;">​</a></h2><p><code>init()</code> 方法最常见的调用时机，就是在视图首次被创建时。当你声明一个视图，并将其添加到视图层级结构中时，SwiftUI 会自动调用该视图的 <code>init()</code> 方法。这为你提供了一个绝佳的机会，来设置视图的初始状态，例如初始化属性、加载数据等。</p><ul><li><p>例如，你可以这样初始化一个 <code>Text</code> 视图：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyView 初始化！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>每次 <code>MyView</code> 被创建时，控制台都会打印 &quot;MyView 初始化！&quot;。</p></li></ul><h2 id="状态变化导致视图重建时" tabindex="-1">状态变化导致视图重建时 <a class="header-anchor" href="#状态变化导致视图重建时" aria-label="Permalink to &quot;状态变化导致视图重建时&quot;">​</a></h2><p>当视图依赖的状态发生变化时，SwiftUI 可能会销毁并重建该视图。在这种情况下，<code>init()</code> 方法也会被再次调用。这意味着你需要确保 <code>init()</code> 方法中的逻辑是幂等的，即多次调用不会产生副作用。</p><ul><li><p>状态变化可能由以下因素引起：</p><ol><li><code>@State</code> 属性的改变。</li><li><code>@Binding</code> 属性的改变。</li><li><code>@ObservedObject</code> 或 <code>@EnvironmentObject</code> 关联的对象的改变。</li></ol></li></ul><h2 id="父视图重建时" tabindex="-1">父视图重建时 <a class="header-anchor" href="#父视图重建时" aria-label="Permalink to &quot;父视图重建时&quot;">​</a></h2><p>如果一个视图的父视图被重建，那么该视图也会被重建，<code>init()</code> 方法同样会被调用。这是一种递归的过程，可能会影响性能。因此，你需要尽量避免不必要的视图重建。</p><ul><li><p>优化技巧：</p><ul><li>使用 <code>Equatable</code> 协议，让 SwiftUI 能够更精确地判断视图是否需要更新。</li><li>将复杂的视图分解成更小的、独立的子视图。</li><li>使用 <code>Identifiable</code> 协议，帮助 SwiftUI 更好地管理列表中的视图。</li></ul></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>init()</code> 方法的调用时机主要有三种：首次创建视图、状态变化导致视图重建、父视图重建。理解这些时机，能让你更好地掌握 SwiftUI 视图的生命周期，编写出更高效、更稳定的代码。记住，<code>init()</code> 方法是视图的起点，也是你控制视图行为的关键！🚀</p>`,13)]))}const E=i(l,[["render",t]]);export{o as __pageData,E as default};
