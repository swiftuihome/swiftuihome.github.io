import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.ymCRTBvy.js";const k=JSON.parse('{"title":"14.2_使用dismiss方法关闭模态视图","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/14.2_使用dismiss方法关闭模态视图.md","filePath":"uikit/basics/14.2_使用dismiss方法关闭模态视图.md"}'),t={name:"uikit/basics/14.2_使用dismiss方法关闭模态视图.md"};function d(l,s,o,c,p,r){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="_14-2-使用dismiss方法关闭模态视图" tabindex="-1">14.2_使用dismiss方法关闭模态视图 <a class="header-anchor" href="#_14-2-使用dismiss方法关闭模态视图" aria-label="Permalink to &quot;14.2_使用dismiss方法关闭模态视图&quot;">​</a></h1><h2 id="关闭模态视图的核心方法" tabindex="-1">关闭模态视图的核心方法 <a class="header-anchor" href="#关闭模态视图的核心方法" aria-label="Permalink to &quot;关闭模态视图的核心方法&quot;">​</a></h2><p>当你使用 <code>present</code> 方法展示了一个模态视图控制器后，关闭它同样简单直观。核心在于使用 <code>dismiss(animated:completion:)</code> 方法。这个方法是 <code>UIViewController</code> 的一个实例方法，意味着任何视图控制器都可以调用它来关闭由它自己或其子视图控制器呈现的模态视图。这真是太棒了！✨</p><h2 id="谁来调用-dismiss" tabindex="-1">谁来调用 <code>dismiss</code>？ <a class="header-anchor" href="#谁来调用-dismiss" aria-label="Permalink to &quot;谁来调用 \`dismiss\`？&quot;">​</a></h2><p>一个常见的误解是，只有呈现者（presenting view controller）才能关闭被呈现者（presented view controller）。实际上，被呈现的视图控制器完全有能力自行关闭。例如，你可以在模态视图控制器内部添加一个“完成”或“取消”按钮，当用户点击时，该视图控制器就可以调用 <code>self.dismiss(...)</code> 来关闭自己。这赋予了你极大的灵活性！</p><h2 id="dismiss-方法详解" tabindex="-1"><code>dismiss</code> 方法详解 <a class="header-anchor" href="#dismiss-方法详解" aria-label="Permalink to &quot;\`dismiss\` 方法详解&quot;">​</a></h2><p><code>dismiss</code> 方法有两个关键参数：</p><ol><li><code>animated: Bool</code>：这个参数决定了关闭过程是否以动画形式呈现。设置为 <code>true</code> 会有一个平滑的过渡效果，通常是从屏幕顶部滑出或淡出，这能提供更好的用户体验。设置为 <code>false</code> 则会立即关闭，没有动画。</li><li><code>completion: (() -&gt; Void)?</code>：这是一个可选的闭包，当模态视图控制器完全关闭并且动画（如果 <code>animated</code> 为 <code>true</code>）结束后，这个闭包会被执行。你可以在这里执行一些清理工作，或者更新呈现者视图控制器的数据。</li></ol><p>例如，你可以在一个按钮的 <code>IBAction</code> 中这样调用：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> closeButtonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dismiss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;模态视图已关闭！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可以在这里执行一些后续操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p>想象一下，你正在开发一个照片编辑应用。当用户点击“编辑”按钮时，你会模态呈现一个照片编辑界面。在这个编辑界面中，用户可以裁剪、调整颜色等。当用户完成编辑并点击“保存”或“取消”时，编辑界面就需要关闭。</p><ul><li><strong>保存操作</strong>：用户点击“保存”后，编辑界面会调用 <code>dismiss</code> 关闭自己，并在 <code>completion</code> 闭包中通知呈现者视图控制器更新照片。</li><li><strong>取消操作</strong>：用户点击“取消”后，编辑界面同样调用 <code>dismiss</code> 关闭自己，但可能不需要在 <code>completion</code> 闭包中执行任何数据更新。</li></ul><p>这种模式非常高效，确保了视图控制器之间的职责分离。</p><h2 id="最佳实践与注意事项" tabindex="-1">最佳实践与注意事项 <a class="header-anchor" href="#最佳实践与注意事项" aria-label="Permalink to &quot;最佳实践与注意事项&quot;">​</a></h2><p>为了提供最佳的用户体验，有几个小贴士可以帮助你：</p><ul><li><strong>始终考虑动画</strong>：在大多数情况下，使用 <code>animated: true</code> 会让你的应用看起来更流畅、更专业。用户会喜欢这种平滑的过渡效果。</li><li><strong>利用 <code>completion</code> 闭包</strong>：不要小看 <code>completion</code> 闭包的强大功能。它是你在模态视图关闭后执行必要逻辑的完美场所，比如刷新数据、释放资源等。</li><li><strong>避免循环引用</strong>：在 <code>completion</code> 闭包中使用 <code>[weak self]</code> 或 <code>[unowned self]</code> 来捕获 <code>self</code>，以防止潜在的循环引用，这对于内存管理至关重要。</li></ul><p>通过熟练掌握 <code>dismiss</code> 方法，你将能够轻松地管理模态视图的生命周期，为用户提供无缝且直观的交互体验。继续加油，你一定能成为 UIKit 大师！🚀</p>`,18)]))}const m=i(t,[["render",d]]);export{k as __pageData,m as default};
