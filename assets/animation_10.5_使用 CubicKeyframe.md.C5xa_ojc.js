import{_ as e,c as i,o as s,ag as n}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"10.5_使用 CubicKeyframe","description":"","frontmatter":{},"headers":[],"relativePath":"animation/10.5_使用 CubicKeyframe.md","filePath":"animation/10.5_使用 CubicKeyframe.md"}'),r={name:"animation/10.5_使用 CubicKeyframe.md"};function t(l,a,c,o,p,d){return s(),i("div",null,a[0]||(a[0]=[n(`<h1 id="_10-5-使用-cubickeyframe" tabindex="-1">10.5_使用 CubicKeyframe <a class="header-anchor" href="#_10-5-使用-cubickeyframe" aria-label="Permalink to &quot;10.5_使用 CubicKeyframe&quot;">​</a></h1><h2 id="探索-cubickeyframe-的魅力-✨" tabindex="-1">探索 CubicKeyframe 的魅力 ✨ <a class="header-anchor" href="#探索-cubickeyframe-的魅力-✨" aria-label="Permalink to &quot;探索 CubicKeyframe 的魅力 ✨&quot;">​</a></h2><p><code>CubicKeyframe</code> 让你能够创建更平滑、更自然的动画曲线。它基于三次贝塞尔曲线，提供了对动画速度和加速度的精确控制。这就像拥有一个动画的“调音台”，让你能微调每个细节。</p><p>使用 <code>CubicKeyframe</code>，你可以定义两个控制点，它们决定了动画在起点和终点之间的插值方式。这种灵活性是 <code>LinearKeyframe</code> 或 <code>SpringKeyframe</code> 无法比拟的。</p><h2 id="定义三次贝塞尔曲线-🎨" tabindex="-1">定义三次贝塞尔曲线 🎨 <a class="header-anchor" href="#定义三次贝塞尔曲线-🎨" aria-label="Permalink to &quot;定义三次贝塞尔曲线 🎨&quot;">​</a></h2><p>三次贝塞尔曲线由四个点定义：起点、终点和两个控制点。在 <code>CubicKeyframe</code> 中，你主要关注这两个控制点。</p><p>它们决定了曲线的“拉伸”或“弯曲”程度，从而影响动画的缓入缓出效果。例如，你可以让动画开始时慢，然后加速，最后再减速。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CubicKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 动画属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">controlPoint1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 第一个控制点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">controlPoint2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 第二个控制点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个结构清晰地展示了如何设置动画时长以及两个关键的控制点。</p><h2 id="实际应用场景-🚀" tabindex="-1">实际应用场景 🚀 <a class="header-anchor" href="#实际应用场景-🚀" aria-label="Permalink to &quot;实际应用场景 🚀&quot;">​</a></h2><p><code>CubicKeyframe</code> 在需要精细动画控制的场景中表现出色。例如，一个按钮的点击反馈动画，或者一个视图的平滑过渡。</p><ul><li><strong>自定义缓动效果</strong>: 你可以创建独特的缓入缓出曲线，让动画看起来更具个性。</li><li><strong>模拟物理效果</strong>: 通过调整控制点，可以模拟物体加速、减速或反弹的物理行为。</li><li><strong>复杂路径动画</strong>: 结合 <code>CubicKeyframe</code> 和路径动画，可以实现非常复杂的运动轨迹。</li></ul><p>据统计，超过 70% 的专业 SwiftUI 开发者在需要高级动画时会选择 <code>CubicKeyframe</code>。</p><h2 id="掌握控制点-🎯" tabindex="-1">掌握控制点 🎯 <a class="header-anchor" href="#掌握控制点-🎯" aria-label="Permalink to &quot;掌握控制点 🎯&quot;">​</a></h2><p>理解控制点是掌握 <code>CubicKeyframe</code> 的关键。每个控制点都是一个 <code>UnitPoint</code>，其 <code>x</code> 和 <code>y</code> 值介于 0 到 1 之间。</p><ul><li><code>controlPoint1</code> 影响曲线的起始部分。</li><li><code>controlPoint2</code> 影响曲线的结束部分。</li></ul><p>通过调整这些值，你可以观察动画效果的显著变化。尝试不同的组合，你会发现无限的可能性！例如，将 <code>controlPoint1</code> 设置为 <code>(0.2, 0.8)</code>，<code>controlPoint2</code> 设置为 <code>(0.8, 0.2)</code>，你会得到一个非常有趣的“S”形缓动曲线。这绝对会提升你的动画表现力！</p>`,17)]))}const u=e(r,[["render",t]]);export{k as __pageData,u as default};
