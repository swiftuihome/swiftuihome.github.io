import{_ as e,c as t,o as r,ag as i}from"./chunks/framework.Bw-5EFTY.js";const b=JSON.parse('{"title":"SwiftUI视图生命周期：创建、更新与销毁","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/目录.md","filePath":"lifecycle/目录.md"}'),o={name:"lifecycle/目录.md"};function n(h,a,l,d,_,s){return r(),t("div",null,a[0]||(a[0]=[i('<h1 id="swiftui视图生命周期-创建、更新与销毁" tabindex="-1">SwiftUI视图生命周期：创建、更新与销毁 <a class="header-anchor" href="#swiftui视图生命周期-创建、更新与销毁" aria-label="Permalink to &quot;SwiftUI视图生命周期：创建、更新与销毁&quot;">​</a></h1><h2 id="第1章-视图的本质与结构" tabindex="-1">第1章 视图的本质与结构 <a class="header-anchor" href="#第1章-视图的本质与结构" aria-label="Permalink to &quot;第1章 视图的本质与结构&quot;">​</a></h2><h2 id="_1-1-将视图理解为值的概念" tabindex="-1">1.1_将视图理解为值的概念 <a class="header-anchor" href="#_1-1-将视图理解为值的概念" aria-label="Permalink to &quot;1.1_将视图理解为值的概念&quot;">​</a></h2><h2 id="_1-2-视图作为状态的函数" tabindex="-1">1.2_视图作为状态的函数 <a class="header-anchor" href="#_1-2-视图作为状态的函数" aria-label="Permalink to &quot;1.2_视图作为状态的函数&quot;">​</a></h2><h2 id="_1-3-view协议与body属性" tabindex="-1">1.3_View协议与body属性 <a class="header-anchor" href="#_1-3-view协议与body属性" aria-label="Permalink to &quot;1.3_View协议与body属性&quot;">​</a></h2><h2 id="_1-4-与uikit-appkit视图对象的区别" tabindex="-1">1.4_与UIKit-AppKit视图对象的区别 <a class="header-anchor" href="#_1-4-与uikit-appkit视图对象的区别" aria-label="Permalink to &quot;1.4_与UIKit-AppKit视图对象的区别&quot;">​</a></h2><h2 id="第2章-视图身份-identity-与生命周期" tabindex="-1">第2章 视图身份（Identity）与生命周期 <a class="header-anchor" href="#第2章-视图身份-identity-与生命周期" aria-label="Permalink to &quot;第2章 视图身份（Identity）与生命周期&quot;">​</a></h2><h2 id="_2-1-显式身份-id-修饰符" tabindex="-1">2.1_显式身份：id()修饰符 <a class="header-anchor" href="#_2-1-显式身份-id-修饰符" aria-label="Permalink to &quot;2.1_显式身份：id()修饰符&quot;">​</a></h2><h2 id="_2-2-结构性身份-视图在层级中的位置" tabindex="-1">2.2_结构性身份：视图在层级中的位置 <a class="header-anchor" href="#_2-2-结构性身份-视图在层级中的位置" aria-label="Permalink to &quot;2.2_结构性身份：视图在层级中的位置&quot;">​</a></h2><h2 id="_2-3-身份对状态持久性的影响" tabindex="-1">2.3_身份对状态持久性的影响 <a class="header-anchor" href="#_2-3-身份对状态持久性的影响" aria-label="Permalink to &quot;2.3_身份对状态持久性的影响&quot;">​</a></h2><h2 id="_2-4-身份变化如何触发视图销毁与重建" tabindex="-1">2.4_身份变化如何触发视图销毁与重建 <a class="header-anchor" href="#_2-4-身份变化如何触发视图销毁与重建" aria-label="Permalink to &quot;2.4_身份变化如何触发视图销毁与重建&quot;">​</a></h2><h2 id="第3章-视图的依赖关系与更新" tabindex="-1">第3章 视图的依赖关系与更新 <a class="header-anchor" href="#第3章-视图的依赖关系与更新" aria-label="Permalink to &quot;第3章 视图的依赖关系与更新&quot;">​</a></h2><h2 id="_3-1-依赖图-dependency-graph-简介" tabindex="-1">3.1_依赖图（Dependency Graph）简介 <a class="header-anchor" href="#_3-1-依赖图-dependency-graph-简介" aria-label="Permalink to &quot;3.1_依赖图（Dependency Graph）简介&quot;">​</a></h2><h2 id="_3-2-状态变化如何触发视图更新" tabindex="-1">3.2_状态变化如何触发视图更新 <a class="header-anchor" href="#_3-2-状态变化如何触发视图更新" aria-label="Permalink to &quot;3.2_状态变化如何触发视图更新&quot;">​</a></h2><h2 id="_3-3-body的计算时机与频率" tabindex="-1">3.3_body的计算时机与频率 <a class="header-anchor" href="#_3-3-body的计算时机与频率" aria-label="Permalink to &quot;3.3_body的计算时机与频率&quot;">​</a></h2><h2 id="_3-4-视图更新的性能考量" tabindex="-1">3.4_视图更新的性能考量 <a class="header-anchor" href="#_3-4-视图更新的性能考量" aria-label="Permalink to &quot;3.4_视图更新的性能考量&quot;">​</a></h2><h2 id="第4章-视图的初始化过程" tabindex="-1">第4章 视图的初始化过程 <a class="header-anchor" href="#第4章-视图的初始化过程" aria-label="Permalink to &quot;第4章 视图的初始化过程&quot;">​</a></h2><h2 id="_4-1-init-方法的调用时机" tabindex="-1">4.1_init()方法的调用时机 <a class="header-anchor" href="#_4-1-init-方法的调用时机" aria-label="Permalink to &quot;4.1_init()方法的调用时机&quot;">​</a></h2><h2 id="_4-2-在init-中设置初始状态" tabindex="-1">4.2_在init()中设置初始状态 <a class="header-anchor" href="#_4-2-在init-中设置初始状态" aria-label="Permalink to &quot;4.2_在init()中设置初始状态&quot;">​</a></h2><h2 id="_4-3-使用自定义init进行依赖注入" tabindex="-1">4.3_使用自定义init进行依赖注入 <a class="header-anchor" href="#_4-3-使用自定义init进行依赖注入" aria-label="Permalink to &quot;4.3_使用自定义init进行依赖注入&quot;">​</a></h2><h2 id="_4-4-理解视图结构的首次构建" tabindex="-1">4.4_理解视图结构的首次构建 <a class="header-anchor" href="#_4-4-理解视图结构的首次构建" aria-label="Permalink to &quot;4.4_理解视图结构的首次构建&quot;">​</a></h2><h2 id="第5章-视图首次出现在屏幕上" tabindex="-1">第5章 视图首次出现在屏幕上 <a class="header-anchor" href="#第5章-视图首次出现在屏幕上" aria-label="Permalink to &quot;第5章 视图首次出现在屏幕上&quot;">​</a></h2><h2 id="_5-1-onappear修饰符的触发时机" tabindex="-1">5.1_onAppear修饰符的触发时机 <a class="header-anchor" href="#_5-1-onappear修饰符的触发时机" aria-label="Permalink to &quot;5.1_onAppear修饰符的触发时机&quot;">​</a></h2><h2 id="_5-2-onappear中执行网络请求或动画" tabindex="-1">5.2_onAppear中执行网络请求或动画 <a class="header-anchor" href="#_5-2-onappear中执行网络请求或动画" aria-label="Permalink to &quot;5.2_onAppear中执行网络请求或动画&quot;">​</a></h2><h2 id="_5-3-task修饰符-异步任务的生命周期管理" tabindex="-1">5.3_task修饰符：异步任务的生命周期管理 <a class="header-anchor" href="#_5-3-task修饰符-异步任务的生命周期管理" aria-label="Permalink to &quot;5.3_task修饰符：异步任务的生命周期管理&quot;">​</a></h2><h2 id="_5-4-task修饰符与onappear的对比" tabindex="-1">5.4_task修饰符与onAppear的对比 <a class="header-anchor" href="#_5-4-task修饰符与onappear的对比" aria-label="Permalink to &quot;5.4_task修饰符与onAppear的对比&quot;">​</a></h2><h2 id="第6章-状态驱动的视图更新" tabindex="-1">第6章 状态驱动的视图更新 <a class="header-anchor" href="#第6章-状态驱动的视图更新" aria-label="Permalink to &quot;第6章 状态驱动的视图更新&quot;">​</a></h2><h2 id="_6-1-state-管理本地简单值类型状态" tabindex="-1">6.1_@State：管理本地简单值类型状态 <a class="header-anchor" href="#_6-1-state-管理本地简单值类型状态" aria-label="Permalink to &quot;6.1_@State：管理本地简单值类型状态&quot;">​</a></h2><h2 id="_6-2-binding-创建双向数据连接" tabindex="-1">6.2_@Binding：创建双向数据连接 <a class="header-anchor" href="#_6-2-binding-创建双向数据连接" aria-label="Permalink to &quot;6.2_@Binding：创建双向数据连接&quot;">​</a></h2><h2 id="_6-3-onchange修饰符-响应特定值的变化" tabindex="-1">6.3_onChange修饰符：响应特定值的变化 <a class="header-anchor" href="#_6-3-onchange修饰符-响应特定值的变化" aria-label="Permalink to &quot;6.3_onChange修饰符：响应特定值的变化&quot;">​</a></h2><h2 id="_6-4-onchange的触发条件与使用场景" tabindex="-1">6.4_onChange的触发条件与使用场景 <a class="header-anchor" href="#_6-4-onchange的触发条件与使用场景" aria-label="Permalink to &quot;6.4_onChange的触发条件与使用场景&quot;">​</a></h2><h2 id="第7章-对象类型的状态管理" tabindex="-1">第7章 对象类型的状态管理 <a class="header-anchor" href="#第7章-对象类型的状态管理" aria-label="Permalink to &quot;第7章 对象类型的状态管理&quot;">​</a></h2><h2 id="_7-1-stateobject-管理引用类型状态的生命周期" tabindex="-1">7.1_@StateObject：管理引用类型状态的生命周期 <a class="header-anchor" href="#_7-1-stateobject-管理引用类型状态的生命周期" aria-label="Permalink to &quot;7.1_@StateObject：管理引用类型状态的生命周期&quot;">​</a></h2><h2 id="_7-2-observedobject-观察外部引用类型对象" tabindex="-1">7.2_@ObservedObject：观察外部引用类型对象 <a class="header-anchor" href="#_7-2-observedobject-观察外部引用类型对象" aria-label="Permalink to &quot;7.2_@ObservedObject：观察外部引用类型对象&quot;">​</a></h2><h2 id="_7-3-stateobject与-observedobject的关键区别" tabindex="-1">7.3_@StateObject与@ObservedObject的关键区别 <a class="header-anchor" href="#_7-3-stateobject与-observedobject的关键区别" aria-label="Permalink to &quot;7.3_@StateObject与@ObservedObject的关键区别&quot;">​</a></h2><h2 id="_7-4-environmentobject-在视图层级中共享对象" tabindex="-1">7.4_@EnvironmentObject：在视图层级中共享对象 <a class="header-anchor" href="#_7-4-environmentobject-在视图层级中共享对象" aria-label="Permalink to &quot;7.4_@EnvironmentObject：在视图层级中共享对象&quot;">​</a></h2><h2 id="第8章-特殊状态属性包装器" tabindex="-1">第8章 特殊状态属性包装器 <a class="header-anchor" href="#第8章-特殊状态属性包装器" aria-label="Permalink to &quot;第8章 特殊状态属性包装器&quot;">​</a></h2><h2 id="_8-1-environment-读取环境值" tabindex="-1">8.1_@Environment：读取环境值 <a class="header-anchor" href="#_8-1-environment-读取环境值" aria-label="Permalink to &quot;8.1_@Environment：读取环境值&quot;">​</a></h2><h2 id="_8-2-appstorage-scenestorage-持久化状态" tabindex="-1">8.2_@AppStorage-@SceneStorage：持久化状态 <a class="header-anchor" href="#_8-2-appstorage-scenestorage-持久化状态" aria-label="Permalink to &quot;8.2_@AppStorage-@SceneStorage：持久化状态&quot;">​</a></h2><h2 id="_8-3-focusstate-管理焦点状态" tabindex="-1">8.3_@FocusState：管理焦点状态 <a class="header-anchor" href="#_8-3-focusstate-管理焦点状态" aria-label="Permalink to &quot;8.3_@FocusState：管理焦点状态&quot;">​</a></h2><h2 id="_8-4-理解不同状态包装器的适用场景" tabindex="-1">8.4_理解不同状态包装器的适用场景 <a class="header-anchor" href="#_8-4-理解不同状态包装器的适用场景" aria-label="Permalink to &quot;8.4_理解不同状态包装器的适用场景&quot;">​</a></h2><h2 id="第9章-视图从屏幕上消失" tabindex="-1">第9章 视图从屏幕上消失 <a class="header-anchor" href="#第9章-视图从屏幕上消失" aria-label="Permalink to &quot;第9章 视图从屏幕上消失&quot;">​</a></h2><h2 id="_9-1-ondisappear修饰符的触发时机" tabindex="-1">9.1_onDisappear修饰符的触发时机 <a class="header-anchor" href="#_9-1-ondisappear修饰符的触发时机" aria-label="Permalink to &quot;9.1_onDisappear修饰符的触发时机&quot;">​</a></h2><h2 id="_9-2-在ondisappear中执行清理任务" tabindex="-1">9.2_在onDisappear中执行清理任务 <a class="header-anchor" href="#_9-2-在ondisappear中执行清理任务" aria-label="Permalink to &quot;9.2_在onDisappear中执行清理任务&quot;">​</a></h2><h2 id="_9-3-取消订阅或定时器" tabindex="-1">9.3_取消订阅或定时器 <a class="header-anchor" href="#_9-3-取消订阅或定时器" aria-label="Permalink to &quot;9.3_取消订阅或定时器&quot;">​</a></h2><h2 id="_9-4-释放手动管理的资源" tabindex="-1">9.4_释放手动管理的资源 <a class="header-anchor" href="#_9-4-释放手动管理的资源" aria-label="Permalink to &quot;9.4_释放手动管理的资源&quot;">​</a></h2><h2 id="第10章-状态对象的生命周期管理" tabindex="-1">第10章 状态对象的生命周期管理 <a class="header-anchor" href="#第10章-状态对象的生命周期管理" aria-label="Permalink to &quot;第10章 状态对象的生命周期管理&quot;">​</a></h2><h2 id="_10-1-stateobject的销毁时机" tabindex="-1">10.1_@StateObject的销毁时机 <a class="header-anchor" href="#_10-1-stateobject的销毁时机" aria-label="Permalink to &quot;10.1_@StateObject的销毁时机&quot;">​</a></h2><h2 id="_10-2-observableobject的deinit方法" tabindex="-1">10.2_ObservableObject的deinit方法 <a class="header-anchor" href="#_10-2-observableobject的deinit方法" aria-label="Permalink to &quot;10.2_ObservableObject的deinit方法&quot;">​</a></h2><h2 id="_10-3-使用task修饰符自动取消异步任务" tabindex="-1">10.3_使用task修饰符自动取消异步任务 <a class="header-anchor" href="#_10-3-使用task修饰符自动取消异步任务" aria-label="Permalink to &quot;10.3_使用task修饰符自动取消异步任务&quot;">​</a></h2><h2 id="_10-4-避免因强引用导致的内存泄漏" tabindex="-1">10.4_避免因强引用导致的内存泄漏 <a class="header-anchor" href="#_10-4-避免因强引用导致的内存泄漏" aria-label="Permalink to &quot;10.4_避免因强引用导致的内存泄漏&quot;">​</a></h2><h2 id="第11章-应用与场景生命周期" tabindex="-1">第11章 应用与场景生命周期 <a class="header-anchor" href="#第11章-应用与场景生命周期" aria-label="Permalink to &quot;第11章 应用与场景生命周期&quot;">​</a></h2><h2 id="_11-1-app协议与应用生命周期事件" tabindex="-1">11.1_App协议与应用生命周期事件 <a class="header-anchor" href="#_11-1-app协议与应用生命周期事件" aria-label="Permalink to &quot;11.1_App协议与应用生命周期事件&quot;">​</a></h2><h2 id="_11-2-scenephase环境值的使用" tabindex="-1">11.2_ScenePhase环境值的使用 <a class="header-anchor" href="#_11-2-scenephase环境值的使用" aria-label="Permalink to &quot;11.2_ScenePhase环境值的使用&quot;">​</a></h2><h2 id="_11-3-处理应用进入后台或返回前台" tabindex="-1">11.3_处理应用进入后台或返回前台 <a class="header-anchor" href="#_11-3-处理应用进入后台或返回前台" aria-label="Permalink to &quot;11.3_处理应用进入后台或返回前台&quot;">​</a></h2><h2 id="_11-4-响应场景连接与断开" tabindex="-1">11.4_响应场景连接与断开 <a class="header-anchor" href="#_11-4-响应场景连接与断开" aria-label="Permalink to &quot;11.4_响应场景连接与断开&quot;">​</a></h2><h2 id="第12章-navigation与sheet-popover生命周期" tabindex="-1">第12章 Navigation与Sheet/Popover生命周期 <a class="header-anchor" href="#第12章-navigation与sheet-popover生命周期" aria-label="Permalink to &quot;第12章 Navigation与Sheet/Popover生命周期&quot;">​</a></h2><h2 id="_12-1-navigationstack中视图的生命周期" tabindex="-1">12.1_NavigationStack中视图的生命周期 <a class="header-anchor" href="#_12-1-navigationstack中视图的生命周期" aria-label="Permalink to &quot;12.1_NavigationStack中视图的生命周期&quot;">​</a></h2><h2 id="_12-2-sheet和popover呈现时视图的生命周期" tabindex="-1">12.2_Sheet和Popover呈现时视图的生命周期 <a class="header-anchor" href="#_12-2-sheet和popover呈现时视图的生命周期" aria-label="Permalink to &quot;12.2_Sheet和Popover呈现时视图的生命周期&quot;">​</a></h2><h2 id="_12-3-onappear-ondisappear在导航中的行为" tabindex="-1">12.3_onAppear-onDisappear在导航中的行为 <a class="header-anchor" href="#_12-3-onappear-ondisappear在导航中的行为" aria-label="Permalink to &quot;12.3_onAppear-onDisappear在导航中的行为&quot;">​</a></h2><h2 id="_12-4-管理模态视图中的状态" tabindex="-1">12.4_管理模态视图中的状态 <a class="header-anchor" href="#_12-4-管理模态视图中的状态" aria-label="Permalink to &quot;12.4_管理模态视图中的状态&quot;">​</a></h2><h2 id="第13章-与uikit-appkit组件的集成" tabindex="-1">第13章 与UIKit/AppKit组件的集成 <a class="header-anchor" href="#第13章-与uikit-appkit组件的集成" aria-label="Permalink to &quot;第13章 与UIKit/AppKit组件的集成&quot;">​</a></h2><h2 id="_13-1-uiviewrepresentable的生命周期方法" tabindex="-1">13.1_UIViewRepresentable的生命周期方法 <a class="header-anchor" href="#_13-1-uiviewrepresentable的生命周期方法" aria-label="Permalink to &quot;13.1_UIViewRepresentable的生命周期方法&quot;">​</a></h2><h2 id="_13-2-makeuiview-makeuiviewcontroller方法" tabindex="-1">13.2_makeUIView-makeUIViewController方法 <a class="header-anchor" href="#_13-2-makeuiview-makeuiviewcontroller方法" aria-label="Permalink to &quot;13.2_makeUIView-makeUIViewController方法&quot;">​</a></h2><h2 id="_13-3-updateuiview-updateuiviewcontroller方法" tabindex="-1">13.3_updateUIView-updateUIViewController方法 <a class="header-anchor" href="#_13-3-updateuiview-updateuiviewcontroller方法" aria-label="Permalink to &quot;13.3_updateUIView-updateUIViewController方法&quot;">​</a></h2><h2 id="_13-4-dismantleuiview与coordinator清理" tabindex="-1">13.4_dismantleUIView与Coordinator清理 <a class="header-anchor" href="#_13-4-dismantleuiview与coordinator清理" aria-label="Permalink to &quot;13.4_dismantleUIView与Coordinator清理&quot;">​</a></h2>',66)]))}const u=e(o,[["render",n]]);export{b as __pageData,u as default};
