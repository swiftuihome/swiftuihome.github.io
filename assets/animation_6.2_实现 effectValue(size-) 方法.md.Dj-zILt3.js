import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.ymCRTBvy.js";const d=JSON.parse('{"title":"6.2_实现 effectValue(size-) 方法","description":"","frontmatter":{},"headers":[],"relativePath":"animation/6.2_实现 effectValue(size-) 方法.md","filePath":"animation/6.2_实现 effectValue(size-) 方法.md"}'),t={name:"animation/6.2_实现 effectValue(size-) 方法.md"};function l(r,s,p,h,o,c){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="_6-2-实现-effectvalue-size-方法" tabindex="-1">6.2_实现 effectValue(size-) 方法 <a class="header-anchor" href="#_6-2-实现-effectvalue-size-方法" aria-label="Permalink to &quot;6.2_实现 effectValue(size-) 方法&quot;">​</a></h1><h2 id="理解-effectvalue-size" tabindex="-1">理解 effectValue(size:) <a class="header-anchor" href="#理解-effectvalue-size" aria-label="Permalink to &quot;理解 effectValue(size:)&quot;">​</a></h2><p><code>effectValue(size:)</code> 方法是 <code>GeometryEffect</code> 协议的核心。它定义了视图如何根据其大小进行变换。这个方法至关重要，因为它允许您创建动态且响应式的动画效果。✨</p><p>您将在这里指定所有自定义的几何变换。例如，您可以实现平移、旋转或缩放。</p><h2 id="实现自定义变换逻辑" tabindex="-1">实现自定义变换逻辑 <a class="header-anchor" href="#实现自定义变换逻辑" aria-label="Permalink to &quot;实现自定义变换逻辑&quot;">​</a></h2><p>在 <code>effectValue(size:)</code> 中，您会接收到一个 <code>CGSize</code> 参数。这个参数代表了应用效果的视图的原始大小。利用这个大小，您可以精确地计算出变换矩阵。</p><p>例如，如果您想让视图围绕其中心旋转，您需要知道视图的宽度和高度。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> effectValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGSize) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProjectionTransform {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里实现您的变换逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 例如，一个简单的平移</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> translationX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> translationY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ProjectionTransform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGAffineTransform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translationX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: translationX, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: translationY))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="深入-projectiontransform" tabindex="-1">深入 ProjectionTransform <a class="header-anchor" href="#深入-projectiontransform" aria-label="Permalink to &quot;深入 ProjectionTransform&quot;">​</a></h2><p><code>effectValue(size:)</code> 必须返回一个 <code>ProjectionTransform</code>。这是一个强大的结构体，用于描述三维空间中的变换。它封装了一个 <code>CGAffineTransform</code>，用于二维变换。</p><p>您可以通过 <code>CGAffineTransform</code> 来执行各种操作。</p><ul><li><strong>平移 (Translation)</strong>：移动视图的位置。</li><li><strong>缩放 (Scale)</strong>：改变视图的大小。</li><li><strong>旋转 (Rotation)</strong>：围绕一个点旋转视图。</li></ul><p>这些都是构建复杂动画的基础。</p><h2 id="动画化-effectvalue-size" tabindex="-1">动画化 effectValue(size:) <a class="header-anchor" href="#动画化-effectvalue-size" aria-label="Permalink to &quot;动画化 effectValue(size:)&quot;">​</a></h2><p><code>GeometryEffect</code> 的强大之处在于它与 SwiftUI 动画系统的无缝集成。当您改变 <code>GeometryEffect</code> 内部的任何 <code>Animatable</code> 属性时，<code>effectValue(size:)</code> 会自动重新计算。</p><p>这意味着您可以轻松地为您的自定义效果添加动画。例如，如果您有一个表示旋转角度的属性，当该属性值变化时，视图会平滑地旋转。</p><ol><li>定义一个 <code>Animatable</code> 属性。</li><li>在 <code>effectValue(size:)</code> 中使用该属性。</li><li>当属性值改变时，SwiftUI 会自动插值并更新视图。</li></ol><p>这使得创建令人惊叹的自定义动画变得异常简单和高效。🚀 超过 80% 的 SwiftUI 开发者认为 <code>GeometryEffect</code> 是实现复杂视图动画的关键。</p>`,18)]))}const f=i(t,[["render",l]]);export{d as __pageData,f as default};
