import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bw-5EFTY.js";const g=JSON.parse('{"title":"生成并验证优惠签名","description":"","frontmatter":{},"headers":[],"relativePath":"purchase/12.3_生成并验证优惠签名.md","filePath":"purchase/12.3_生成并验证优惠签名.md"}'),l={name:"purchase/12.3_生成并验证优惠签名.md"};function h(p,s,k,e,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="生成并验证优惠签名" tabindex="-1">生成并验证优惠签名 <a class="header-anchor" href="#生成并验证优惠签名" aria-label="Permalink to &quot;生成并验证优惠签名&quot;">​</a></h1><p>优惠签名生成与验证，是确保促销优惠安全的关键步骤。你将学习如何安全地创建和验证这些签名，防止欺诈，保障你的应用收入。🚀</p><h2 id="优惠签名生成流程" tabindex="-1">优惠签名生成流程 <a class="header-anchor" href="#优惠签名生成流程" aria-label="Permalink to &quot;优惠签名生成流程&quot;">​</a></h2><p>首先，你需要生成一个签名。这个过程涉及使用你的私钥对优惠参数进行加密。</p><ol><li><strong>收集必要信息</strong>：包括产品ID、优惠ID、顾客ID和时间戳。</li><li><strong>创建签名数据</strong>：将这些信息组合成一个字符串。</li><li><strong>使用私钥签名</strong>：使用你的App Store Connect私钥对字符串进行签名。</li><li><strong>编码签名</strong>：将签名编码为Base64字符串，以便在网络上传输。</li></ol><blockquote><p>确保你的私钥安全存储，不要泄露给任何人！🔐</p></blockquote><h2 id="优惠签名验证流程" tabindex="-1">优惠签名验证流程 <a class="header-anchor" href="#优惠签名验证流程" aria-label="Permalink to &quot;优惠签名验证流程&quot;">​</a></h2><p>验证签名是确保优惠真实性的重要环节。</p><ol><li><strong>接收签名数据</strong>：从你的服务器或应用接收签名数据。</li><li><strong>解码签名</strong>：将Base64编码的签名解码为原始字节。</li><li><strong>使用公钥验证</strong>：使用Apple提供的公钥验证签名是否有效。</li><li><strong>检查数据一致性</strong>：确保签名中的数据与你应用中的数据一致。</li></ol><ul><li>验证失败可能意味着签名被篡改或无效。</li><li>务必记录所有验证尝试，以便进行安全审计。</li></ul><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><p>以下是一个简化的代码示例，展示了如何使用Swift生成签名：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CryptoKit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foundation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateOfferSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">productID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offerID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(productID)\\(offerID)\\(customerID)\\(timestamp)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataString.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PKSigner.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: privateKey)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">base64EncodedString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;签名生成失败: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这段代码展示了如何使用<code>CryptoKit</code>库生成签名。你需要替换<code>privateKey</code>为你的实际私钥数据。</p><h2 id="安全最佳实践" tabindex="-1">安全最佳实践 <a class="header-anchor" href="#安全最佳实践" aria-label="Permalink to &quot;安全最佳实践&quot;">​</a></h2><ul><li><strong>保护私钥</strong>：将私钥存储在安全的地方，例如硬件安全模块（HSM）。</li><li><strong>使用HTTPS</strong>：确保所有与签名相关的通信都使用HTTPS协议。</li><li><strong>限制签名有效期</strong>：为签名设置一个有效期，防止重放攻击。</li><li><strong>定期更换密钥</strong>：定期更换你的私钥，以提高安全性。</li></ul><blockquote><p>记住，安全是持续的过程，不断学习和改进你的安全措施！💪</p></blockquote><p>通过遵循这些步骤和最佳实践，你可以确保你的促销优惠安全可靠，为用户提供更好的体验，同时保护你的应用收入。🎉</p>`,18)]))}const o=i(l,[["render",h]]);export{g as __pageData,o as default};
