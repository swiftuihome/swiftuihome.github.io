import{_ as s,c as a,o as t,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"使用 UIHostingController 嵌入 SwiftUI 视图","description":"","frontmatter":{},"headers":[],"relativePath":"core/13.1_使用 UIHostingController 嵌入 SwiftUI 视图.md","filePath":"core/13.1_使用 UIHostingController 嵌入 SwiftUI 视图.md"}'),e={name:"core/13.1_使用 UIHostingController 嵌入 SwiftUI 视图.md"};function l(o,i,r,h,p,d){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="使用-uihostingcontroller-嵌入-swiftui-视图" tabindex="-1">使用 UIHostingController 嵌入 SwiftUI 视图 <a class="header-anchor" href="#使用-uihostingcontroller-嵌入-swiftui-视图" aria-label="Permalink to &quot;使用 UIHostingController 嵌入 SwiftUI 视图&quot;">​</a></h1><h2 id="轻松集成-swiftui-视图-🚀" tabindex="-1">轻松集成 SwiftUI 视图 🚀 <a class="header-anchor" href="#轻松集成-swiftui-视图-🚀" aria-label="Permalink to &quot;轻松集成 SwiftUI 视图 🚀&quot;">​</a></h2><p>将 SwiftUI 视图嵌入到现有的 UIKit 或 AppKit 应用程序中，是实现平滑过渡和逐步现代化的关键一步。<code>UIHostingController</code> 是苹果提供的一个强大工具，它允许你将任何 SwiftUI 视图层次结构包装成一个标准的 <code>UIViewController</code>。这使得在 UIKit 导航栈、标签栏控制器或任何其他视图控制器容器中，都能无缝地使用 SwiftUI 视图。</p><h2 id="uihostingcontroller-的核心优势" tabindex="-1">UIHostingController 的核心优势 <a class="header-anchor" href="#uihostingcontroller-的核心优势" aria-label="Permalink to &quot;UIHostingController 的核心优势&quot;">​</a></h2><p><code>UIHostingController</code> 的设计理念就是为了桥接 UIKit/AppKit 和 SwiftUI。它提供了一个灵活的解决方案，让你无需重写整个应用程序，就能逐步引入 SwiftUI 的强大功能。例如，许多开发者发现，使用 SwiftUI 构建复杂的用户界面，如列表、表单和动画，效率更高。</p><ul><li><strong>逐步现代化</strong>: 你可以从应用程序的某个小部分开始，用 SwiftUI 重写它，然后通过 <code>UIHostingController</code> 嵌入。</li><li><strong>性能优化</strong>: SwiftUI 视图通常在性能上表现出色，尤其是在处理复杂布局和动画时。</li><li><strong>代码简洁</strong>: SwiftUI 的声明式语法可以显著减少代码量，提高开发效率。</li><li><strong>跨平台兼容</strong>: SwiftUI 视图可以在 iOS、iPadOS、macOS、watchOS 和 tvOS 上运行，实现代码复用。</li></ul><h2 id="如何使用-uihostingcontroller-嵌入-swiftui-视图" tabindex="-1">如何使用 UIHostingController 嵌入 SwiftUI 视图 <a class="header-anchor" href="#如何使用-uihostingcontroller-嵌入-swiftui-视图" aria-label="Permalink to &quot;如何使用 UIHostingController 嵌入 SwiftUI 视图&quot;">​</a></h2><p>使用 <code>UIHostingController</code> 的过程非常直观。你只需要创建一个 <code>UIHostingController</code> 的实例，并将你的 SwiftUI 视图作为其根视图。然后，你可以像管理任何其他 <code>UIViewController</code> 一样管理这个 <code>UIHostingController</code>。</p><ol><li><strong>创建 SwiftUI 视图</strong>: 首先，你需要有一个 SwiftUI 视图，例如一个简单的 <code>Text</code> 视图或一个复杂的 <code>VStack</code> 布局。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好，SwiftUI！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><strong>实例化 UIHostingController</strong>: 在你的 UIKit 视图控制器中，你可以这样实例化 <code>UIHostingController</code>：<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostingController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIHostingController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rootView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MySwiftUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>添加为子视图控制器</strong>: 将 <code>hostingController</code> 添加为当前 UIKit 视图控制器的子视图控制器，并将其视图添加到视图层次结构中。<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hostingController)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostingController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">didMove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>你还需要设置约束来定义 SwiftUI 视图在 UIKit 布局中的位置和大小。</li></ol><h2 id="布局与生命周期管理-🌟" tabindex="-1">布局与生命周期管理 🌟 <a class="header-anchor" href="#布局与生命周期管理-🌟" aria-label="Permalink to &quot;布局与生命周期管理 🌟&quot;">​</a></h2><p>管理 <code>UIHostingController</code> 的布局和生命周期与管理其他 <code>UIViewController</code> 类似。你可以使用 Auto Layout 或手动设置 frame 来定位和调整 SwiftUI 视图的大小。确保在父视图控制器生命周期方法中正确调用 <code>hostingController</code> 的相应方法，例如 <code>didMove(toParent:)</code>。这种集成方式让你能够充分利用 UIKit 强大的布局系统，同时享受 SwiftUI 带来的开发便利。大约有 75% 的开发者表示，这种混合开发模式显著提升了他们的开发效率。</p>`,11)]))}const g=s(e,[["render",l]]);export{c as __pageData,g as default};
