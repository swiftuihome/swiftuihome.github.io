import{_ as i,c as r,o as e,ag as d}from"./chunks/framework.Bw-5EFTY.js";const G=JSON.parse('{"title":"SwiftUI网格布局：从LazyVGrid到Grid的全面实践","description":"","frontmatter":{},"headers":[],"relativePath":"grid/目录.md","filePath":"grid/目录.md"}'),t={name:"grid/目录.md"};function o(l,a,n,_,h,s){return e(),r("div",null,a[0]||(a[0]=[d('<h1 id="swiftui网格布局-从lazyvgrid到grid的全面实践" tabindex="-1">SwiftUI网格布局：从LazyVGrid到Grid的全面实践 <a class="header-anchor" href="#swiftui网格布局-从lazyvgrid到grid的全面实践" aria-label="Permalink to &quot;SwiftUI网格布局：从LazyVGrid到Grid的全面实践&quot;">​</a></h1><h2 id="第1章-lazyvgrid-垂直网格布局入门" tabindex="-1">第1章 LazyVGrid：垂直网格布局入门 <a class="header-anchor" href="#第1章-lazyvgrid-垂直网格布局入门" aria-label="Permalink to &quot;第1章 LazyVGrid：垂直网格布局入门&quot;">​</a></h2><p>1.1_创建基本的LazyVGrid 1.2_理解ScrollView的必要性 1.3_配置GridItem以定义列 1.4_使用.fixed()创建固定宽度的列 1.5_使用.flexible()创建灵活宽度的列 1.6_使用.adaptive()创建自适应宽度的列</p><h2 id="第2章-lazyhgrid-水平网格布局入门" tabindex="-1">第2章 LazyHGrid：水平网格布局入门 <a class="header-anchor" href="#第2章-lazyhgrid-水平网格布局入门" aria-label="Permalink to &quot;第2章 LazyHGrid：水平网格布局入门&quot;">​</a></h2><p>2.1_创建基本的LazyHGrid 2.2_在水平ScrollView中嵌入LazyHGrid 2.3_配置GridItem以定义行 2.4_使用.fixed()创建固定高度的行 2.5_使用.flexible()创建灵活高度的行 2.6_使用.adaptive()创建自适应高度的行</p><h2 id="第3章-通用配置与修饰符" tabindex="-1">第3章 通用配置与修饰符 <a class="header-anchor" href="#第3章-通用配置与修饰符" aria-label="Permalink to &quot;第3章 通用配置与修饰符&quot;">​</a></h2><p>3.1_设置网格的整体对齐方式 (alignment) 3.2_调整网格项之间的间距 (spacing) 3.3_使用PinnedViews固定页眉和页脚 3.4_为网格项添加内边距 (padding)</p><h2 id="第4章-griditem-高级配置" tabindex="-1">第4章 GridItem 高级配置 <a class="header-anchor" href="#第4章-griditem-高级配置" aria-label="Permalink to &quot;第4章 GridItem 高级配置&quot;">​</a></h2><p>4.1_混合使用fixed, flexible, 和 adaptive 4.2_为GridItem设置自定义间距 4.3_为GridItem设置对齐方式 4.4_动态生成GridItem数组 4.5_响应设备方向变化调整列数</p><h2 id="第5章-数据驱动的网格布局" tabindex="-1">第5章 数据驱动的网格布局 <a class="header-anchor" href="#第5章-数据驱动的网格布局" aria-label="Permalink to &quot;第5章 数据驱动的网格布局&quot;">​</a></h2><p>5.1_使用ForEach处理动态数据集合 5.2_为网格项实现Identifiable协议 5.3_使用UUID或自定义ID作为唯一标识 5.4_在网格中处理可选数据</p><h2 id="第6章-带区段的网格布局-sections" tabindex="-1">第6章 带区段的网格布局 (Sections) <a class="header-anchor" href="#第6章-带区段的网格布局-sections" aria-label="Permalink to &quot;第6章 带区段的网格布局 (Sections)&quot;">​</a></h2><p>6.1_在LazyVGrid-LazyHGrid中使用Section 6.2_为每个Section添加自定义页眉 (Header) 6.3_为每个Section添加自定义页脚 (Footer) 6.4_实现可折叠的Section</p><h2 id="第7章-grid-视图基础" tabindex="-1">第7章 Grid 视图基础 <a class="header-anchor" href="#第7章-grid-视图基础" aria-label="Permalink to &quot;第7章 Grid 视图基础&quot;">​</a></h2><p>7.1_Grid与LazyVGrid-LazyHGrid的区别 7.2_创建基本的Grid视图 7.3_使用GridRow组织行内容 7.4_在GridRow中放置视图</p><h2 id="第8章-控制单元格尺寸与位置" tabindex="-1">第8章 控制单元格尺寸与位置 <a class="header-anchor" href="#第8章-控制单元格尺寸与位置" aria-label="Permalink to &quot;第8章 控制单元格尺寸与位置&quot;">​</a></h2><p>8.1_使用.gridCellColumns()实现跨列 8.2_使用.gridCellAnchor()设置单元格内对齐 8.3_使用.gridColumnAlignment()设置整列对齐 8.4_使用GridRow的alignment参数控制行内对齐</p><h2 id="第9章-高级grid布局" tabindex="-1">第9章 高级Grid布局 <a class="header-anchor" href="#第9章-高级grid布局" aria-label="Permalink to &quot;第9章 高级Grid布局&quot;">​</a></h2><p>9.1_使用Spacer在Grid中创建空单元格 9.2_使用.gridCellUnsizedAxes()忽略单元格尺寸计算 9.3_嵌套Grid实现复杂布局 9.4_动态构建GridRow和视图</p><h2 id="第10章-构建常见ui模式" tabindex="-1">第10章 构建常见UI模式 <a class="header-anchor" href="#第10章-构建常见ui模式" aria-label="Permalink to &quot;第10章 构建常见UI模式&quot;">​</a></h2><p>10.1_实战：创建一个照片画廊 (LazyVGrid) 10.2_实战：创建一个类似App Store的分类列表 (LazyHGrid) 10.3_实战：创建一个复杂的设置界面 (Grid) 10.4_实战：创建一个日历视图 (LazyVGrid)</p><h2 id="第11章-性能优化策略" tabindex="-1">第11章 性能优化策略 <a class="header-anchor" href="#第11章-性能优化策略" aria-label="Permalink to &quot;第11章 性能优化策略&quot;">​</a></h2><p>11.1_理解“Lazy”的含义和性能优势 11.2_避免在网格项视图中进行昂贵的计算 11.3_优化数据加载以配合懒加载网格 11.4_使用.drawingGroup()优化复杂视图渲染 11.5_何时选择Grid而非Lazy Grid</p>',23)]))}const p=i(t,[["render",o]]);export{G as __pageData,p as default};
