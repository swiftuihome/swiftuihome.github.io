import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"缓存响应以提升性能","description":"","frontmatter":{},"headers":[],"relativePath":"swift/alamofire/7.1_缓存响应以提升性能.md","filePath":"swift/alamofire/7.1_缓存响应以提升性能.md"}'),l={name:"swift/alamofire/7.1_缓存响应以提升性能.md"};function h(p,s,t,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="缓存响应以提升性能" tabindex="-1">缓存响应以提升性能 <a class="header-anchor" href="#缓存响应以提升性能" aria-label="Permalink to &quot;缓存响应以提升性能&quot;">​</a></h1><p>缓存是提高应用中网络请求性能的关键技术。通过在本地存储响应，你可以减少网络调用的次数、最小化延迟，并提供更流畅的用户体验。Alamofire 是 Swift 中一个强大的网络库，它通过 <code>URLCache</code> 提供了内置的缓存支持。本章将指导你在 Alamofire 中实现缓存，以优化你的应用性能。</p><h2 id="理解-alamofire-中的缓存" tabindex="-1">理解 Alamofire 中的缓存 <a class="header-anchor" href="#理解-alamofire-中的缓存" aria-label="Permalink to &quot;理解 Alamofire 中的缓存&quot;">​</a></h2><p>缓存的工作原理是将 HTTP 响应存储在设备本地。当发起请求时，应用会首先检查是否存在有效的缓存响应。如果存在，应用会使用缓存的数据，而不是发起网络请求。这个过程由 <code>Cache-Control</code> 和 <code>ETag</code> 等 HTTP 头控制。</p><p>Alamofire 利用 <code>URLCache</code>（它是 Foundation 框架的一部分）来处理缓存。<code>URLCache</code> 在内存和磁盘中存储响应，允许你控制缓存大小和行为。要启用缓存，你需要配置 <code>URLCache</code> 并确保你的服务器发送适当的缓存头。</p><h2 id="配置-urlcache" tabindex="-1">配置 URLCache <a class="header-anchor" href="#配置-urlcache" aria-label="Permalink to &quot;配置 URLCache&quot;">​</a></h2><p>要在你的应用中设置缓存，你必须配置 <code>URLCache</code> 的共享实例。以下是如何做到这一点的示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Alamofire</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置 URLCache，内存容量为 20 MB，磁盘容量为 100 MB</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> URLCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">memoryCapacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">diskCapacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">diskPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">URLCache.shared </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个示例中，缓存被配置为内存容量 20 MB，磁盘容量 100 MB。你可以根据应用的需求调整这些值。</p><h2 id="在-alamofire-请求中实现缓存" tabindex="-1">在 Alamofire 请求中实现缓存 <a class="header-anchor" href="#在-alamofire-请求中实现缓存" aria-label="Permalink to &quot;在 Alamofire 请求中实现缓存&quot;">​</a></h2><p>Alamofire 会自动遵守服务器定义的缓存策略。但是，你可以使用 <code>cachePolicy</code> 参数为特定请求自定义缓存行为。以下是一个示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AF.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cachePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .returnCacheDataElseLoad).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">responseJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.result {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;响应：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(value)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;错误：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个示例中，<code>cachePolicy</code> 被设置为 <code>.returnCacheDataElseLoad</code>，这意味着如果有可用的缓存数据，应用将返回缓存数据；否则，它将发起网络请求。</p><h2 id="处理缓存验证" tabindex="-1">处理缓存验证 <a class="header-anchor" href="#处理缓存验证" aria-label="Permalink to &quot;处理缓存验证&quot;">​</a></h2><p>缓存验证确保缓存的数据仍然有效。这通常使用 <code>ETag</code> 或 <code>Last-Modified</code> 头来完成。如果服务器支持，Alamofire 会自动处理缓存验证。以下是如何检查响应是否来自缓存的示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AF.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">responseJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cachedResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.urlCacheStatus {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cachedResponse {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .cached</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;响应来自缓存&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .notCached</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;响应来自网络&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="自定义缓存头" tabindex="-1">自定义缓存头 <a class="header-anchor" href="#自定义缓存头" aria-label="Permalink to &quot;自定义缓存头&quot;">​</a></h2><p>你也可以为特定请求自定义缓存头。例如，你可以设置 <code>Cache-Control</code> 头来控制响应应该被缓存多长时间：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers: HTTPHeaders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Cache-Control&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;max-age=3600&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将响应缓存 1 小时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AF.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: headers).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">responseJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个示例中，<code>Cache-Control</code> 头被设置为 <code>max-age=3600</code>，这指示缓存将响应存储一小时。</p><h2 id="清除缓存" tabindex="-1">清除缓存 <a class="header-anchor" href="#清除缓存" aria-label="Permalink to &quot;清除缓存&quot;">​</a></h2><p>有时，你可能需要清除缓存以确保获取最新的数据。你可以使用 <code>removeAllCachedResponses</code> 方法来做到这一点：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">URLCache.shared.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeAllCachedResponses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此方法会从内存和磁盘中删除所有缓存的响应。</p><h2 id="缓存的最佳实践" tabindex="-1">缓存的最佳实践 <a class="header-anchor" href="#缓存的最佳实践" aria-label="Permalink to &quot;缓存的最佳实践&quot;">​</a></h2><ol><li><strong>使用适当的缓存持续时间</strong>：根据数据变化的频率设置缓存持续时间。例如，像图像这样的静态资源可以缓存更长时间，而动态数据应该有更短的缓存持续时间。</li><li><strong>利用服务器端缓存头</strong>：确保你的服务器发送适当的缓存头，如 <code>Cache-Control</code>、<code>ETag</code> 和 <code>Last-Modified</code>。</li><li><strong>监控缓存使用情况</strong>：定期监控缓存使用情况，确保它不会消耗过多的内存或磁盘空间。</li><li><strong>必要时使缓存失效</strong>：当数据发生变化时清除缓存，以确保用户收到最新的信息。</li></ol><p>通过有效地实现缓存，你可以显著提高应用的性能并提供更好的用户体验。Alamofire 与 <code>URLCache</code> 的集成使你能够轻松地将缓存添加到网络层，而无需大量的自定义代码。</p><p>缓存是一个强大的工具，但它需要仔细的规划和测试，以确保其按预期工作。始终在不同的网络条件下测试你的缓存实现，以验证其有效性。</p>`,28)]))}const o=i(l,[["render",h]]);export{c as __pageData,o as default};
