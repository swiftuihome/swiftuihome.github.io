import{_ as i,c as t,o as l,ag as e}from"./chunks/framework.Bw-5EFTY.js";const u=JSON.parse('{"title":"第24天 项目3 第二部分","description":"","frontmatter":{},"headers":[],"relativePath":"100days/第24天_项目3_第二部分.md","filePath":"100days/第24天_项目3_第二部分.md"}'),r={name:"100days/第24天_项目3_第二部分.md"};function s(a,o,n,d,c,g){return l(),t("div",null,o[0]||(o[0]=[e('<h1 id="第24天-项目3-第二部分" tabindex="-1">第24天 项目3 第二部分 <a class="header-anchor" href="#第24天-项目3-第二部分" aria-label="Permalink to &quot;第24天 项目3 第二部分&quot;">​</a></h1><p>阿尔伯特・爱因斯坦曾说过：“任何傻瓜都能知道答案，关键在于理解”，而本项目的核心目的就是让你更深入地理解 SwiftUI 的工作原理。毕竟，在接下来的 76 天里，你都要和它打交道，所以在继续学习之前，确保打下坚实的基础是非常有必要的。</p><p>我本可以直接告诉你 “SwiftUI 使用结构体来定义视图” 或者 “SwiftUI 经常用到 <code>some View</code>”，事实上，在你刚开始学习、只需要掌握这些基础内容的时候，我确实是这么说的。但现在你已经超出了基础阶段，理解自己正在使用的工具就变得尤为重要 —— 这样当你查看代码时，就不会再隐约觉得自己没搞懂某个东西的用途。</p><p>Swift 的很多特性都是专门为 SwiftUI 打造的，所以如果你看到某些特性时觉得超出了自己的水平，不用感到担心。仔细想想，在 Swift 带着这些特性发布之前，这些特性对所有人来说都属于超出水平的内容！</p><p><strong>今天，你需要完成项目 3 的总结章节、章节对应的复习内容，然后完成所有三个挑战任务。</strong></p><ul><li>视图与修饰符：总结</li><li>项目 3 复习：视图与修饰符</li></ul><p>完成这些任务后，别忘了保持责任感，向其他人分享你的学习进度！</p><h2 id="视图与修饰符-总结" tabindex="-1">视图与修饰符：总结 <a class="header-anchor" href="#视图与修饰符-总结" aria-label="Permalink to &quot;视图与修饰符：总结&quot;">​</a></h2><p><em>作者：Paul Hudson 2021 年 10 月 23 日</em></p><p>这些技术项目旨在深入探讨 SwiftUI 的特定主题，希望你已经从中学到了很多关于视图和修饰符的知识 —— 比如 SwiftUI 为什么用结构体定义视图、<code>some View</code> 为什么如此实用、修饰符的顺序为什么很重要等等。</p><p>视图和修饰符是所有 SwiftUI 应用的基础构建模块，这也是我在课程早期就重点讲解它们的原因。视图组合尤其关键，通过视图组合，我们可以创建小型、可复用的视图，再将这些视图像积木一样组装成更复杂的用户界面。</p><h2 id="复习所学内容" tabindex="-1">复习所学内容 <a class="header-anchor" href="#复习所学内容" aria-label="Permalink to &quot;复习所学内容&quot;">​</a></h2><p>任何人都能看完一个教程，但要记住教程里讲的内容，还需要付出实际的努力。我的职责是确保你能从这些教程中收获尽可能多的知识，完成后面的练习题，帮助你检验自己的学习成果。</p><h2 id="挑战任务" tabindex="-1">挑战任务 <a class="header-anchor" href="#挑战任务" aria-label="Permalink to &quot;挑战任务&quot;">​</a></h2><p>学习编程最好的方法之一就是尽可能多地自己写代码，所以这里有三个扩展本应用的任务，帮助你彻底理解相关知识：</p><ol><li>回到项目 1，使用条件修饰符，当用户选择 0% 的小费比例时，将总金额文本视图的颜色改为红色。</li><li>回到项目 2，用一个新的 <code>FlagImage()</code> 视图替换原来用于显示国旗的 <code>Image</code> 视图，新视图要包含我们之前用到的那组特定修饰符，以渲染国旗图像。</li><li>创建一个自定义的 <code>ViewModifier</code>（以及对应的 <code>View</code> 扩展），使视图显示大号蓝色字体，适用于视图中醒目的标题。</li></ol><h2 id="【练习题】视图与修饰符" tabindex="-1">【练习题】视图与修饰符 <a class="header-anchor" href="#【练习题】视图与修饰符" aria-label="Permalink to &quot;【练习题】视图与修饰符&quot;">​</a></h2><p>问题 1/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 应用修饰符的顺序会影响最终结果。</li><li><strong>选项 2：</strong> 每个修饰符对某个给定视图只能应用一次。</li></ul><p>问题 2/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> SwiftUI 视图会自动位于安全区域内，除非我们另行设置。</li><li><strong>选项 2：</strong> 我们可以创建自定义视图，但无法为自定义视图应用修饰符。</li></ul><p>问题 3/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 将 SwiftUI 视图拆分为更小的视图，对性能几乎没有影响。</li><li><strong>选项 2：</strong> 视图一旦应用了背景颜色，就无法再更改。</li></ul><p>问题 4/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> <code>some View</code> 中的 <code>some</code> 关键字表示不透明返回类型。</li><li><strong>选项 2：</strong> 某个给定视图最多只能添加五个修饰符。</li></ul><p>问题 5/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 更改视图的任何 <code>@State</code> 属性，都会导致 SwiftUI 重新调用 body 属性。</li><li><strong>选项 2：</strong> 在特殊情况下，视图的 body 可以返回 <code>View</code> 类型，而不是 <code>some View</code> 类型。</li></ul><p>问题 6/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 如果一个 <code>VStack</code> 设置了前景色，且其内部的某些文本也设置了前景色，会使用 <code>VStack</code> 的前景色。</li><li><strong>选项 2：</strong> 如果一个 <code>VStack</code> 设置了前景色，且其内部的某些文本也设置了前景色，会使用文本的前景色。</li></ul><p>问题 7/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 从 SwiftUI 视图的 body 中，必须始终返回 <code>some View</code> 类型。</li><li><strong>选项 2：</strong> 可以使用三元条件运算符来调整传递给修饰符的值。</li></ul><p>问题 8/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> SwiftUI 视图应该用结构体定义，而不是类。</li><li><strong>选项 2：</strong> 结构体不能包含闭包。</li></ul><p>问题 9/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> <code>some View</code> 允许 Swift 准确判断出返回的视图类型。</li><li><strong>选项 2：</strong> 视图不能与计算属性一起使用。</li></ul><p>问题 10/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 自定义视图修饰符必须遵循 <code>ViewModifier</code> 协议。</li><li><strong>选项 2：</strong> 视图修饰符必须返回其接收的原始视图结构体。</li></ul><p>问题 11/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> SwiftUI 允许我们创建自己的自定义视图修饰符。</li><li><strong>选项 2：</strong> 视图组合指的是用视图创作音乐。</li></ul><p>问题 12/12：以下哪些表述是正确的？</p><ul><li><strong>选项 1：</strong> 可以为视图指定最大宽度和最大高度。</li><li><strong>选项 2：</strong> 颜色不能作为视图使用。</li></ul>',41)]))}const _=i(r,[["render",s]]);export{u as __pageData,_ as default};
