import{_ as o,c as t,o as a,ag as c}from"./chunks/framework.Bw-5EFTY.js";const u=JSON.parse('{"title":"将组件代码移入包中","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/14.4_将组件代码移入包中.md","filePath":"custom_views/14.4_将组件代码移入包中.md"}'),p={name:"custom_views/14.4_将组件代码移入包中.md"};function d(i,e,r,s,n,_){return a(),t("div",null,e[0]||(e[0]=[c('<h1 id="将组件代码移入包中" tabindex="-1">将组件代码移入包中 <a class="header-anchor" href="#将组件代码移入包中" aria-label="Permalink to &quot;将组件代码移入包中&quot;">​</a></h1><h2 id="迁移组件代码" tabindex="-1">迁移组件代码 <a class="header-anchor" href="#迁移组件代码" aria-label="Permalink to &quot;迁移组件代码&quot;">​</a></h2><p>将你的SwiftUI组件代码迁移到新的Swift包中，这是一个激动人心的步骤！🚀 你会发现这个过程非常直接，并且能让你的组件更易于管理和复用。</p><p>首先，你需要打开你的Xcode项目。</p><p>找到你之前创建的SwiftUI视图文件。</p><p>例如，如果你有一个名为<code>MyCustomView.swift</code>的文件，其中包含了你的自定义视图代码。</p><h2 id="组织文件结构" tabindex="-1">组织文件结构 <a class="header-anchor" href="#组织文件结构" aria-label="Permalink to &quot;组织文件结构&quot;">​</a></h2><p>在你的Swift包中，你会看到一个默认的<code>Sources</code>文件夹。</p><p>这个文件夹是存放所有源代码的地方。</p><p>在<code>Sources</code>下，你会找到一个与你的包名同名的子文件夹。</p><p>例如，如果你的包名为<code>MyComponents</code>，那么路径就是<code>Sources/MyComponents</code>。</p><p>将你的SwiftUI视图文件拖拽到这个子文件夹中。</p><p>Xcode会自动处理文件引用，确保一切顺利。</p><h2 id="调整访问修饰符" tabindex="-1">调整访问修饰符 <a class="header-anchor" href="#调整访问修饰符" aria-label="Permalink to &quot;调整访问修饰符&quot;">​</a></h2><p>当你将代码移入包中时，默认的访问修饰符可能是<code>internal</code>。</p><p>这意味着你的组件只能在包内部访问。</p><p>为了让其他项目能够使用你的组件，你需要将它们声明为<code>public</code>。</p><p>找到你的<code>struct</code>或<code>class</code>定义，并在前面加上<code>public</code>关键字。</p><p>例如，<code>struct MyCustomView: View</code>应该变为<code>public struct MyCustomView: View</code>。</p><p>同样，任何你希望外部访问的属性或方法也需要声明为<code>public</code>。</p><h2 id="验证迁移效果" tabindex="-1">验证迁移效果 <a class="header-anchor" href="#验证迁移效果" aria-label="Permalink to &quot;验证迁移效果&quot;">​</a></h2><p>完成代码迁移和访问修饰符的调整后，是时候验证一下了。</p><p>在你的主应用项目中，确保你已经正确地引用了你的Swift包。</p><p>你可以在主应用项目的<code>ContentView</code>中尝试实例化你的自定义视图。</p><p>例如，<code>MyCustomView()</code>。</p><p>如果一切顺利，你的组件应该能够正常显示，并且没有任何编译错误。</p><p>恭喜你！🎉 你已经成功地将你的SwiftUI组件代码封装到了一个可复用的Swift包中。</p><p>这不仅提升了代码的模块化程度，也为未来的组件共享和发布奠定了坚实的基础。</p><p>现在，你的组件已经准备好被其他项目轻松使用了！🥳</p>',29)]))}const h=o(p,[["render",d]]);export{u as __pageData,h as default};
