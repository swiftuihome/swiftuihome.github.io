import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"7.2_关闭translatesAutoresizingMaskIntoConstraints","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/7.2_关闭translatesAutoresizingMaskIntoConstraints.md","filePath":"uikit/basics/7.2_关闭translatesAutoresizingMaskIntoConstraints.md"}'),e={name:"uikit/basics/7.2_关闭translatesAutoresizingMaskIntoConstraints.md"};function l(r,s,p,h,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_7-2-关闭translatesautoresizingmaskintoconstraints" tabindex="-1">7.2_关闭translatesAutoresizingMaskIntoConstraints <a class="header-anchor" href="#_7-2-关闭translatesautoresizingmaskintoconstraints" aria-label="Permalink to &quot;7.2_关闭translatesAutoresizingMaskIntoConstraints&quot;">​</a></h1><blockquote><p>在iOS开发中，当你使用Auto Layout进行界面布局时，理解并正确处理 <code>translatesAutoresizingMaskIntoConstraints</code> 属性至关重要。这个属性决定了系统是否自动将基于Autoresizing Mask的布局规则转换为Auto Layout约束。让我们一起深入了解如何关闭它，以及为什么这样做对你的布局至关重要！🎉</p></blockquote><h2 id="什么是-translatesautoresizingmaskintoconstraints" tabindex="-1">什么是 <code>translatesAutoresizingMaskIntoConstraints</code>？ <a class="header-anchor" href="#什么是-translatesautoresizingmaskintoconstraints" aria-label="Permalink to &quot;什么是 \`translatesAutoresizingMaskIntoConstraints\`？&quot;">​</a></h2><p>简单来说，<code>translatesAutoresizingMaskIntoConstraints</code> 是一个布尔类型的属性，存在于 <code>UIView</code> 类中。当它的值为 <code>true</code> 时（默认值），系统会根据视图的 Autoresizing Mask 自动生成对应的 Auto Layout 约束。Autoresizing Mask 是一种旧的布局方式，它通过设置视图的 <code>autoresizingMask</code> 属性来定义视图在父视图大小改变时的行为。</p><ul><li>Autoresizing Mask 依赖于视图的 <code>frame</code> 属性。</li><li>Auto Layout 依赖于约束（Constraints）。</li></ul><h2 id="为什么要关闭它-🤔" tabindex="-1">为什么要关闭它？🤔 <a class="header-anchor" href="#为什么要关闭它-🤔" aria-label="Permalink to &quot;为什么要关闭它？🤔&quot;">​</a></h2><p>当你完全使用 Auto Layout 进行布局时，你需要关闭 <code>translatesAutoresizingMaskIntoConstraints</code>。这是因为：</p><ol><li><strong>避免冲突</strong>：Autoresizing Mask 产生的约束可能与你手动添加的 Auto Layout 约束冲突，导致布局混乱。</li><li><strong>完全控制</strong>：关闭后，你可以完全通过 Auto Layout 约束来控制视图的布局，确保布局的精确性和一致性。</li><li><strong>性能优化</strong>：虽然影响不大，但关闭它可以避免系统不必要的约束转换计算。</li></ol><h2 id="如何关闭-translatesautoresizingmaskintoconstraints" tabindex="-1">如何关闭 <code>translatesAutoresizingMaskIntoConstraints</code>？ <a class="header-anchor" href="#如何关闭-translatesautoresizingmaskintoconstraints" aria-label="Permalink to &quot;如何关闭 \`translatesAutoresizingMaskIntoConstraints\`？&quot;">​</a></h2><p>关闭这个属性非常简单，你只需要在创建视图后，设置它的 <code>translatesAutoresizingMaskIntoConstraints</code> 属性为 <code>false</code> 即可。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>请记住，<strong>必须</strong>在将视图添加到父视图之前完成此操作。否则，系统可能会在你设置 <code>translatesAutoresizingMaskIntoConstraints</code> 为 <code>false</code> 之前，就基于 Autoresizing Mask 创建了约束。</p><h2 id="示例-创建一个简单的视图" tabindex="-1">示例：创建一个简单的视图 <a class="header-anchor" href="#示例-创建一个简单的视图" aria-label="Permalink to &quot;示例：创建一个简单的视图&quot;">​</a></h2><p>让我们创建一个简单的例子，演示如何关闭 <code>translatesAutoresizingMaskIntoConstraints</code> 并使用 Auto Layout 约束来定位一个视图。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myView.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 关闭！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 添加约束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myView.widthAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myView.heightAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myView.centerXAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.centerXAnchor).isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myView.centerYAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.centerYAnchor).isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在这个例子中，我们创建了一个红色的 <code>UIView</code>，并将其 <code>translatesAutoresizingMaskIntoConstraints</code> 设置为 <code>false</code>。然后，我们使用 Auto Layout 约束将其居中放置在父视图中，并设置了它的宽度和高度。</p><ul><li><code>widthAnchor</code> 和 <code>heightAnchor</code> 设置视图的尺寸。</li><li><code>centerXAnchor</code> 和 <code>centerYAnchor</code> 将视图居中。</li></ul><p>通过这种方式，你可以完全控制视图的布局，避免了 Autoresizing Mask 带来的潜在问题。希望这个教程能帮助你更好地理解和使用 <code>translatesAutoresizingMaskIntoConstraints</code>！继续加油！💪</p>`,18)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
