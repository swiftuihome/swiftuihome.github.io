import{_ as s,c as a,o as e,ag as l}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"第42天 项目 8 第四部分","description":"","frontmatter":{},"headers":[],"relativePath":"100days/第42天_项目8_第四部分.md","filePath":"100days/第42天_项目8_第四部分.md"}'),n={name:"100days/第42天_项目8_第四部分.md"};function t(p,i,o,d,r,c){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="第42天-项目-8-第四部分" tabindex="-1">第42天 项目 8 第四部分 <a class="header-anchor" href="#第42天-项目-8-第四部分" aria-label="Permalink to &quot;第42天 项目 8 第四部分&quot;">​</a></h1><p>你现在已经完成了“月球探索”（Moonshot）项目，这是我们首个开始变得有难度的项目——讲解耗时更长，我们使用了自定义的SwiftUI布局，我甚至还悄悄加入了一些高级Swift特性。并非我们之后所有的项目都会这么难，但未来的项目肯定会更“复杂”：它们包含的内容更多，这意味着最终做出的应用会更有趣，也更能代表真实世界中的应用开发场景。</p><p>随着复杂度的提升，出错的概率也会增加，而Swift在这方面相当“严格”——想必你现在已经深有体会，哪怕第20行有一个小小的错误，都可能导致第5行出现一个莫名其妙的错误，这可能会让人灰心丧气。</p><p>不过，希望今天的这句话能给你带来启发。我特意为今天挑选了这句话，原因留给读者自行体会，这句话就是：别慌！这类问题很常见，目前解决它们最简单的方法就是把你最近添加的代码注释掉，一直这样做，直到代码能正常运行。之后你可以慢慢重新加入代码，直到找到导致编译失败的部分，然后修复它。</p><p>所以，别慌——你能做到的！</p><p>今天你需要完成第8个项目的总结章节，完成相关复习，然后攻克它的三个挑战。</p><ul><li>月球探索：总结</li><li>第8个项目“月球探索”复习</li></ul><h2 id="月球探索-总结" tabindex="-1">月球探索：总结 <a class="header-anchor" href="#月球探索-总结" aria-label="Permalink to &quot;月球探索：总结&quot;">​</a></h2><p>作者：Paul Hudson 2023年11月1日</p><p>这个应用是我们目前构建过的最复杂的应用。没错，它包含多个视图，但我们也跳出了列表（lists）和表单（forms）的范畴，开始使用我们自己的滚动布局，通过<code>containerRelativeFrame()</code>来获得精确的尺寸，从而充分利用可用空间。</p><p>但这也是我们目前编写过的最复杂的Swift代码——泛型（generics）是一项极具威力的特性，一旦加入约束条件，你就能开启大量功能，既能节省时间，又能提升灵活性。</p><p>你现在也开始体会到<code>Codable</code>的实用性了：它能一次性解码层级化的数据，这一能力非常宝贵，这也是它成为众多Swift应用核心组件的原因。</p><h2 id="复习所学内容" tabindex="-1">复习所学内容 <a class="header-anchor" href="#复习所学内容" aria-label="Permalink to &quot;复习所学内容&quot;">​</a></h2><p>任何人都能看完教程在教程中，但要记住所学的知识，就需要实际付出努力了。我的职责是确保你能从这些教程中收获尽可能多的知识，完成后面的练习题，可以帮助你检验自己的学习成果。</p><h2 id="挑战" tabindex="-1">挑战 <a class="header-anchor" href="#挑战" aria-label="Permalink to &quot;挑战&quot;">​</a></h2><p>学习编程最好的方法之一就是尽可能多地自己写代码，所以这里有三种三种扩展这个应用的方式，帮助你确保完全理解其中的原理。</p><ol><li>在<code>MissionView</code>中添加发射日期，放在任务徽章下方。考虑到可用空间更大，你可以选择不同的格式来显示日期，具体方式由你决定。</li><li>将一到两段视图代码提取到新的SwiftUI视图中——<code>MissionView</code>中的水平滚动视图就是一个很好的选择，如果你遵循了我的样式设计，也可以将<code>Rectangle</code>分隔线提取出来。</li><li>作为一个有难度的挑战，在<code>ContentView</code>中添加一个工具栏项，用于切换任务的显示方式（网格视图或列表视图）。</li></ol><p><strong>提示</strong>：对于最后一个挑战，最佳做法是将所有网格代码和列表代码分别做成两个独立的视图，然后在<code>ContentView</code>中用<code>if</code>条件语句来切换它们。你不能直接给<code>if</code>条件语句添加SwiftUI修饰符，但可以将该条件语句包裹在<code>Group</code>中，然后给<code>Group</code>添加修饰符，示例如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showingGrid {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        GridLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">astronauts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: astronauts, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">missions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: missions)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ListLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">astronauts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: astronauts, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">missions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: missions)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">navigationTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Group&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在为列表设置样式时，你可能会遇到一些困难，因为在iOS系统中，列表默认有特定的外观和风格。可以尝试给列表添加<code>.listStyle(.plain)</code>修饰符，然后给列表行的内容添加类似<code>.listRowBackground(Color.darkBackground)</code>的修饰符——这应该能帮你在实现目标的道路上走得更远。</p><h2 id="【练习题】月球探索" tabindex="-1">【练习题】月球探索 <a class="header-anchor" href="#【练习题】月球探索" aria-label="Permalink to &quot;【练习题】月球探索&quot;">​</a></h2><p>问题1/12：以下哪些陈述是正确的？</p><ul><li>选项1：<code>containerRelativeFrame()</code>允许我们读取视图容器的尺寸。</li><li>选项2：在尝试拉伸图像视图的内容之前，我们应该使用<code>aspectRatio(contentMode: .resize)</code>。</li></ul><p>问题2/12：以下哪些陈述是正确的？</p><ul><li>选项1：如果我们指定了图像的宽度，就必须同时指定它的高度。</li><li>选项2：<code>LazyVGrid</code>和<code>LazyHGrid</code>可以放在<code>ScrollView</code>内部。</li></ul><p>问题3/12：以下哪些陈述是正确的？</p><ul><li>选项1：只要我们的Swift代码与源数据匹配，Codable就能处理“结构体嵌套结构体”的情况。</li><li>选项2：一个结构体只能遵循一个协议，不能同时遵循两个协议。</li></ul><p>问题4/12：以下哪些陈述是正确的？</p><ul><li>选项1：给视图添加<code>clipped()</code>修饰符，可以确保视图始终在其框架内显示。</li><li>选项2：滚动视图（ScrollView）可以是水平的或垂直的，但不能同时是水平和垂直的。</li></ul><p>问题5/12：以下哪些陈述是正确的？</p><ul><li>选项1：自适应网格项（Adaptive grid items）允许SwiftUI根据可用空间创建尽可能多的列。</li><li>选项2：SwiftUI视图预览（previews）不应有自己的局部变量。</li></ul><p>问题6/12：以下哪些陈述是正确的？</p><ul><li>选项1：在使用泛型时，<code>T</code>代表“转换”（Transform）。</li><li>选项2：在滚动视图内部使用延迟垂直栈（Lazy vertical stacks）可以减少运算量。</li></ul><p>问题7/12：以下哪些陈述是正确的？</p><ul><li>选项1：<code>NavigationLink</code>需要<code>NavigationStack</code>才能工作。</li><li>选项2：我们可以通过使用<code>frame(maxWidth: .fill)</code>让滚动视图占据所有可用的屏幕宽度。</li></ul><p>问题8/12：以下哪些陈述是正确的？</p><ul><li>选项1：你可以随意从维基百科获取文本，因为它属于公有领域。</li><li>选项2：<code>scaledToFill()</code>修饰符可能会导致图像的部分内容超出其容器框架。</li></ul><p>问题9/12：以下哪些陈述是正确的？</p><ul><li>选项1：<code>NavigationStack</code>允许我们推入一个新的自定义视图，也可以推入<code>Text</code>这类基础类型的视图。</li><li>选项2：<code>sheet()</code>需要<code>NavigationStack</code>才能工作。</li></ul><p>问题10/12：以下哪些陈述是正确的？</p><ul><li>选项1：泛型允许我们编写可用于多种不同类型的代码。</li><li>选项2：设置<code>JSONDecoder</code>的<code>dateStyle</code>属性，可以自定义日期的加载方式。</li></ul><p>问题11/12：以下哪些陈述是正确的？</p><ul><li>选项1：尖括号是[和]。</li><li>选项2：嵌套结构体（nested struct）指的是放在另一个结构体内部的结构体。</li></ul><p>问题12/12：以下哪些陈述是正确的？</p><ul><li>选项1：如果Codable遇到可选属性，只有当该属性在源数据中存在时，它才会尝试对其进行解档。</li><li>选项2：你可以嵌套结构体，但不能嵌套类。</li></ul>`,45)]))}const u=s(n,[["render",t]]);export{k as __pageData,u as default};
