import{_ as s,c as i,o as a,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"使用 UIViewControllerRepresentable 封装视图控制器","description":"","frontmatter":{},"headers":[],"relativePath":"core/12.2_使用 UIViewControllerRepresentable 封装视图控制器.md","filePath":"core/12.2_使用 UIViewControllerRepresentable 封装视图控制器.md"}'),t={name:"core/12.2_使用 UIViewControllerRepresentable 封装视图控制器.md"};function l(r,e,p,o,h,k){return a(),i("div",null,e[0]||(e[0]=[n(`<h1 id="使用-uiviewcontrollerrepresentable-封装视图控制器" tabindex="-1">使用 UIViewControllerRepresentable 封装视图控制器 <a class="header-anchor" href="#使用-uiviewcontrollerrepresentable-封装视图控制器" aria-label="Permalink to &quot;使用 UIViewControllerRepresentable 封装视图控制器&quot;">​</a></h1><h2 id="封装-uikit-视图控制器" tabindex="-1">封装 UIKit 视图控制器 <a class="header-anchor" href="#封装-uikit-视图控制器" aria-label="Permalink to &quot;封装 UIKit 视图控制器&quot;">​</a></h2><p>将 UIKit 视图控制器集成到 SwiftUI 中，是实现复杂 UI 布局和功能的重要途径。这让你能够充分利用 UIKit 丰富的生态系统，同时享受 SwiftUI 声明式语法的便利。通过 <code>UIViewControllerRepresentable</code> 协议，你可以轻松地将现有的 <code>UIViewController</code> 包装起来。</p><p>这个协议要求你实现两个核心方法。首先是 <code>makeUIViewController(context:)</code>，它负责创建并返回你的 UIKit 视图控制器实例。其次是 <code>updateUIViewController(_:context:)</code>，当 SwiftUI 视图状态发生变化时，它会更新你的 UIKit 视图控制器。</p><h2 id="实现-uiviewcontrollerrepresentable" tabindex="-1">实现 UIViewControllerRepresentable <a class="header-anchor" href="#实现-uiviewcontrollerrepresentable" aria-label="Permalink to &quot;实现 UIViewControllerRepresentable&quot;">​</a></h2><p>要开始封装，你需要创建一个遵循 <code>UIViewControllerRepresentable</code> 协议的结构体。例如，你可以封装一个 <code>UINavigationController</code> 或一个自定义的 <code>UIViewController</code>。这为你的 SwiftUI 应用程序带来了无限的可能性。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyViewControllerWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewControllerRepresentable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIViewControllerType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCustomViewController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCustomViewController {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在这里创建并配置你的 UIKit 视图控制器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyCustomViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiViewController: MyCustomViewController, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在这里根据 SwiftUI 状态更新你的 UIKit 视图控制器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>你可以在 <code>makeUIViewController</code> 方法中进行所有必要的初始化设置。例如，设置代理、添加子视图或配置数据源。这确保了你的 UIKit 视图控制器在 SwiftUI 环境中能够正确地运行。</p><h2 id="传递数据与交互" tabindex="-1">传递数据与交互 <a class="header-anchor" href="#传递数据与交互" aria-label="Permalink to &quot;传递数据与交互&quot;">​</a></h2><p><code>UIViewControllerRepresentable</code> 的强大之处在于它能够实现 SwiftUI 和 UIKit 之间的双向数据流。你可以通过结构体的属性将数据从 SwiftUI 传递给 UIKit 视图控制器。例如，你可以传递一个字符串或一个模型对象。</p><ul><li><strong>从 SwiftUI 到 UIKit</strong>: 在 <code>updateUIViewController</code> 方法中，你可以访问 SwiftUI 视图的状态，并将其同步到 UIKit 视图控制器。这使得 UIKit 视图能够响应 SwiftUI 的数据变化。</li><li><strong>从 UIKit 到 SwiftUI</strong>: 你可以使用 <code>Coordinator</code> 来处理 UIKit 视图控制器中的事件，并将其回调给 SwiftUI。这将在后续章节中详细讨论，但它为你提供了强大的交互能力。</li></ul><p>例如，你可以让一个 UIKit 的 <code>UITextField</code> 在文本改变时通知 SwiftUI。这使得你的应用程序能够无缝地集成两种框架的优势。</p><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>UIViewControllerRepresentable</code> 在许多场景下都非常有用。</p><ol><li><strong>集成现有 UIKit 库</strong>: 如果你的项目已经使用了大量的 UIKit 库，你可以通过封装它们来逐步迁移到 SwiftUI。这大大降低了迁移的成本。</li><li><strong>复杂视图控制器</strong>: 对于那些 SwiftUI 暂时无法直接实现的复杂视图控制器，例如自定义的相机界面或地图视图，封装是最佳选择。</li><li><strong>性能优化</strong>: 在某些性能敏感的场景下，UIKit 视图控制器可能提供更好的性能表现。例如，处理大量数据的表格视图。</li></ol><p>通过这种方式，你能够充分利用 UIKit 的成熟生态系统，同时享受 SwiftUI 带来的开发效率提升。这无疑是 SwiftUI 高手之路上的一个重要里程碑！🚀 你会发现这极大地扩展了你的开发能力。</p>`,16)]))}const I=s(t,[["render",l]]);export{c as __pageData,I as default};
