import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const b=JSON.parse('{"title":"使用 @ObservedObject 订阅外部对象","description":"","frontmatter":{},"headers":[],"relativePath":"core/4.2_使用 @ObservedObject 订阅外部对象.md","filePath":"core/4.2_使用 @ObservedObject 订阅外部对象.md"}'),t={name:"core/4.2_使用 @ObservedObject 订阅外部对象.md"};function l(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用-observedobject-订阅外部对象" tabindex="-1">使用 @ObservedObject 订阅外部对象 <a class="header-anchor" href="#使用-observedobject-订阅外部对象" aria-label="Permalink to &quot;使用 @ObservedObject 订阅外部对象&quot;">​</a></h1><h2 id="掌握-observedobject-的奥秘" tabindex="-1">掌握 @ObservedObject 的奥秘 <a class="header-anchor" href="#掌握-observedobject-的奥秘" aria-label="Permalink to &quot;掌握 @ObservedObject 的奥秘&quot;">​</a></h2><p>使用 <code>@ObservedObject</code> 是 SwiftUI 中管理外部引用类型数据流的关键。它允许视图响应外部对象的变化，从而实现动态的用户界面。当你有一个在视图外部定义的对象，并且希望视图能够观察到这个对象属性的变化时，<code>@ObservedObject</code> 就派上用场了。 🚀</p><p>这个属性包装器特别适合那些生命周期独立于视图的对象。例如，一个网络请求管理器或者一个复杂的业务逻辑模型。</p><h2 id="构建可观察对象" tabindex="-1">构建可观察对象 <a class="header-anchor" href="#构建可观察对象" aria-label="Permalink to &quot;构建可观察对象&quot;">​</a></h2><p>要让一个对象能够被 <code>@ObservedObject</code> 观察，它必须遵循 <code>ObservableObject</code> 协议。此外，你还需要使用 <code>@Published</code> 属性包装器来标记那些你希望视图能够响应其变化属性。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>UserSettings</code> 是一个可观察对象。当 <code>username</code> 或 <code>score</code> 属性发生变化时，任何订阅了 <code>UserSettings</code> 实例的视图都会自动更新。这真是太棒了！✨</p><h2 id="在视图中使用-observedobject" tabindex="-1">在视图中使用 @ObservedObject <a class="header-anchor" href="#在视图中使用-observedobject" aria-label="Permalink to &quot;在视图中使用 @ObservedObject&quot;">​</a></h2><p>在你的 SwiftUI 视图中，你可以像这样声明一个 <code>@ObservedObject</code> 属性：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserProfileView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ObservedObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> settings: UserSettings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户名: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;分数: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(settings.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">score</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;增加分数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                settings.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>当你创建 <code>UserProfileView</code> 的实例时，你需要传入一个 <code>UserSettings</code> 的实例。</p><ul><li><strong>重要提示</strong>: 确保你传入的是同一个实例，否则视图将无法正确观察到变化。</li></ul><h2 id="observedobject-的生命周期管理" tabindex="-1">@ObservedObject 的生命周期管理 <a class="header-anchor" href="#observedobject-的生命周期管理" aria-label="Permalink to &quot;@ObservedObject 的生命周期管理&quot;">​</a></h2><p><code>@ObservedObject</code> 不会拥有它所包装的对象。这意味着对象的生命周期是由外部管理的。</p><ul><li>如果外部对象被销毁，<code>@ObservedObject</code> 也会停止观察。</li><li>这与 <code>@StateObject</code> 不同，<code>@StateObject</code> 会拥有并管理其包装对象的生命周期。</li></ul><p>例如，你可以在父视图中创建 <code>UserSettings</code> 实例，然后将其传递给子视图：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @StateObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appSettings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 @StateObject 拥有它</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        UserProfileView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: appSettings)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>通过这种方式，<code>appSettings</code> 的生命周期由 <code>ContentView</code> 管理，而 <code>UserProfileView</code> 则通过 <code>@ObservedObject</code> 订阅它的变化。这种模式在大型应用中非常常见，因为它提供了清晰的数据流和所有权管理。你已经掌握了数据共享的关键一步！🎉</p>`,19)]))}const o=i(t,[["render",l]]);export{b as __pageData,o as default};
