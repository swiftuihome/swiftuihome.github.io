import{_ as a,c as e,o as s,ag as p}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"11.3_viewWillAppear与viewDidAppear","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/11.3_viewWillAppear与viewDidAppear.md","filePath":"swift/uikit/basics/11.3_viewWillAppear与viewDidAppear.md"}'),l={name:"swift/uikit/basics/11.3_viewWillAppear与viewDidAppear.md"};function n(r,i,t,d,h,o){return s(),e("div",null,i[0]||(i[0]=[p(`<h1 id="_11-3-viewwillappear与viewdidappear" tabindex="-1">11.3_viewWillAppear与viewDidAppear <a class="header-anchor" href="#_11-3-viewwillappear与viewdidappear" aria-label="Permalink to &quot;11.3_viewWillAppear与viewDidAppear&quot;">​</a></h1><h2 id="视图即将显示-viewwillappear" tabindex="-1">视图即将显示：viewWillAppear <a class="header-anchor" href="#视图即将显示-viewwillappear" aria-label="Permalink to &quot;视图即将显示：viewWillAppear&quot;">​</a></h2><p>当你的视图控制器的视图即将显示在屏幕上时，<code>viewWillAppear(_ animated: Bool)</code> 方法会被调用。这是一个绝佳的时机，让你在视图真正可见之前进行一些准备工作。你可以用它来更新视图的状态，启动动画，或者开始监听某些事件。 想象一下，你正在准备一场精彩的演出，<code>viewWillAppear</code> 就像是幕布即将拉开前的最后检查，确保一切都完美无缺！ 🤩</p><ul><li><strong>动画启动:</strong> 启动一些动画效果，让视图的出现更加生动。</li><li><strong>数据刷新:</strong> 重新加载数据，确保显示最新的信息。</li><li><strong>状态更新:</strong> 根据需要更新视图的状态，例如启用或禁用某些按钮。</li></ul><h2 id="视图已经显示-viewdidappear" tabindex="-1">视图已经显示：viewDidAppear <a class="header-anchor" href="#视图已经显示-viewdidappear" aria-label="Permalink to &quot;视图已经显示：viewDidAppear&quot;">​</a></h2><p><code>viewDidAppear(_ animated: Bool)</code> 方法在视图控制器的视图已经完全显示在屏幕上之后被调用。这意味着用户已经可以看到并与你的视图进行交互了。这是一个适合启动一些需要视图完全加载后才能执行的操作的时机。你可以用它来开始网络请求，或者启动一些复杂的动画。 🥳</p><ul><li><strong>网络请求:</strong> 发起网络请求，获取需要显示的数据。</li><li><strong>复杂动画:</strong> 启动一些需要视图完全加载后才能执行的复杂动画。</li><li><strong>用户追踪:</strong> 开始追踪用户的行为，例如记录用户在视图上停留的时间。</li></ul><h2 id="何时使用-viewwillappear-和-viewdidappear" tabindex="-1">何时使用 viewWillAppear 和 viewDidAppear？ <a class="header-anchor" href="#何时使用-viewwillappear-和-viewdidappear" aria-label="Permalink to &quot;何时使用 viewWillAppear 和 viewDidAppear？&quot;">​</a></h2><p>选择使用 <code>viewWillAppear</code> 还是 <code>viewDidAppear</code> 取决于你的具体需求。一般来说，如果你的操作需要在视图显示之前完成，那么就使用 <code>viewWillAppear</code>。如果你的操作需要在视图完全显示之后才能执行，那么就使用 <code>viewDidAppear</code>。</p><p>例如，如果你想在视图显示之前更新一个标签的文本，那么你可以在 <code>viewWillAppear</code> 中进行更新。但是，如果你想在视图完全显示之后启动一个动画，那么你需要在 <code>viewDidAppear</code> 中启动动画。</p><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><p>让我们看一个简单的例子，演示如何在 <code>viewWillAppear</code> 和 <code>viewDidAppear</code> 中使用 <code>print</code> 语句来观察它们的调用时机。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewWillAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animated: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewWillAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animated)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewWillAppear 被调用了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animated: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidAppear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animated)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewDidAppear 被调用了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当你运行这段代码并导航到包含这个视图控制器的界面时，你会在控制台中看到 &quot;viewWillAppear 被调用了！&quot; 和 &quot;viewDidAppear 被调用了！&quot; 这两条消息。通过观察这两条消息的出现顺序，你可以更好地理解这两个方法的调用时机。 🤓</p><h2 id="深入理解" tabindex="-1">深入理解 <a class="header-anchor" href="#深入理解" aria-label="Permalink to &quot;深入理解&quot;">​</a></h2><p><code>viewWillAppear</code> 和 <code>viewDidAppear</code> 是视图控制器生命周期中非常重要的两个方法。理解它们的调用时机和用途，可以帮助你更好地控制视图的行为，并创建更加流畅和响应迅速的用户界面。记住，<code>viewWillAppear</code> 是在视图即将显示之前调用，而 <code>viewDidAppear</code> 是在视图已经完全显示之后调用。 🚀</p><ul><li><code>viewWillAppear</code> 适合进行一些准备工作，例如更新视图的状态或启动简单的动画。</li><li><code>viewDidAppear</code> 适合启动一些需要视图完全加载后才能执行的操作，例如发起网络请求或启动复杂的动画。</li></ul><p>希望这些解释能够帮助你更好地理解 <code>viewWillAppear</code> 和 <code>viewDidAppear</code> 的用途！ 祝你编程愉快！ 🎉</p>`,18)]))}const w=a(l,[["render",n]]);export{c as __pageData,w as default};
