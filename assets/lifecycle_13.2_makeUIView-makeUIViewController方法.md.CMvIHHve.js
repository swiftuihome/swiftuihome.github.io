import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"探索 makeUIView/makeUIViewController 方法 🚀","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/13.2_makeUIView-makeUIViewController方法.md","filePath":"lifecycle/13.2_makeUIView-makeUIViewController方法.md"}'),l={name:"lifecycle/13.2_makeUIView-makeUIViewController方法.md"};function t(p,s,k,h,r,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="探索-makeuiview-makeuiviewcontroller-方法-🚀" tabindex="-1">探索 <code>makeUIView/makeUIViewController</code> 方法 🚀 <a class="header-anchor" href="#探索-makeuiview-makeuiviewcontroller-方法-🚀" aria-label="Permalink to &quot;探索 \`makeUIView/makeUIViewController\` 方法 🚀&quot;">​</a></h1><blockquote><p>在 SwiftUI 与 UIKit/AppKit 集成时，<code>makeUIView(context:)</code> 和 <code>makeUIViewController(context:)</code> 方法扮演着至关重要的角色。它们是 <code>UIViewRepresentable</code> 和 <code>UIViewControllerRepresentable</code> 协议的核心，负责创建底层的 UIKit 视图或视图控制器。让我们一起深入了解这两个方法！</p></blockquote><h2 id="makeuiview-和-makeuiviewcontroller-的作用-🛠️" tabindex="-1"><code>makeUIView</code> 和 <code>makeUIViewController</code> 的作用 🛠️ <a class="header-anchor" href="#makeuiview-和-makeuiviewcontroller-的作用-🛠️" aria-label="Permalink to &quot;\`makeUIView\` 和 \`makeUIViewController\` 的作用 🛠️&quot;">​</a></h2><p>这两个方法的主要职责是创建并返回一个 UIKit 视图或视图控制器实例。你可以把它们看作是 SwiftUI 与 UIKit 之间的桥梁。当你需要在 SwiftUI 中使用 UIKit 组件时，这两个方法就是你的入口点。它们只会被调用一次，用于初始化 UIKit 视图或视图控制器。</p><ul><li><code>makeUIView(context:)</code>：用于创建 <code>UIView</code> 实例。</li><li><code>makeUIViewController(context:)</code>：用于创建 <code>UIViewController</code> 实例。</li></ul><h2 id="context-参数的奥秘-🔑" tabindex="-1"><code>Context</code> 参数的奥秘 🔑 <a class="header-anchor" href="#context-参数的奥秘-🔑" aria-label="Permalink to &quot;\`Context\` 参数的奥秘 🔑&quot;">​</a></h2><p><code>makeUIView(context:)</code> 和 <code>makeUIViewController(context:)</code> 方法都接收一个 <code>context</code> 参数，它是一个 <code>Context</code> 类型的结构体。这个 <code>context</code> 提供了访问 SwiftUI 环境信息的途径，例如：</p><ol><li><code>coordinator</code>：一个用于处理 UIKit 视图或视图控制器事件的协调器对象。</li><li><code>environment</code>：一个包含 SwiftUI 环境值的属性包装器。</li><li><code>transaction</code>：一个描述视图更新事务的结构体。</li></ol><p>通过 <code>context</code>，你可以将 SwiftUI 的状态传递给 UIKit 视图或视图控制器，并处理来自 UIKit 的事件。</p><h2 id="使用示例-💡" tabindex="-1">使用示例 💡 <a class="header-anchor" href="#使用示例-💡" aria-label="Permalink to &quot;使用示例 💡&quot;">​</a></h2><p>假设你想要在 SwiftUI 中使用一个 <code>UILabel</code>。你可以创建一个 <code>UIViewRepresentable</code> 结构体，并在 <code>makeUIView(context:)</code> 方法中创建并配置 <code>UILabel</code> 实例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewRepresentable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UILabel {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        label.textColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .red</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiView: UILabel, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uiView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>然后，你就可以在 SwiftUI 视图中使用 <code>MyLabel</code> 了：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        MyLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, UIKit!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>是不是很简单呢？🎉 通过 <code>makeUIView/makeUIViewController</code> 方法，你可以轻松地将 UIKit 组件集成到 SwiftUI 应用中，让你的应用更加强大和灵活！💪</p>`,15)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
