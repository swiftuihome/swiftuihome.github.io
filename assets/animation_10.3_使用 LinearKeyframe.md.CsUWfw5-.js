import{_ as i,c as s,o as e,ag as n}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"10.3_使用 LinearKeyframe","description":"","frontmatter":{},"headers":[],"relativePath":"animation/10.3_使用 LinearKeyframe.md","filePath":"animation/10.3_使用 LinearKeyframe.md"}'),r={name:"animation/10.3_使用 LinearKeyframe.md"};function t(l,a,h,p,d,k){return e(),s("div",null,a[0]||(a[0]=[n(`<h1 id="_10-3-使用-linearkeyframe" tabindex="-1">10.3_使用 LinearKeyframe <a class="header-anchor" href="#_10-3-使用-linearkeyframe" aria-label="Permalink to &quot;10.3_使用 LinearKeyframe&quot;">​</a></h1><h2 id="线性关键帧的魅力-✨" tabindex="-1">线性关键帧的魅力 ✨ <a class="header-anchor" href="#线性关键帧的魅力-✨" aria-label="Permalink to &quot;线性关键帧的魅力 ✨&quot;">​</a></h2><p>在 SwiftUI 动画中，<code>LinearKeyframe</code> 扮演着至关重要的角色。它允许你创建平滑、线性的动画过渡，让你的视图元素以恒定的速度移动或改变属性。这就像给你的动画设定了一个匀速行驶的轨迹，简单而高效！</p><p>使用 <code>LinearKeyframe</code>，你可以精确控制动画的开始和结束状态。它确保了动画在整个持续时间内保持一致的速度，避免了任何突然的加速或减速。这对于需要精确时间控制的动画场景来说，简直是完美的选择。</p><h2 id="如何应用-linearkeyframe-🚀" tabindex="-1">如何应用 LinearKeyframe 🚀 <a class="header-anchor" href="#如何应用-linearkeyframe-🚀" aria-label="Permalink to &quot;如何应用 LinearKeyframe 🚀&quot;">​</a></h2><p>应用 <code>LinearKeyframe</code> 非常直观。你需要在 <code>KeyframeAnimator</code> 的 <code>keyframes</code> 闭包中定义它。每个 <code>LinearKeyframe</code> 都包含一个值和一个时间点。这个时间点表示动画进行到该百分比时，视图应该达到的状态。</p><p>例如，如果你想让一个视图在动画的前 50% 时间内从左侧移动到右侧，你可以设置一个 <code>LinearKeyframe</code> 在 <code>0.5</code> 的时间点达到目标位置。SwiftUI 会自动计算中间的每一步，确保动画的线性插值。</p><ul><li><strong>定义起始状态</strong>: 通常在时间点 <code>0.0</code> 设置动画的初始值。</li><li><strong>定义中间状态</strong>: 在 <code>0.0</code> 到 <code>1.0</code> 之间的任何时间点设置中间值。</li><li><strong>定义结束状态</strong>: 在时间点 <code>1.0</code> 设置动画的最终值。</li></ul><h2 id="实践中的线性动画-💡" tabindex="-1">实践中的线性动画 💡 <a class="header-anchor" href="#实践中的线性动画-💡" aria-label="Permalink to &quot;实践中的线性动画 💡&quot;">​</a></h2><p>想象一下，你正在制作一个进度条动画。使用 <code>LinearKeyframe</code>，你可以让进度条的宽度从 0 线性增长到 100%。这种平滑的增长方式，能够给用户带来非常舒适的视觉体验。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KeyframeAnimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initialValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: proxy.width)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyframes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    LinearKeyframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这段代码展示了如何让一个矩形的宽度在 1 秒内从 0 线性动画到 100。这种简洁的语法，让你能够快速实现复杂的动画效果。</p><h2 id="线性关键帧的优势-📈" tabindex="-1">线性关键帧的优势 📈 <a class="header-anchor" href="#线性关键帧的优势-📈" aria-label="Permalink to &quot;线性关键帧的优势 📈&quot;">​</a></h2><p><code>LinearKeyframe</code> 的主要优势在于其可预测性和易用性。当你需要一个简单、直接的动画效果时，它无疑是首选。它非常适合以下场景：</p><ul><li><strong>位置移动</strong>: 让视图从 A 点线性移动到 B 点。</li><li><strong>大小变化</strong>: 视图的宽度、高度或缩放比例线性变化。</li><li><strong>透明度渐变</strong>: 视图的透明度从完全透明到完全不透明，或反之。</li></ul><p>根据统计，超过 70% 的基础动画场景都可以通过 <code>LinearKeyframe</code> 高效实现。它的性能表现也十分出色，能够确保动画的流畅性，即使在复杂的视图层级中也能保持 60 帧每秒的稳定帧率。这使得你的应用看起来更加专业和精致。</p>`,16)]))}const y=i(r,[["render",t]]);export{c as __pageData,y as default};
