import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"什么是JSON？","description":"","frontmatter":{},"headers":[],"relativePath":"swift/swifty_json/1.1_什么是JSON？.md","filePath":"swift/swifty_json/1.1_什么是JSON？.md"}'),p={name:"swift/swifty_json/1.1_什么是JSON？.md"};function t(e,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="什么是json" tabindex="-1">什么是JSON？ <a class="header-anchor" href="#什么是json" aria-label="Permalink to &quot;什么是JSON？&quot;">​</a></h1><blockquote><p>JSON（即<strong>JavaScript 对象表示法</strong>）是一种轻量级的数据交换格式，易于人类阅读和编写，也易于机器解析和生成。它基于 JavaScript 编程语言的一个子集，但具有语言无关性，这意味着它几乎可以与任何编程语言（包括 Swift）一起使用。JSON 常被用于在服务器和 Web 应用程序之间传输数据，作为 XML 的替代方案。</p></blockquote><h2 id="json-的结构" tabindex="-1">JSON 的结构 <a class="header-anchor" href="#json-的结构" aria-label="Permalink to &quot;JSON 的结构&quot;">​</a></h2><p>JSON 基于两种主要结构构建：</p><ol><li><p><strong>对象</strong>：对象是键值对的无序集合，用花括号 <code>{}</code> 括起来。每个键都是一个字符串，后跟冒号 <code>:</code>，然后是值。键值对之间用逗号 <code>,</code> 分隔。</p><p>示例：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;isStudent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>数组</strong>：数组是值的有序列表，用方括号 <code>[]</code> 括起来。数组中的值可以是任何类型，包括对象、数组、字符串、数字、布尔值或 <code>null</code>。值之间用逗号 <code>,</code> 分隔。</p><p>示例：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;banana&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;cherry&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h2 id="json-中的数据类型" tabindex="-1">JSON 中的数据类型 <a class="header-anchor" href="#json-中的数据类型" aria-label="Permalink to &quot;JSON 中的数据类型&quot;">​</a></h2><p>JSON 支持以下数据类型：</p><ul><li><strong>字符串</strong>：用双引号 <code>&quot;&quot;</code> 括起来。例如：<code>&quot;Hello, World!&quot;</code></li><li><strong>数字</strong>：可以是整数或浮点数。例如：<code>42</code> 或 <code>3.14</code></li><li><strong>布尔值</strong>：表示为 <code>true</code> 或 <code>false</code>。</li><li><strong>对象</strong>：用花括号 <code>{}</code> 括起来。例如：<code>{&quot;key&quot;: &quot;value&quot;}</code></li><li><strong>数组</strong>：用方括号 <code>[]</code> 括起来。例如：<code>[1, 2, 3]</code></li><li><strong>空值</strong>：表示为 <code>null</code>。</li></ul><h2 id="为什么-json-具有人类可读性" tabindex="-1">为什么 JSON 具有人类可读性 <a class="header-anchor" href="#为什么-json-具有人类可读性" aria-label="Permalink to &quot;为什么 JSON 具有人类可读性&quot;">​</a></h2><p>JSON 的主要优势之一是其可读性。与使用标签且可能变得冗长的 XML 不同，JSON 采用简单直观的语法。例如，考虑以下表示相同数据的 XML 和 JSON：</p><p><strong>XML：</strong></p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;John Doe&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;30&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">isStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;false&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">isStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>JSON：</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;isStudent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>JSON 版本更简洁，更易于阅读，因此成为许多开发人员的首选。</p><h2 id="swift-中的-json" tabindex="-1">Swift 中的 JSON <a class="header-anchor" href="#swift-中的-json" aria-label="Permalink to &quot;Swift 中的 JSON&quot;">​</a></h2><p>在 Swift 中，JSON 通常用于与 Web API 交互。当你向 API 发出请求时，响应通常以 JSON 格式返回。Swift 通过 <code>Codable</code> 协议提供了对 JSON 处理的原生支持，该协议允许你将 JSON 数据编码和解码为 Swift 对象。然而，处理原始 JSON 可能比较繁琐，这就是 <strong>SwiftyJSON</strong> 等库的用武之地。</p><h2 id="示例-在-swift-中解析-json" tabindex="-1">示例：在 Swift 中解析 JSON <a class="header-anchor" href="#示例-在-swift-中解析-json" aria-label="Permalink to &quot;示例：在 Swift 中解析 JSON&quot;">​</a></h2><p>以下是一个使用原生 <code>Codable</code> 协议在 Swift 中解析 JSON 的简单示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foundation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个符合 Codable 协议的 Swift 结构体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Codable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isStudent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 作为字符串的 JSON 数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;name&quot;: &quot;John Doe&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;age&quot;: 30,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;isStudent&quot;: false</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 JSON 字符串转换为 Data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonString.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将 JSON 数据解码为 Person 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSONDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: jsonData)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(person.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，年龄：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(person.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，是否为学生：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(person.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isStudent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;解码 JSON 失败：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>在这个示例中，我们定义了一个符合 <code>Codable</code> 协议的 <code>Person</code> 结构体。然后将 JSON 字符串转换为 <code>Data</code>，并使用 <code>JSONDecoder</code> 将其解码为 <code>Person</code> 对象。</p><h2 id="json-与-swiftyjson" tabindex="-1">JSON 与 SwiftyJSON <a class="header-anchor" href="#json-与-swiftyjson" aria-label="Permalink to &quot;JSON 与 SwiftyJSON&quot;">​</a></h2><p>虽然 Swift 的原生 JSON 处理功能强大，但在处理深度嵌套的 JSON 结构或可选值时，可能会比较冗长且容易出错。<strong>SwiftyJSON</strong> 通过提供更直观、更灵活的 API 来简化这一过程，方便处理 JSON 数据。</p><p>例如，考虑以下 JSON：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;street&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123 Main St&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Anytown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;phoneNumbers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;555-1234&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;555-5678&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>使用 SwiftyJSON，你可以轻松访问嵌套值，而无需担心可选值解包或类型转换：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftyJSON</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jsonString)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stringValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> city </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stringValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstPhoneNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;phoneNumbers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stringValue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(name)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，城市：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(city)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，第一个电话号码：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(firstPhoneNumber)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>SwiftyJSON 让你能够以更直接、更易读的方式访问 JSON 数据，减少了出错的可能性，并使代码更易于维护。</p><h2 id="json-语法规则" tabindex="-1">JSON 语法规则 <a class="header-anchor" href="#json-语法规则" aria-label="Permalink to &quot;JSON 语法规则&quot;">​</a></h2><p>为确保 JSON 数据格式正确，务必遵循以下语法规则：</p><ol><li><strong>键必须是字符串</strong>：JSON 对象中的键必须始终用双引号 <code>&quot;&quot;</code> 括起来。</li><li><strong>值必须是有效的 JSON 类型</strong>：值可以是字符串、数字、对象、数组、布尔值或 <code>null</code>。</li><li><strong>元素之间用逗号分隔</strong>：对象和数组中的元素必须用逗号 <code>,</code> 分隔。</li><li><strong>不允许 trailing 逗号</strong>：JSON 不允许在对象或数组的最后一个元素后使用 trailing 逗号。</li><li><strong>不支持注释</strong>：与 XML 等其他数据格式不同，JSON 不支持注释。</li></ol><h2 id="json-的常见用例" tabindex="-1">JSON 的常见用例 <a class="header-anchor" href="#json-的常见用例" aria-label="Permalink to &quot;JSON 的常见用例&quot;">​</a></h2><p>JSON 在现代应用程序中被广泛用于各种目的，包括：</p><ul><li><strong>API 通信</strong>：JSON 是 RESTful API 中客户端和服务器之间数据交换的事实标准。</li><li><strong>配置文件</strong>：许多应用程序使用 JSON 文件存储配置设置。</li><li><strong>数据存储</strong>：JSON 常被用于在 MongoDB 等 NoSQL 数据库中存储数据。</li><li><strong>序列化</strong>：JSON 用于将复杂数据结构序列化为易于传输或存储的格式。</li></ul><h2 id="json-与-xml" tabindex="-1">JSON 与 XML <a class="header-anchor" href="#json-与-xml" aria-label="Permalink to &quot;JSON 与 XML&quot;">​</a></h2><p>虽然 JSON 和 XML 都用于数据交换，但 JSON 相比 XML 有几个优势：</p><ul><li><strong>简洁性</strong>：JSON 语法更简单，更易于读写。</li><li><strong>轻量级</strong>：JSON 比 XML 更简洁，因此文件更小，解析速度更快。</li><li><strong>原生支持</strong>：JSON 得到 JavaScript 的原生支持，使其成为 Web 应用程序的自然选择。</li></ul><p>然而，XML 在某些场景中仍然有其用武之地，例如处理复杂的文档结构或需要模式验证时。</p><h2 id="现实世界中的-json" tabindex="-1">现实世界中的 JSON <a class="header-anchor" href="#现实世界中的-json" aria-label="Permalink to &quot;现实世界中的 JSON&quot;">​</a></h2><p>许多流行的 Web 服务和 API 都使用 JSON，包括：</p><ul><li><strong>Twitter API</strong>：以 JSON 格式返回推文和用户数据。</li><li><strong>GitHub API</strong>：以 JSON 格式提供存储库和用户信息。</li><li><strong>OpenWeatherMap API</strong>：以 JSON 格式提供天气数据。</li></ul><p>这些 API 展示了 JSON 在现代 Web 开发中的多功能性和广泛采用度。</p><h2 id="json-与性能" tabindex="-1">JSON 与性能 <a class="header-anchor" href="#json-与性能" aria-label="Permalink to &quot;JSON 与性能&quot;">​</a></h2><p>虽然 JSON 轻量且易于解析，但在处理大型 JSON 文件或高频 API 调用时，必须考虑性能问题。延迟加载、分页以及 SwiftyJSON 等高效解析库等技术有助于缓解性能问题。</p><h2 id="json-安全注意事项" tabindex="-1">JSON 安全注意事项 <a class="header-anchor" href="#json-安全注意事项" aria-label="Permalink to &quot;JSON 安全注意事项&quot;">​</a></h2><p>处理 JSON 时，必须注意潜在的安全风险，例如：</p><ul><li><strong>JSON 注入</strong>：恶意数据可能被注入 JSON 字符串，导致安全漏洞。</li><li><strong>数据验证</strong>：始终验证 JSON 数据，确保其符合预期的结构和类型。</li><li><strong>跨站脚本（XSS）</strong>：在 Web 应用程序中使用 JSON 数据时，应适当转义以防止 XSS 攻击。</li></ul><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>JSON 是一种强大且多功能的数据格式，在现代应用程序开发中起着至关重要的作用。其简洁性、可读性和广泛支持使其成为数据交换的理想选择。无论你是在处理 API、配置文件还是数据存储，了解 JSON 对任何开发人员来说都是必不可少的。在下一章中，我们将探讨为什么 JSON 在现代应用程序中被广泛使用，以及它与其他数据格式的比较。</p>`,49)]))}const g=i(p,[["render",t]]);export{E as __pageData,g as default};
