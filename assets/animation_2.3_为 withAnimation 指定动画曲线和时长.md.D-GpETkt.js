import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"2.3_为 withAnimation 指定动画曲线和时长","description":"","frontmatter":{},"headers":[],"relativePath":"animation/2.3_为 withAnimation 指定动画曲线和时长.md","filePath":"animation/2.3_为 withAnimation 指定动画曲线和时长.md"}'),t={name:"animation/2.3_为 withAnimation 指定动画曲线和时长.md"};function l(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_2-3-为-withanimation-指定动画曲线和时长" tabindex="-1">2.3_为 withAnimation 指定动画曲线和时长 <a class="header-anchor" href="#_2-3-为-withanimation-指定动画曲线和时长" aria-label="Permalink to &quot;2.3_为 withAnimation 指定动画曲线和时长&quot;">​</a></h1><p>当然！让我们一起探索如何在 SwiftUI 中为 <code>withAnimation</code> 指定动画曲线和时长，让你的动画更加生动有趣！🎉</p><h2 id="定制你的动画体验" tabindex="-1">定制你的动画体验 <a class="header-anchor" href="#定制你的动画体验" aria-label="Permalink to &quot;定制你的动画体验&quot;">​</a></h2><p><code>withAnimation</code> 代码块是 SwiftUI 中创建显式动画的关键。你可以通过它来控制动画的各个方面，包括动画的曲线和持续时间。这让你能够精确地调整动画效果，以满足你的设计需求。</p><ul><li><strong>动画曲线</strong>: 动画曲线决定了动画的速度变化。SwiftUI 提供了多种内置的动画曲线，例如 <code>.linear</code>（匀速）、<code>.easeIn</code>（加速）、<code>.easeOut</code>（减速）和 <code>.easeInOut</code>（先加速后减速）。你也可以使用 <code>.spring()</code> 创建弹簧动画。</li><li><strong>动画时长</strong>: 动画时长决定了动画的播放时间。你可以使用 <code>duration</code> 参数来指定动画的持续时间，单位为秒。</li></ul><h2 id="如何指定动画曲线和时长" tabindex="-1">如何指定动画曲线和时长 <a class="header-anchor" href="#如何指定动画曲线和时长" aria-label="Permalink to &quot;如何指定动画曲线和时长&quot;">​</a></h2><p>要为 <code>withAnimation</code> 指定动画曲线和时长，你可以使用以下方法：</p><ol><li><p><strong>使用 <code>Animation</code> 结构体</strong>: 你可以使用 <code>Animation</code> 结构体来创建一个自定义的动画配置，然后将其传递给 <code>withAnimation</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 你的动画代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这个例子中，我们使用了 <code>.easeInOut</code> 动画曲线，并将动画时长设置为 0.5 秒。</p></li><li><p><strong>使用 <code>animation</code> 修饰符</strong>: 你也可以使用 <code>animation</code> 修饰符来为视图添加动画效果。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dampingFraction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.825</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blendDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个例子展示了如何使用 <code>spring</code> 动画，并指定了 <code>response</code>（响应速度）、<code>dampingFraction</code>（阻尼系数）和 <code>blendDuration</code>（混合时长）等参数。</p></li></ol><h2 id="实例演示" tabindex="-1">实例演示 <a class="header-anchor" href="#实例演示" aria-label="Permalink to &quot;实例演示&quot;">​</a></h2><p>假设你想要创建一个按钮，当点击时，按钮的背景颜色会平滑地改变。你可以使用 <code>withAnimation</code> 来实现这个效果：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isToggled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Toggle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                isToggled.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isToggled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.red </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.white)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个例子中，当 <code>isToggled</code> 的值改变时，按钮的背景颜色会以 0.5 秒的 <code>easeInOut</code> 动画曲线进行过渡。是不是很简单呢？🥳</p><p>通过灵活运用动画曲线和时长，你可以创建出各种各样令人惊艳的动画效果，为你的 SwiftUI 应用增添更多活力！🚀</p>`,13)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
