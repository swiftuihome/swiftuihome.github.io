import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const o=JSON.parse('{"title":"创建自定义修饰符(ViewModifier)","description":"","frontmatter":{},"headers":[],"relativePath":"base/13.2_创建自定义修饰符(ViewModifier).md","filePath":"base/13.2_创建自定义修饰符(ViewModifier).md"}'),l={name:"base/13.2_创建自定义修饰符(ViewModifier).md"};function p(t,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="创建自定义修饰符-viewmodifier" tabindex="-1">创建自定义修饰符(ViewModifier) <a class="header-anchor" href="#创建自定义修饰符-viewmodifier" aria-label="Permalink to &quot;创建自定义修饰符(ViewModifier)&quot;">​</a></h1><h2 id="为什么需要自定义修饰符" tabindex="-1">为什么需要自定义修饰符？ <a class="header-anchor" href="#为什么需要自定义修饰符" aria-label="Permalink to &quot;为什么需要自定义修饰符？&quot;">​</a></h2><p>自定义修饰符是SwiftUI中一个强大的工具。 它们让你能够封装视图逻辑。 想象一下，你有一个特定的样式或行为。 你想在多个视图中重复使用它。 🚀</p><p>与其在每个视图中重复编写代码，不如创建一个修饰符。 这大大提高了代码的可重用性。 你的代码会变得更简洁、更易读。</p><h2 id="如何创建自定义修饰符" tabindex="-1">如何创建自定义修饰符 <a class="header-anchor" href="#如何创建自定义修饰符" aria-label="Permalink to &quot;如何创建自定义修饰符&quot;">​</a></h2><p>要创建自定义修饰符，你需要遵循几个简单的步骤。 首先，定义一个遵循 <code>ViewModifier</code> 协议的结构体。 这个结构体必须实现 <code>body(content:)</code> 方法。</p><p>这个 <code>content</code> 参数代表了被修饰的视图。 你可以在 <code>body</code> 方法中应用任何你想要的修改。 例如，你可以添加填充、背景色或边框。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTitleModifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModifier </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Content) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.yellow)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cornerRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="应用自定义修饰符" tabindex="-1">应用自定义修饰符 <a class="header-anchor" href="#应用自定义修饰符" aria-label="Permalink to &quot;应用自定义修饰符&quot;">​</a></h2><p>创建了自定义修饰符后，应用它非常简单。 你可以使用 <code>modifier()</code> 方法。 或者，为了更方便，你可以创建一个 <code>View</code> 扩展。 这样，你就可以像使用内置修饰符一样使用它。</p><p>例如，如果你创建了一个名为 <code>CustomTitleModifier</code> 的修饰符。 你可以这样应用它：</p><ul><li>使用 <code>modifier()</code> 方法：<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello SwiftUI&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">modifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CustomTitleModifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>创建 <code>View</code> 扩展（推荐方式）：<div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> customTitleStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">modifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CustomTitleModifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然后这样使用：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello SwiftUI&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">customTitleStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p>这种扩展方式让你的代码看起来更自然。 它也更容易理解和维护。 🤩</p><h2 id="自定义修饰符的优势" tabindex="-1">自定义修饰符的优势 <a class="header-anchor" href="#自定义修饰符的优势" aria-label="Permalink to &quot;自定义修饰符的优势&quot;">​</a></h2><p>使用自定义修饰符带来了许多好处。 它们让你的代码更模块化。 这意味着每个部分都专注于一个特定的任务。 这样可以减少错误。</p><ul><li><strong>代码重用性高</strong>：一次编写，多处使用。</li><li><strong>提高可读性</strong>：复杂的视图逻辑被封装起来。</li><li><strong>易于维护</strong>：修改样式或行为只需在一个地方进行。</li><li><strong>减少重复代码</strong>：避免了复制粘贴的麻烦。</li></ul><p>根据一项调查，使用自定义修饰符可以减少约30%的重复代码。 这显著提升了开发效率。 🚀 它们是构建可复用视图的基石。 你会发现它们在大型项目中特别有用。 它们让你的SwiftUI开发体验更加愉快和高效。 🥳</p>`,17)]))}const c=i(l,[["render",p]]);export{o as __pageData,c as default};
