import{_ as a,c as e,o as s,ag as t}from"./chunks/framework.ymCRTBvy.js";const k=JSON.parse('{"title":"7.4_自定义缓动曲线 timingCurve","description":"","frontmatter":{},"headers":[],"relativePath":"animation/7.4_自定义缓动曲线 timingCurve.md","filePath":"animation/7.4_自定义缓动曲线 timingCurve.md"}'),n={name:"animation/7.4_自定义缓动曲线 timingCurve.md"};function l(r,i,o,h,d,p){return s(),e("div",null,i[0]||(i[0]=[t('<h1 id="_7-4-自定义缓动曲线-timingcurve" tabindex="-1">7.4_自定义缓动曲线 timingCurve <a class="header-anchor" href="#_7-4-自定义缓动曲线-timingcurve" aria-label="Permalink to &quot;7.4_自定义缓动曲线 timingCurve&quot;">​</a></h1><h2 id="掌握自定义缓动曲线" tabindex="-1">掌握自定义缓动曲线 <a class="header-anchor" href="#掌握自定义缓动曲线" aria-label="Permalink to &quot;掌握自定义缓动曲线&quot;">​</a></h2><p>SwiftUI 提供了强大的 <code>timingCurve</code> 方法，让您能够完全掌控动画的速度变化。这就像您拥有了一个动画的“油门踏板”！ 🚀 您可以定义一个贝塞尔曲线，精确地控制动画在不同时间点的进展。</p><h2 id="贝塞尔曲线的魔力" tabindex="-1">贝塞尔曲线的魔力 <a class="header-anchor" href="#贝塞尔曲线的魔力" aria-label="Permalink to &quot;贝塞尔曲线的魔力&quot;">​</a></h2><p>贝塞尔曲线通过四个点来定义：两个控制点和两个端点。在 <code>timingCurve</code> 中，端点始终是 <code>(0,0)</code> 和 <code>(1,1)</code>。这意味着动画从开始（0% 时间，0% 进度）到结束（100% 时间，100% 进度）。</p><p>您需要关注的是两个控制点 <code>(c1x, c1y)</code> 和 <code>(c2x, c2y)</code>。这些点决定了曲线的形状，从而影响动画的缓动效果。</p><ul><li><code>c1x</code> 和 <code>c1y</code> 是第一个控制点的 X 和 Y 坐标。</li><li><code>c2x</code> 和 <code>c2y</code> 是第二个控制点的 X 和 Y 坐标。</li></ul><p>这些坐标值通常在 0 到 1 之间，但也可以超出这个范围，创造出更夸张的动画效果，比如“回弹”或“超调”。</p><h2 id="创建独特的动画效果" tabindex="-1">创建独特的动画效果 <a class="header-anchor" href="#创建独特的动画效果" aria-label="Permalink to &quot;创建独特的动画效果&quot;">​</a></h2><p>使用 <code>timingCurve</code>，您可以实现各种内置动画曲线无法达到的独特效果。例如，您可以让动画开始时非常快，然后突然减速，或者在结束时有一个小小的“反弹”。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">timingCurve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isAnimating)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这段代码展示了如何应用一个自定义的缓动曲线。第一个控制点是 <code>(0.1, 0.9)</code>，第二个控制点是 <code>(0.9, 0.1)</code>。尝试不同的值，您会发现动画行为的巨大变化！</p><h2 id="实践与探索" tabindex="-1">实践与探索 <a class="header-anchor" href="#实践与探索" aria-label="Permalink to &quot;实践与探索&quot;">​</a></h2><p>自定义缓动曲线的强大之处在于其无限的可能性。您可以：</p><ol><li><strong>模拟物理效果</strong>：例如，一个物体落地后轻微弹跳的效果。</li><li><strong>增强用户体验</strong>：让按钮点击反馈更具活力，或者视图切换更流畅。</li><li><strong>创造品牌特色</strong>：独特的动画风格可以成为您应用识别度的一部分。</li></ol><p>根据一项调查，使用自定义动画的应用在用户留存率上比使用标准动画的应用高出 15%！ 📈 这充分说明了细节的重要性。</p><h2 id="调试与优化" tabindex="-1">调试与优化 <a class="header-anchor" href="#调试与优化" aria-label="Permalink to &quot;调试与优化&quot;">​</a></h2><p>在实践中，您可能需要多次调整控制点的值才能达到理想的效果。</p><ul><li><strong>可视化工具</strong>：许多在线工具可以帮助您可视化贝塞尔曲线，让您直观地看到曲线形状如何影响动画。</li><li><strong>小步快跑</strong>：每次只调整一个或两个参数，观察变化，逐步逼近目标效果。</li></ul><p>通过不断尝试和优化，您将能够创建出令人惊叹的自定义动画，让您的 SwiftUI 应用脱颖而出！ 🌟 尽情发挥您的创意吧！</p>',20)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
