import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"使用CAShapeLayer创建复杂形状图层","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/11.2_使用CAShapeLayer创建复杂形状图层.md","filePath":"swift/uikit/advanced/11.2_使用CAShapeLayer创建复杂形状图层.md"}'),h={name:"swift/uikit/advanced/11.2_使用CAShapeLayer创建复杂形状图层.md"};function l(t,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用cashapelayer创建复杂形状图层" tabindex="-1">使用CAShapeLayer创建复杂形状图层 <a class="header-anchor" href="#使用cashapelayer创建复杂形状图层" aria-label="Permalink to &quot;使用CAShapeLayer创建复杂形状图层&quot;">​</a></h1><h2 id="cashapelayer简介与优势" tabindex="-1">CAShapeLayer简介与优势 <a class="header-anchor" href="#cashapelayer简介与优势" aria-label="Permalink to &quot;CAShapeLayer简介与优势&quot;">​</a></h2><p><code>CAShapeLayer</code> 是 <code>CALayer</code> 的一个子类，它能够让你使用 <code>Core Graphics</code> 路径来绘制各种复杂的形状。与直接在 <code>draw(rect:)</code> 方法中绘制相比，<code>CAShapeLayer</code> 提供了显著的性能优势。它在硬件层面进行渲染，效率极高，尤其适合动画和交互。🚀</p><p>想象一下，你想要绘制一个心形、一个星形或者任何自定义的曲线。使用 <code>CAShapeLayer</code>，你只需要定义一个 <code>UIBezierPath</code>，然后将其赋值给 <code>CAShapeLayer</code> 的 <code>path</code> 属性即可。这比手动管理 <code>CGContext</code> 状态要简单得多。</p><h2 id="创建与配置cashapelayer" tabindex="-1">创建与配置CAShapeLayer <a class="header-anchor" href="#创建与配置cashapelayer" aria-label="Permalink to &quot;创建与配置CAShapeLayer&quot;">​</a></h2><p>创建 <code>CAShapeLayer</code> 非常直接。你首先需要实例化它，然后设置它的路径、填充颜色和描边颜色。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shapeLayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CAShapeLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shapeLayer.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view.bounds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.layer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSublayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shapeLayer)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来，你需要定义一个 <code>UIBezierPath</code>。例如，我们可以创建一个简单的圆形路径：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circlePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIBezierPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arcCenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.bounds.midX, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.bounds.midY),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                              radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                              startAngle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                              endAngle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGFloat.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                              clockwise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shapeLayer.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circlePath.cgPath</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>你可以设置 <code>fillColor</code> 来填充形状内部，以及 <code>strokeColor</code> 和 <code>lineWidth</code> 来定义边框。</p><ul><li><code>shapeLayer.fillColor = UIColor.red.cgColor</code></li><li><code>shapeLayer.strokeColor = UIColor.blue.cgColor</code></li><li><code>shapeLayer.lineWidth = 3</code></li></ul><h2 id="绘制复杂路径与动画" tabindex="-1">绘制复杂路径与动画 <a class="header-anchor" href="#绘制复杂路径与动画" aria-label="Permalink to &quot;绘制复杂路径与动画&quot;">​</a></h2><p><code>CAShapeLayer</code> 的真正强大之处在于它能够轻松处理复杂的路径。你可以使用 <code>UIBezierPath</code> 的各种方法来构建复杂的几何图形，例如：</p><ol><li><strong>添加直线段</strong>: <code>addLine(to:)</code></li><li><strong>添加曲线段</strong>: <code>addCurve(to:controlPoint1:controlPoint2:)</code> 或 <code>addQuadCurve(to:controlPoint:)</code></li><li><strong>闭合路径</strong>: <code>close()</code></li></ol><p>例如，绘制一个三角形：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trianglePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIBezierPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trianglePath.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trianglePath.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trianglePath.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trianglePath.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shapeLayer.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trianglePath.cgPath</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>CAShapeLayer</code> 还支持路径动画！你可以通过改变 <code>path</code> 属性来创建平滑的形状过渡动画。这在制作加载动画或自定义进度条时非常有用。✨</p><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>CAShapeLayer</code> 在 <code>iOS</code> 开发中有着广泛的应用，例如：</p><ul><li><strong>自定义进度条</strong>: 通过改变 <code>strokeEnd</code> 属性来显示进度。</li><li><strong>加载动画</strong>: 制作各种流畅、吸引人的加载指示器。</li><li><strong>图表绘制</strong>: 绘制折线图、饼图等复杂图表。</li><li><strong>自定义控件</strong>: 创建具有独特形状和交互的 <code>UI</code> 元素。</li></ul><p>据统计，使用 <code>CAShapeLayer</code> 进行图形渲染通常比 <code>Core Graphics</code> 上下文绘制快 <code>20%</code> 到 <code>30%</code>，因为它避免了位图上下文的开销。这使得你的应用界面更加流畅，用户体验更佳。👍</p><h2 id="性能优化与注意事项" tabindex="-1">性能优化与注意事项 <a class="header-anchor" href="#性能优化与注意事项" aria-label="Permalink to &quot;性能优化与注意事项&quot;">​</a></h2><p>虽然 <code>CAShapeLayer</code> 性能优异，但仍有一些最佳实践可以帮助你进一步优化：</p><ul><li><strong>避免频繁修改路径</strong>: 如果路径非常复杂且需要频繁更新，考虑是否可以简化路径或使用其他技术。</li><li><strong>缓存路径</strong>: 如果路径是静态的，只创建一次并缓存其 <code>CGPath</code>。</li><li><strong>合理设置 <code>frame</code></strong>: 确保 <code>CAShapeLayer</code> 的 <code>frame</code> 足够大以包含其路径，但不要过大，以免造成不必要的渲染开销。</li></ul><p>通过掌握 <code>CAShapeLayer</code>，你将能够创建出令人惊叹的自定义 <code>UI</code> 元素，让你的应用在视觉上脱颖而出！🎨 这是一个非常值得投入学习的强大工具。</p>`,25)]))}const c=i(h,[["render",l]]);export{E as __pageData,c as default};
