import{_ as s,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"9.1_使用leading/trailing锚点设置水平约束","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/9.1_使用leading或trailing锚点设置水平约束.md","filePath":"uikit/basics/9.1_使用leading或trailing锚点设置水平约束.md"}'),t={name:"uikit/basics/9.1_使用leading或trailing锚点设置水平约束.md"};function l(h,i,r,o,d,p){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="_9-1-使用leading-trailing锚点设置水平约束" tabindex="-1">9.1_使用leading/trailing锚点设置水平约束 <a class="header-anchor" href="#_9-1-使用leading-trailing锚点设置水平约束" aria-label="Permalink to &quot;9.1_使用leading/trailing锚点设置水平约束&quot;">​</a></h1><blockquote><p>在iOS开发中，使用Auto Layout进行界面布局时，<code>leading</code>和<code>trailing</code>锚点是设置水平约束的关键。它们分别代表视图的<strong>前边缘</strong>和<strong>后边缘</strong>，在从左到右的语言环境中（如中文和英文），<code>leading</code>对应左边缘，<code>trailing</code>对应右边缘。理解并熟练运用这两个锚点，能让你轻松实现各种复杂的水平布局。🎉</p></blockquote><h2 id="锚点概念与作用" tabindex="-1">锚点概念与作用 <a class="header-anchor" href="#锚点概念与作用" aria-label="Permalink to &quot;锚点概念与作用&quot;">​</a></h2><p><code>leadingAnchor</code>和<code>trailingAnchor</code>是<code>NSLayoutAnchor</code>类的实例，用于定义视图在水平方向上的位置。通过将一个视图的<code>leadingAnchor</code>或<code>trailingAnchor</code>与另一个视图或父视图的相应锚点进行约束，可以精确控制视图的水平位置和间距。这比直接使用frame布局更加灵活和强大。💪</p><h2 id="创建和激活约束" tabindex="-1">创建和激活约束 <a class="header-anchor" href="#创建和激活约束" aria-label="Permalink to &quot;创建和激活约束&quot;">​</a></h2><p>要使用<code>leading</code>和<code>trailing</code>锚点创建约束，你需要遵循以下步骤：</p><ol><li><strong>获取锚点</strong>: 首先，获取需要约束的两个视图的<code>leadingAnchor</code>或<code>trailingAnchor</code>。</li><li><strong>创建约束</strong>: 使用<code>constraint(equalTo:constant:)</code>、<code>constraint(greaterThanOrEqualTo:constant:)</code>或<code>constraint(lessThanOrEqualTo:constant:)</code>等方法创建约束。</li><li><strong>激活约束</strong>: 将约束的<code>isActive</code>属性设置为<code>true</code>，或者将约束添加到<code>NSLayoutConstraint.activate([constraints])</code>数组中。</li></ol><p>例如，要将一个名为<code>myView</code>的视图的<code>leadingAnchor</code>与父视图的<code>leadingAnchor</code>对齐，并保持16点的间距，你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: superview.leadingAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="水平约束的常见用法" tabindex="-1">水平约束的常见用法 <a class="header-anchor" href="#水平约束的常见用法" aria-label="Permalink to &quot;水平约束的常见用法&quot;">​</a></h2><ul><li><strong>对齐父视图边缘</strong>: 将视图的<code>leadingAnchor</code>和<code>trailingAnchor</code>分别与父视图的<code>leadingAnchor</code>和<code>trailingAnchor</code>对齐，可以使视图填充父视图的水平空间。</li><li><strong>设置固定间距</strong>: 通过<code>constant</code>属性，可以设置视图之间的固定水平间距。例如，两个按钮之间保持8点的间距。</li><li><strong>创建链式布局</strong>: 将多个视图的<code>leadingAnchor</code>和<code>trailingAnchor</code>依次连接起来，可以创建水平方向上的链式布局。</li><li><strong>自适应布局</strong>: 结合<code>greaterThanOrEqualTo</code>和<code>lessThanOrEqualTo</code>，可以创建自适应的水平布局，使视图在不同屏幕尺寸下都能保持合理的显示效果。</li></ul><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><p>假设你想要创建一个视图，使其水平居中于父视图，并且距离父视图左右边缘各有20点的间距。你可以这样实现：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myView.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.leadingAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.trailingAnchor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.centerYAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: view.centerYAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myView.heightAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalToConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这段代码首先创建了一个红色的<code>UIView</code>，然后设置了它的<code>leadingAnchor</code>和<code>trailingAnchor</code>约束，使其距离父视图左右边缘各有20点的间距。同时，使用<code>centerYAnchor</code>使其垂直居中，并设置了高度为50。这样，无论在什么尺寸的屏幕上，这个视图都会水平居中，并且保持与边缘的间距。🎉</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过灵活运用<code>leading</code>和<code>trailing</code>锚点，你可以轻松实现各种复杂的水平布局。记住，理解锚点的概念，掌握创建和激活约束的方法，以及熟悉常见的用法，是成为Auto Layout高手的关键。加油！💪 你一定可以掌握的！</p>`,17)]))}const g=s(t,[["render",l]]);export{c as __pageData,g as default};
