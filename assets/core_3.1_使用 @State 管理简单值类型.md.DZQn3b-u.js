import{_ as a,c as i,o as n,ag as t}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"使用 @State 管理简单值类型","description":"","frontmatter":{},"headers":[],"relativePath":"core/3.1_使用 @State 管理简单值类型.md","filePath":"core/3.1_使用 @State 管理简单值类型.md"}'),e={name:"core/3.1_使用 @State 管理简单值类型.md"};function l(p,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="使用-state-管理简单值类型" tabindex="-1">使用 @State 管理简单值类型 <a class="header-anchor" href="#使用-state-管理简单值类型" aria-label="Permalink to &quot;使用 @State 管理简单值类型&quot;">​</a></h1><h2 id="掌握-state-视图内部状态的魔法-✨" tabindex="-1">掌握 @State：视图内部状态的魔法 ✨ <a class="header-anchor" href="#掌握-state-视图内部状态的魔法-✨" aria-label="Permalink to &quot;掌握 @State：视图内部状态的魔法 ✨&quot;">​</a></h2><p>在 SwiftUI 中，管理视图的状态是构建动态用户界面的核心。 <code>@State</code> 属性包装器就是你的秘密武器，它能让你轻松地在视图内部存储和更新简单值类型数据。当你使用 <code>@State</code> 声明一个属性时，SwiftUI 会自动追踪它的变化，并在数据更新时重新渲染视图，确保你的 UI 始终与数据保持同步。</p><h2 id="state-的核心机制与优势" tabindex="-1">@State 的核心机制与优势 <a class="header-anchor" href="#state-的核心机制与优势" aria-label="Permalink to &quot;@State 的核心机制与优势&quot;">​</a></h2><p>使用 <code>@State</code> 就像给你的视图一个记忆。它允许视图拥有自己的私有数据，这些数据只在视图的生命周期内有效。当 <code>@State</code> 变量的值发生改变时，SwiftUI 会自动触发视图的 <code>body</code> 属性重新计算，从而更新 UI。这种机制极大地简化了状态管理，让你能够专注于构建功能，而不是手动更新视图。</p><ul><li><strong>自动更新</strong>: 当 <code>@State</code> 变量改变时，视图会自动刷新。</li><li><strong>私有性</strong>: <code>@State</code> 变量通常是视图私有的，不直接暴露给外部。</li><li><strong>简单值类型</strong>: 最适合管理像 <code>Int</code>、<code>String</code>、<code>Bool</code> 这样的简单值类型。</li></ul><h2 id="如何声明和使用-state-变量" tabindex="-1">如何声明和使用 @State 变量 <a class="header-anchor" href="#如何声明和使用-state-变量" aria-label="Permalink to &quot;如何声明和使用 @State 变量&quot;">​</a></h2><p>声明一个 <code>@State</code> 变量非常直观。你只需要在属性前加上 <code>@State</code> 关键字，并为其提供一个初始值。例如，如果你想追踪一个按钮的点击次数，你可以这样声明：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tapCount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(tapCount)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 次&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tapCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个例子中，<code>tapCount</code> 是一个 <code>@State</code> 变量。每次点击按钮，<code>tapCount</code> 都会增加，并且 SwiftUI 会自动更新按钮的文本，显示最新的点击次数。这种无缝的交互体验，正是 <code>@State</code> 的魅力所在。</p><h2 id="state-的实际应用场景" tabindex="-1">@State 的实际应用场景 <a class="header-anchor" href="#state-的实际应用场景" aria-label="Permalink to &quot;@State 的实际应用场景&quot;">​</a></h2><p><code>@State</code> 在日常开发中无处不在。它非常适合管理那些只影响当前视图的局部状态。</p><ul><li><strong>计数器</strong>: 比如一个简单的点击计数器，或者购物车中的商品数量。</li><li><strong>开关状态</strong>: 控制一个 <code>Toggle</code> 的开启/关闭状态。</li><li><strong>文本输入</strong>: 绑定 <code>TextField</code> 的输入内容。</li><li><strong>视图可见性</strong>: 控制某个视图的显示或隐藏。</li></ul><p>例如，你可以用 <code>@State</code> 来控制一个文本框的显示与隐藏：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showText: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $showText) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;显示文本&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showText {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这是一段隐藏的文本！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>通过 <code>@State</code>，你能够轻松地构建出响应用户交互的动态界面。它让你的代码更简洁、更易读，并且大大提升了开发效率。掌握 <code>@State</code> 是你迈向 SwiftUI 高手之路的关键一步！🚀</p>`,16)]))}const E=a(e,[["render",l]]);export{c as __pageData,E as default};
