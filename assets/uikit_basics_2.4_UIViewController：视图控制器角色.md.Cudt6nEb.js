import{_ as o,c as i,o as l,ag as r}from"./chunks/framework.ymCRTBvy.js";const h=JSON.parse('{"title":"2.4_UIViewController：视图控制器角色","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/2.4_UIViewController：视图控制器角色.md","filePath":"uikit/basics/2.4_UIViewController：视图控制器角色.md"}'),a={name:"uikit/basics/2.4_UIViewController：视图控制器角色.md"};function t(d,e,c,n,s,_){return l(),i("div",null,e[0]||(e[0]=[r('<h1 id="_2-4-uiviewcontroller-视图控制器角色" tabindex="-1">2.4_UIViewController：视图控制器角色 <a class="header-anchor" href="#_2-4-uiviewcontroller-视图控制器角色" aria-label="Permalink to &quot;2.4_UIViewController：视图控制器角色&quot;">​</a></h1><h2 id="uiviewcontroller的核心作用" tabindex="-1">UIViewController的核心作用 <a class="header-anchor" href="#uiviewcontroller的核心作用" aria-label="Permalink to &quot;UIViewController的核心作用&quot;">​</a></h2><p><code>UIViewController</code> 是 iOS 应用中不可或缺的基石，它扮演着管理视图层级和处理用户交互的关键角色。你可以把它想象成一个舞台导演 🎬，精心编排着屏幕上的一切视觉元素，并响应观众（用户）的每一个动作。每个屏幕或屏幕的一部分通常都由一个视图控制器来管理。</p><h2 id="视图控制器的生命周期" tabindex="-1">视图控制器的生命周期 <a class="header-anchor" href="#视图控制器的生命周期" aria-label="Permalink to &quot;视图控制器的生命周期&quot;">​</a></h2><p>理解 <code>UIViewController</code> 的生命周期至关重要，它就像一个精心设计的剧本，指导着视图控制器从诞生到消亡的整个过程。掌握这些阶段能让你更好地控制视图的行为和数据流。</p><ul><li><strong><code>viewDidLoad()</code></strong>: 视图加载完毕后调用，这是你进行一次性设置的绝佳时机，比如初始化UI元素。</li><li><strong><code>viewWillAppear(_:)</code></strong>: 视图即将出现在屏幕上时调用，适合执行一些每次视图显示前都需要更新的操作。</li><li><strong><code>viewDidAppear(_:)</code></strong>: 视图已经完全呈现在屏幕上时调用，你可以在这里启动动画或网络请求。</li><li><strong><code>viewWillDisappear(_:)</code></strong>: 视图即将从屏幕上消失时调用，适合保存用户数据或停止正在进行的任务。</li><li><strong><code>viewDidDisappear(_:)</code></strong>: 视图已经从屏幕上消失时调用，可以释放一些不再需要的资源。</li></ul><h2 id="管理视图层级" tabindex="-1">管理视图层级 <a class="header-anchor" href="#管理视图层级" aria-label="Permalink to &quot;管理视图层级&quot;">​</a></h2><p><code>UIViewController</code> 的主要职责之一就是管理其 <code>view</code> 属性所代表的视图层级。这个 <code>view</code> 是所有子视图的根视图，你可以通过添加子视图来构建复杂的界面。例如，一个简单的登录界面可能包含：</p><ol><li>一个 <code>UILabel</code> 用于显示“用户名”。</li><li>一个 <code>UITextField</code> 用于用户输入用户名。</li><li>一个 <code>UILabel</code> 用于显示“密码”。</li><li>一个 <code>UITextField</code> 用于用户输入密码。</li><li>一个 <code>UIButton</code> 用于提交登录。</li></ol><p>所有这些UI元素都将作为视图控制器的 <code>view</code> 的子视图。</p><h2 id="处理用户交互与数据流" tabindex="-1">处理用户交互与数据流 <a class="header-anchor" href="#处理用户交互与数据流" aria-label="Permalink to &quot;处理用户交互与数据流&quot;">​</a></h2><p>视图控制器是用户交互的中心枢纽。当用户点击按钮、滑动屏幕或输入文本时，视图控制器会捕获这些事件并进行相应的处理。它还负责协调数据流，确保数据在模型（Model）和视图（View）之间正确传递。例如，一个简单的计数器应用：</p><ul><li>用户点击“增加”按钮 ➕。</li><li>视图控制器接收到点击事件。</li><li>视图控制器更新模型中的计数数据。</li><li>视图控制器更新 <code>UILabel</code> 显示新的计数。</li></ul><p>这种职责分离使得代码更易于管理和测试。</p><h2 id="导航与模态展示" tabindex="-1">导航与模态展示 <a class="header-anchor" href="#导航与模态展示" aria-label="Permalink to &quot;导航与模态展示&quot;">​</a></h2><p><code>UIViewController</code> 还提供了强大的导航功能，让你可以在不同的屏幕之间进行切换。</p><ul><li><strong>导航控制器 (<code>UINavigationController</code>)</strong>: 允许你通过堆栈的方式管理一系列视图控制器，实现“推入”和“弹出”的导航效果。这在许多应用中都非常常见，例如设置界面或邮件列表。</li><li><strong>模态展示 (<code>present(_:animated:completion:)</code>)</strong>: 以覆盖当前屏幕的方式展示一个新的视图控制器，通常用于显示临时信息或完成特定任务，例如弹出一个警告框或一个表单。</li></ul><p>掌握这些导航技术，你就能构建出流畅且用户友好的应用流程。🚀 事实上，高达 85% 的 iOS 应用都广泛使用了 <code>UINavigationController</code> 来管理其主要的用户流程。</p>',18)]))}const u=o(a,[["render",t]]);export{h as __pageData,u as default};
