import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"编码数据到JSON","description":"","frontmatter":{},"headers":[],"relativePath":"network/3.3_使用JSONEncoder编码数据.md","filePath":"network/3.3_使用JSONEncoder编码数据.md"}'),l={name:"network/3.3_使用JSONEncoder编码数据.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="编码数据到json" tabindex="-1">编码数据到JSON <a class="header-anchor" href="#编码数据到json" aria-label="Permalink to &quot;编码数据到JSON&quot;">​</a></h1><p>使用 <code>JSONEncoder</code> 将 Swift 数据结构转换为 JSON 格式是网络请求中的关键一步。这对于发送 POST 请求体至关重要。你将发现它非常直观且强大。🚀</p><p>这个过程确保你的 Swift 对象能够被服务器正确解析。大约 85% 的现代 API 都倾向于接收 JSON 数据。</p><h2 id="jsonencoder-的基本用法" tabindex="-1">JSONEncoder 的基本用法 <a class="header-anchor" href="#jsonencoder-的基本用法" aria-label="Permalink to &quot;JSONEncoder 的基本用法&quot;">​</a></h2><p><code>JSONEncoder</code> 是 Swift <code>Codable</code> 协议的一部分。它允许你轻松地将符合 <code>Encodable</code> 协议的 Swift 类型转换为 <code>Data</code> 对象。这个 <code>Data</code> 对象就是你的 JSON 请求体。</p><p>你只需要创建一个 <code>JSONEncoder</code> 实例，然后调用其 <code>encode</code> 方法。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSONEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoder.outputFormatting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .prettyPrinted </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：为了可读性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="将-swift-对象编码为-data" tabindex="-1">将 Swift 对象编码为 Data <a class="header-anchor" href="#将-swift-对象编码为-data" aria-label="Permalink to &quot;将 Swift 对象编码为 Data&quot;">​</a></h2><p>现在，让我们看看如何将你的 Swift 模型编码为 <code>Data</code>。假设你有一个 <code>User</code> 结构体，它符合 <code>Encodable</code> 协议。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Encodable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zhangsan@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newUser)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: jsonData, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;编码失败: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这个过程非常高效，通常在几毫秒内完成。</p><h2 id="处理编码选项" tabindex="-1">处理编码选项 <a class="header-anchor" href="#处理编码选项" aria-label="Permalink to &quot;处理编码选项&quot;">​</a></h2><p><code>JSONEncoder</code> 提供了多种配置选项，以满足不同的需求。这些选项可以帮助你控制输出 JSON 的格式。</p><p>一些常用的 <code>outputFormatting</code> 选项包括：</p><ul><li><code>.prettyPrinted</code>: 生成可读性更好的 JSON，带有缩进和换行。</li><li><code>.sortedKeys</code>: 按键的字母顺序排序 JSON 字典的键。</li></ul><p>你还可以自定义日期和数据编码策略。例如，你可以指定日期如何被编码为字符串或时间戳。</p><ol><li><strong>日期编码策略</strong>: <ul><li><code>.deferredToDate</code></li><li><code>.iso8601</code></li><li><code>.formatted(formatter)</code></li></ul></li><li><strong>数据编码策略</strong>: <ul><li><code>.deferredToData</code></li><li><code>.base64</code></li></ul></li></ol><p>通过这些选项，你可以确保生成的 JSON 完全符合你的 API 规范。这大大提升了你处理复杂网络请求的能力。💪 掌握 <code>JSONEncoder</code> 将使你的网络请求代码更加健壮和灵活。</p>`,18)]))}const c=i(l,[["render",t]]);export{E as __pageData,c as default};
