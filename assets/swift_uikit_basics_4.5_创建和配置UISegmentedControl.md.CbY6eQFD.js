import{_ as i,c as e,o as a,ag as n}from"./chunks/framework.ymCRTBvy.js";const g=JSON.parse('{"title":"4.5_创建和配置UISegmentedControl","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/4.5_创建和配置UISegmentedControl.md","filePath":"swift/uikit/basics/4.5_创建和配置UISegmentedControl.md"}'),t={name:"swift/uikit/basics/4.5_创建和配置UISegmentedControl.md"};function l(p,s,h,r,d,o){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="_4-5-创建和配置uisegmentedcontrol" tabindex="-1">4.5_创建和配置UISegmentedControl <a class="header-anchor" href="#_4-5-创建和配置uisegmentedcontrol" aria-label="Permalink to &quot;4.5_创建和配置UISegmentedControl&quot;">​</a></h1><h2 id="认识-uisegmentedcontrol" tabindex="-1">认识 UISegmentedControl <a class="header-anchor" href="#认识-uisegmentedcontrol" aria-label="Permalink to &quot;认识 UISegmentedControl&quot;">​</a></h2><p>UISegmentedControl 是 iOS 中一个非常实用的控件，它允许用户从一组互斥的选项中选择一个。想象一下，你正在开发一个天气应用，用户可以选择查看“今天”、“明天”或“一周”的天气预报。UISegmentedControl 就能完美地实现这种功能！它提供了一种直观且节省空间的方式来呈现多个选项。🚀</p><h2 id="创建-uisegmentedcontrol" tabindex="-1">创建 UISegmentedControl <a class="header-anchor" href="#创建-uisegmentedcontrol" aria-label="Permalink to &quot;创建 UISegmentedControl&quot;">​</a></h2><p>在 UIKit 编程中，创建 UISegmentedControl 就像变魔术一样简单。你首先需要实例化它，并传入一个包含所有选项标题的数组。例如，如果你想创建一个包含“男”和“女”选项的性别选择器，你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> segmentedControl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UISegmentedControl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;男&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;女&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>是不是超级方便？这个数组中的字符串将直接显示在每个分段上。</p><h2 id="配置-uisegmentedcontrol-的外观" tabindex="-1">配置 UISegmentedControl 的外观 <a class="header-anchor" href="#配置-uisegmentedcontrol-的外观" aria-label="Permalink to &quot;配置 UISegmentedControl 的外观&quot;">​</a></h2><p>创建好 UISegmentedControl 后，你肯定想让它看起来更符合你的应用风格。你可以轻松调整它的外观属性。例如，你可以设置默认选中的分段，这对于提供更好的用户体验至关重要。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">segmentedControl.selectedSegmentIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 默认选中第一个分段</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你还可以调整它的颜色，让它与你的应用主题保持一致。🎨</p><h2 id="添加-uisegmentedcontrol-到视图" tabindex="-1">添加 UISegmentedControl 到视图 <a class="header-anchor" href="#添加-uisegmentedcontrol-到视图" aria-label="Permalink to &quot;添加 UISegmentedControl 到视图&quot;">​</a></h2><p>就像其他 UIKit 控件一样，创建并配置好的 UISegmentedControl 需要被添加到你的视图层级中才能显示出来。这通常通过 <code>addSubview()</code> 方法完成。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(segmentedControl)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>别忘了设置它的布局约束！在非 Storyboard 开发中，使用 Auto Layout 是最佳实践。你可以使用 <code>translatesAutoresizingMaskIntoConstraints = false</code> 禁用自动转换，然后手动添加约束。</p><h2 id="处理-uisegmentedcontrol-的值改变事件" tabindex="-1">处理 UISegmentedControl 的值改变事件 <a class="header-anchor" href="#处理-uisegmentedcontrol-的值改变事件" aria-label="Permalink to &quot;处理 UISegmentedControl 的值改变事件&quot;">​</a></h2><p>UISegmentedControl 最强大的地方在于它能够响应用户的选择。当用户点击不同的分段时，你可以通过添加一个 <code>target-action</code> 机制来捕获这个事件。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">segmentedControl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(segmentChanged), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .valueChanged)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，你需要实现 <code>segmentChanged</code> 方法来处理用户的选择。在这个方法中，你可以访问 <code>selectedSegmentIndex</code> 属性来确定用户选择了哪个分段。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> segmentChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sender: UISegmentedControl) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sender.selectedSegmentIndex {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户选择了第一个选项&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户选择了第二个选项&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通过这种方式，你可以根据用户的选择执行不同的逻辑，让你的应用变得更加智能和交互性强。这真是太棒了！✨ 掌握 UISegmentedControl 将极大地提升你应用的用户体验。</p>`,21)]))}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
