import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"添加滑动手势（UISwipeGestureRecognizer）","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/advanced/12.2_添加滑动手势（UISwipeGestureRecognizer）.md","filePath":"swift/uikit/advanced/12.2_添加滑动手势（UISwipeGestureRecognizer）.md"}'),t={name:"swift/uikit/advanced/12.2_添加滑动手势（UISwipeGestureRecognizer）.md"};function p(l,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="添加滑动手势-uiswipegesturerecognizer" tabindex="-1">添加滑动手势（UISwipeGestureRecognizer） <a class="header-anchor" href="#添加滑动手势-uiswipegesturerecognizer" aria-label="Permalink to &quot;添加滑动手势（UISwipeGestureRecognizer）&quot;">​</a></h1><p>手势识别器是构建互动性强的 iOS 应用的关键。让我们一起探索如何使用 <code>UISwipeGestureRecognizer</code> 添加滑动手势，让你的应用更加生动有趣！🚀</p><h2 id="创建-uiswipegesturerecognizer" tabindex="-1">创建 UISwipeGestureRecognizer <a class="header-anchor" href="#创建-uiswipegesturerecognizer" aria-label="Permalink to &quot;创建 UISwipeGestureRecognizer&quot;">​</a></h2><p>首先，你需要创建一个 <code>UISwipeGestureRecognizer</code> 的实例。这个手势识别器专门用于检测滑动手势。你可以通过以下代码创建一个：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swipeGesture </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UISwipeGestureRecognizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handleSwipe))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，<code>target</code> 是手势识别器将要发送动作的对象，通常是你的视图控制器。<code>action</code> 是当手势被识别时将要调用的方法。<code>#selector(handleSwipe)</code> 指的是名为 <code>handleSwipe</code> 的方法，你需要自己实现这个方法来处理滑动手势。</p><h2 id="设置滑动手势的方向" tabindex="-1">设置滑动手势的方向 <a class="header-anchor" href="#设置滑动手势的方向" aria-label="Permalink to &quot;设置滑动手势的方向&quot;">​</a></h2><p>滑动手势可以发生在不同的方向上，例如向左、向右、向上或向下。你可以通过 <code>direction</code> 属性来设置手势识别器应该检测哪个方向的滑动。例如，要检测向右的滑动，你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swipeGesture.direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .right</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你可以使用 <code>UISwipeGestureRecognizer.Direction</code> 枚举中的其他值来设置不同的方向，例如 <code>.left</code>，<code>.up</code>，<code>.down</code>。你甚至可以组合多个方向，例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swipeGesture.direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [.right, .left]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，手势识别器就会同时检测向右和向左的滑动。</p><h2 id="添加手势识别器到视图" tabindex="-1">添加手势识别器到视图 <a class="header-anchor" href="#添加手势识别器到视图" aria-label="Permalink to &quot;添加手势识别器到视图&quot;">​</a></h2><p>创建并配置好手势识别器后，你需要将它添加到你想要检测滑动手势的视图上。你可以使用 <code>addGestureRecognizer</code> 方法来实现：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yourView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addGestureRecognizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(swipeGesture)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>yourView</code> 是你想要添加手势识别器的视图。现在，当用户在 <code>yourView</code> 上进行滑动手势时，你的手势识别器就会被触发。</p><h2 id="处理滑动手势" tabindex="-1">处理滑动手势 <a class="header-anchor" href="#处理滑动手势" aria-label="Permalink to &quot;处理滑动手势&quot;">​</a></h2><p>当手势识别器检测到滑动手势时，它会调用你在创建手势识别器时指定的 <code>action</code> 方法。在这个方法中，你可以编写代码来处理滑动手势。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleSwipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UISwipeGestureRecognizer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sender.direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .right {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理向右滑动</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;向右滑动&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sender.direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .left {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理向左滑动</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;向左滑动&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在这个例子中，我们首先检查滑动的方向，然后根据方向执行不同的操作。你可以根据你的应用的需求来编写不同的处理逻辑。</p><h2 id="多个手势识别器" tabindex="-1">多个手势识别器 <a class="header-anchor" href="#多个手势识别器" aria-label="Permalink to &quot;多个手势识别器&quot;">​</a></h2><p>你可以在同一个视图上添加多个手势识别器，每个手势识别器检测不同的滑动手势方向。例如，你可以添加一个向右滑动手势识别器和一个向左滑动手势识别器，分别处理不同的操作。这可以让你创建更加复杂和灵活的交互。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swipeRight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UISwipeGestureRecognizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handleSwipe))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swipeRight.direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .right</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yourView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addGestureRecognizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(swipeRight)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swipeLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UISwipeGestureRecognizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handleSwipe))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swipeLeft.direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .left</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yourView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addGestureRecognizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(swipeLeft)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>现在，你已经学会了如何使用 <code>UISwipeGestureRecognizer</code> 添加滑动手势。尝试在你的应用中使用滑动手势，让你的应用更加直观和易于使用！🎉</p>`,24)]))}const o=i(t,[["render",p]]);export{E as __pageData,o as default};
