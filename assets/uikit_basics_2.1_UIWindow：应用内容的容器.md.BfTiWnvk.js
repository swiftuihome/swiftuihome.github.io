import{_ as s,c as n,o as a,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"2.1_UIWindow：应用内容的容器","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/2.1_UIWindow：应用内容的容器.md","filePath":"uikit/basics/2.1_UIWindow：应用内容的容器.md"}'),o={name:"uikit/basics/2.1_UIWindow：应用内容的容器.md"};function l(t,i,d,h,r,p){return a(),n("div",null,i[0]||(i[0]=[e(`<h1 id="_2-1-uiwindow-应用内容的容器" tabindex="-1">2.1_UIWindow：应用内容的容器 <a class="header-anchor" href="#_2-1-uiwindow-应用内容的容器" aria-label="Permalink to &quot;2.1_UIWindow：应用内容的容器&quot;">​</a></h1><h2 id="uiwindow-应用内容的基石" tabindex="-1">UIWindow：应用内容的基石 <a class="header-anchor" href="#uiwindow-应用内容的基石" aria-label="Permalink to &quot;UIWindow：应用内容的基石&quot;">​</a></h2><p><code>UIWindow</code> 是 iOS 应用中一个至关重要的概念，它就像是你的应用内容呈现在屏幕上的一个舞台。没有 <code>UIWindow</code>，你的所有视图和控制器都将无处安放，用户也就无法与你的应用进行交互。它负责管理和协调应用内容的显示，是所有视图层级的最顶层容器。想象一下，你的应用就像一部精彩的电影，而 <code>UIWindow</code> 就是电影院的屏幕！ 🎬</p><h2 id="uiwindow-的核心作用" tabindex="-1">UIWindow 的核心作用 <a class="header-anchor" href="#uiwindow-的核心作用" aria-label="Permalink to &quot;UIWindow 的核心作用&quot;">​</a></h2><p><code>UIWindow</code> 承担着多项关键职责，确保你的应用能够顺畅运行。它不仅仅是一个简单的容器，更是事件传递和视图管理的核心枢纽。理解它的作用，能让你更好地构建健壮的 iOS 应用。</p><ul><li><strong>提供绘图表面</strong>: <code>UIWindow</code> 为你的应用内容提供了一个可供绘制的表面。所有你看到的 UI 元素，无论是按钮、文本框还是图片，最终都会呈现在这个表面上。</li><li><strong>事件传递</strong>: 它是触摸事件和其他用户交互事件的第一个接收者。当用户点击屏幕时，<code>UIWindow</code> 会接收到这个事件，并将其分发给合适的视图进行处理。</li><li><strong>管理视图层级</strong>: <code>UIWindow</code> 维护着一个视图层级结构，所有添加到应用中的视图都将成为它的子视图或子视图的子视图。它确保了视图的正确显示顺序和布局。</li><li><strong>支持多窗口</strong>: 在 iPadOS 等系统中，<code>UIWindow</code> 还能支持多窗口功能，让你的应用能够同时显示多个独立的界面。</li></ul><h2 id="uiwindow-与根视图控制器" tabindex="-1">UIWindow 与根视图控制器 <a class="header-anchor" href="#uiwindow-与根视图控制器" aria-label="Permalink to &quot;UIWindow 与根视图控制器&quot;">​</a></h2><p>每个 <code>UIWindow</code> 都必须有一个根视图控制器 (<code>rootViewController</code>)。这个根视图控制器是 <code>UIWindow</code> 内容的起点，它决定了应用启动时用户首先看到什么。你可以将任何 <code>UIViewController</code> 的子类设置为 <code>UIWindow</code> 的 <code>rootViewController</code>。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 SceneDelegate 中设置 UIWindow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene: UIScene, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">willConnectTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: UISceneSession, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionOptions: UIScene.ConnectionOptions) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowScene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIWindowScene) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">windowScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: windowScene)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的自定义视图控制器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewController.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .systemBlue </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置背景色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeKeyAndVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在上面的代码示例中，我们创建了一个新的 <code>UIWindow</code>，并将其 <code>rootViewController</code> 设置为一个简单的 <code>UIViewController</code>。<code>makeKeyAndVisible()</code> 方法会将这个窗口设置为应用的主窗口，并使其可见。</p><h2 id="uiwindow-的生命周期" tabindex="-1">UIWindow 的生命周期 <a class="header-anchor" href="#uiwindow-的生命周期" aria-label="Permalink to &quot;UIWindow 的生命周期&quot;">​</a></h2><p><code>UIWindow</code> 的生命周期与应用的生命周期紧密相关。它通常在应用启动时创建，并在应用终止时销毁。在 <code>SceneDelegate</code> 中，你会看到 <code>UIWindow</code> 的创建和配置，这确保了应用在启动时就能拥有一个可用的显示容器。</p><ul><li><strong>创建</strong>: 当应用启动或新的场景 (<code>UIScene</code>) 连接时，<code>UIWindow</code> 会被创建。</li><li><strong>配置</strong>: 你需要为 <code>UIWindow</code> 设置 <code>windowScene</code> 和 <code>rootViewController</code>。</li><li><strong>显示</strong>: 调用 <code>makeKeyAndVisible()</code> 方法使其成为主窗口并显示在屏幕上。</li><li><strong>销毁</strong>: 当场景断开连接或应用终止时，<code>UIWindow</code> 会被销毁。</li></ul><h2 id="掌握-uiwindow-的重要性" tabindex="-1">掌握 UIWindow 的重要性 <a class="header-anchor" href="#掌握-uiwindow-的重要性" aria-label="Permalink to &quot;掌握 UIWindow 的重要性&quot;">​</a></h2><p>理解 <code>UIWindow</code> 的工作原理对于进行无 Storyboard 的 iOS 开发至关重要。当你放弃 Storyboard 时，你需要手动创建和配置 <code>UIWindow</code>，并为其设置根视图控制器。这赋予了你对应用启动流程和视图层级更精细的控制权。</p><ul><li><strong>更灵活的控制</strong>: 你可以完全掌控应用的启动流程和视图层级结构。</li><li><strong>更清晰的代码</strong>: 避免了 Storyboard 带来的复杂性和潜在问题，代码更加简洁明了。</li><li><strong>更好的性能</strong>: 在某些情况下，手动构建 UI 可能会带来更好的性能表现。</li></ul><p>掌握 <code>UIWindow</code>，你就能更好地驾驭 UIKit，构建出令人惊叹的 iOS 应用！🚀</p>`,17)]))}const E=s(o,[["render",l]]);export{c as __pageData,E as default};
