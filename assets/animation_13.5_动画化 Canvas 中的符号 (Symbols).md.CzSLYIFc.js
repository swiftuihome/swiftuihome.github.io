import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.ymCRTBvy.js";const g=JSON.parse('{"title":"13.5_动画化 Canvas 中的符号 (Symbols)","description":"","frontmatter":{},"headers":[],"relativePath":"animation/13.5_动画化 Canvas 中的符号 (Symbols).md","filePath":"animation/13.5_动画化 Canvas 中的符号 (Symbols).md"}'),l={name:"animation/13.5_动画化 Canvas 中的符号 (Symbols).md"};function t(k,s,p,e,r,E){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="_13-5-动画化-canvas-中的符号-symbols" tabindex="-1">13.5_动画化 Canvas 中的符号 (Symbols) <a class="header-anchor" href="#_13-5-动画化-canvas-中的符号-symbols" aria-label="Permalink to &quot;13.5_动画化 Canvas 中的符号 (Symbols)&quot;">​</a></h1><h2 id="探索-canvas-中的符号动画-🚀" tabindex="-1">探索 Canvas 中的符号动画 🚀 <a class="header-anchor" href="#探索-canvas-中的符号动画-🚀" aria-label="Permalink to &quot;探索 Canvas 中的符号动画 🚀&quot;">​</a></h2><p>准备好让你的 SwiftUI 应用更上一层楼了吗？🎉 让我们一起深入了解如何在 Canvas 中动画化符号，为你的界面增添无限活力！Canvas 提供了强大的绘图能力，结合符号，你可以创造出令人惊叹的视觉效果。</p><h2 id="符号的魅力-✨" tabindex="-1">符号的魅力 ✨ <a class="header-anchor" href="#符号的魅力-✨" aria-label="Permalink to &quot;符号的魅力 ✨&quot;">​</a></h2><p>符号在 SwiftUI 中扮演着重要的角色，它们是矢量图形，可以无损地缩放，非常适合用于创建各种图标和图形元素。通过 Canvas，你可以直接在屏幕上绘制和操作这些符号，实现各种动画效果。</p><ul><li><strong>可缩放性：</strong> 符号是矢量图形，无论放大多少倍，都不会失真。</li><li><strong>灵活性：</strong> 可以轻松地修改符号的颜色、大小和位置。</li><li><strong>性能优化：</strong> 符号的渲染效率很高，可以创建复杂的动画而不会影响性能。</li></ul><h2 id="动画化符号的步骤-🎬" tabindex="-1">动画化符号的步骤 🎬 <a class="header-anchor" href="#动画化符号的步骤-🎬" aria-label="Permalink to &quot;动画化符号的步骤 🎬&quot;">​</a></h2><p>动画化 Canvas 中的符号其实很简单，只需要几个关键步骤：</p><ol><li><strong>创建符号：</strong> 首先，你需要一个符号。你可以使用 SF Symbols 或自定义的矢量图形。</li><li><strong>在 Canvas 中绘制符号：</strong> 使用 <code>context.draw(_:at:)</code> 方法将符号绘制到 Canvas 上。</li><li><strong>创建动画：</strong> 使用 <code>TimelineView</code> 或 <code>withAnimation</code> 函数来创建动画。</li><li><strong>更新符号的状态：</strong> 在动画的每一帧中，更新符号的位置、大小或颜色。</li></ol><h2 id="实例演示-旋转的箭头-🔄" tabindex="-1">实例演示：旋转的箭头 🔄 <a class="header-anchor" href="#实例演示-旋转的箭头-🔄" aria-label="Permalink to &quot;实例演示：旋转的箭头 🔄&quot;">​</a></h2><p>让我们通过一个简单的例子来演示如何动画化 Canvas 中的符号。我们将创建一个旋转的箭头。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnimatedArrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.animation) { timeline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context, size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeline.date.timeIntervalSinceReferenceDate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> angle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Angle.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remainder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dividingBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: size.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: size.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: angle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arrow.right&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: size.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: size.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个例子中，我们使用 <code>TimelineView</code> 来创建一个动画，每帧都会更新箭头的旋转角度。<code>context.rotate(by: angle)</code> 方法用于旋转 Canvas 的坐标系，从而实现箭头的旋转效果。</p><h2 id="更多创意-💡" tabindex="-1">更多创意 💡 <a class="header-anchor" href="#更多创意-💡" aria-label="Permalink to &quot;更多创意 💡&quot;">​</a></h2><p>除了旋转，你还可以尝试其他各种动画效果，例如：</p><ul><li><strong>缩放：</strong> 改变符号的大小，创建放大或缩小的效果。</li><li><strong>颜色变化：</strong> 改变符号的颜色，创建渐变或闪烁的效果。</li><li><strong>路径动画：</strong> 让符号沿着一条路径移动，创建更复杂的动画效果。</li></ul><p>通过结合 Canvas 和符号，你可以创造出各种令人惊叹的动画效果，为你的 SwiftUI 应用增添无限活力！💪 记住，大胆尝试，勇于创新，你一定能创造出属于自己的独特动画！🎨</p>`,17)]))}const y=i(l,[["render",t]]);export{g as __pageData,y as default};
