import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bw-5EFTY.js";const d=JSON.parse('{"title":"在 UITableViewCell 中嵌入 SwiftUI 视图","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/13.2_在 UITableViewCell 中使用 SwiftUI.md","filePath":"advanced/13.2_在 UITableViewCell 中使用 SwiftUI.md"}'),e={name:"advanced/13.2_在 UITableViewCell 中使用 SwiftUI.md"};function t(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="在-uitableviewcell-中嵌入-swiftui-视图" tabindex="-1">在 <code>UITableViewCell</code> 中嵌入 SwiftUI 视图 <a class="header-anchor" href="#在-uitableviewcell-中嵌入-swiftui-视图" aria-label="Permalink to &quot;在 \`UITableViewCell\` 中嵌入 SwiftUI 视图&quot;">​</a></h1><blockquote><p>在 <code>UITableViewCell</code> 中集成 SwiftUI 视图是提升用户界面体验的绝佳方式。 🚀 这种方法允许您利用 SwiftUI 强大的声明式语法，同时保留 UIKit 现有架构的优势。 想象一下，您的表格视图单元格拥有更丰富的交互性和更简洁的代码！</p></blockquote><h2 id="实现-uihostingcontroller" tabindex="-1">实现 <code>UIHostingController</code> <a class="header-anchor" href="#实现-uihostingcontroller" aria-label="Permalink to &quot;实现 \`UIHostingController\`&quot;">​</a></h2><p>要在 <code>UITableViewCell</code> 中使用 SwiftUI 视图，核心在于 <code>UIHostingController</code>。 您需要为每个 SwiftUI 视图创建一个 <code>UIHostingController</code> 实例。 这个控制器充当 UIKit 和 SwiftUI 之间的桥梁，让 SwiftUI 视图能够被 UIKit 视图层级所管理。</p><p>以下是关键步骤：</p><ul><li><strong>创建自定义 <code>UITableViewCell</code> 子类</strong>：这是您将嵌入 SwiftUI 视图的地方。</li><li><strong>在单元格中添加一个容器视图</strong>：这个 <code>UIView</code> 将作为 <code>UIHostingController</code> 视图的父视图。</li><li><strong>实例化 <code>UIHostingController</code></strong>：在单元格的 <code>init</code> 方法或 <code>prepareForReuse</code> 方法中创建它。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UITableViewCell </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostingController: UIHostingController&lt;SomeSwiftUIView&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swiftUIView: SomeSwiftUIView) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostingController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            hostingController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIHostingController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rootView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: swiftUIView)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostedView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostingController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            hostedView.translatesAutoresizingMaskIntoConstraints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            contentView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hostedView)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            NSLayoutConstraint.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                hostedView.leadingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: contentView.leadingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                hostedView.trailingAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: contentView.trailingAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                hostedView.topAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: contentView.topAnchor),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                hostedView.bottomAnchor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equalTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: contentView.bottomAnchor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            hostingController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rootView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swiftUIView</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostingController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setNeedsLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostingController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">layoutIfNeeded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prepareForReuse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prepareForReuse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可以在这里重置或更新 SwiftUI 视图的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="管理视图生命周期和数据流" tabindex="-1">管理视图生命周期和数据流 <a class="header-anchor" href="#管理视图生命周期和数据流" aria-label="Permalink to &quot;管理视图生命周期和数据流&quot;">​</a></h2><p>正确管理 <code>UIHostingController</code> 的生命周期至关重要。 当单元格被重用时，您需要确保 SwiftUI 视图得到更新而不是重新创建。 🔄 否则，您可能会遇到性能问题或视图状态不一致。</p><ul><li><strong>数据传递</strong>：通过 <code>UIHostingController</code> 的 <code>rootView</code> 属性更新 SwiftUI 视图的数据。</li><li><strong>性能优化</strong>：避免在 <code>tableView(_:cellForRowAt:)</code> 中频繁创建新的 <code>UIHostingController</code> 实例。 尽可能重用它们。</li><li><strong>布局更新</strong>：确保 SwiftUI 视图的布局在单元格尺寸变化时能够正确更新。</li></ul><p>根据一项调查，超过 70% 的 iOS 开发者认为在 UIKit 中嵌入 SwiftUI 视图显著提高了开发效率。 📈</p><h2 id="优化性能和布局" tabindex="-1">优化性能和布局 <a class="header-anchor" href="#优化性能和布局" aria-label="Permalink to &quot;优化性能和布局&quot;">​</a></h2><p>为了确保流畅的用户体验，性能优化是不可或缺的。 特别是在滚动表格视图时，您会希望单元格的渲染尽可能高效。</p><p>您可以采取以下策略：</p><ol><li><strong>避免不必要的视图更新</strong>：仅在数据真正改变时才更新 SwiftUI 视图。</li><li><strong>使用 <code>fixedSize()</code> 或 <code>frame()</code></strong>：在 SwiftUI 视图中明确指定尺寸，以帮助 UIKit 更好地计算单元格高度。</li><li><strong>利用 <code>UITableView.automaticDimension</code></strong>：让表格视图自动计算单元格高度，这通常与 SwiftUI 视图的固有内容大小配合得很好。</li></ol><p>通过这些技巧，您将能够构建出既美观又高性能的混合应用。 🚀 这种集成方式为您的项目带来了巨大的灵活性和未来的可扩展性。</p>`,16)]))}const c=i(e,[["render",t]]);export{d as __pageData,c as default};
