import{_ as s,c as a,o as n,ag as l}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"12.1_创建和设置UINavigationController","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/12.1_创建和设置UINavigationController.md","filePath":"uikit/basics/12.1_创建和设置UINavigationController.md"}'),t={name:"uikit/basics/12.1_创建和设置UINavigationController.md"};function e(o,i,r,h,p,k){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="_12-1-创建和设置uinavigationcontroller" tabindex="-1">12.1_创建和设置UINavigationController <a class="header-anchor" href="#_12-1-创建和设置uinavigationcontroller" aria-label="Permalink to &quot;12.1_创建和设置UINavigationController&quot;">​</a></h1><h2 id="导航控制器的核心作用" tabindex="-1">导航控制器的核心作用 <a class="header-anchor" href="#导航控制器的核心作用" aria-label="Permalink to &quot;导航控制器的核心作用&quot;">​</a></h2><p><code>UINavigationController</code> 是 iOS 应用中一个极其强大的容器视图控制器，它能帮助你轻松管理视图控制器的层级结构。想象一下，你正在浏览一个应用，点击一个列表项后进入详情页，再点击详情页中的某个按钮进入另一个页面——这就是导航控制器在幕后默默工作的成果！它通过一个栈（stack）来组织视图控制器，每次“压入”（push）一个新的视图控制器，它就会显示在最前面，而“弹出”（pop）则会回到上一个视图控制器。</p><h2 id="初始化-uinavigationcontroller" tabindex="-1">初始化 UINavigationController <a class="header-anchor" href="#初始化-uinavigationcontroller" aria-label="Permalink to &quot;初始化 UINavigationController&quot;">​</a></h2><p>要开始使用 <code>UINavigationController</code>，你首先需要创建一个它的实例。最常见的方式是将其作为你的应用窗口的根视图控制器。你可以通过指定一个“根视图控制器”（root view controller）来初始化它。这个根视图控制器将是导航栈中的第一个视图控制器，也是你应用启动时用户看到的第一个界面。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设你的第一个视图控制器是 ViewController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigationController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UINavigationController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rootViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: rootViewController)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这段代码简洁明了，它创建了一个 <code>ViewController</code> 的实例，并将其设置为 <code>UINavigationController</code> 的根视图控制器。 🚀 这样，你的 <code>ViewController</code> 就会自动获得一个导航栏，为后续的页面跳转做好准备。</p><h2 id="设置为窗口的根视图控制器" tabindex="-1">设置为窗口的根视图控制器 <a class="header-anchor" href="#设置为窗口的根视图控制器" aria-label="Permalink to &quot;设置为窗口的根视图控制器&quot;">​</a></h2><p>一旦你创建了 <code>UINavigationController</code>，下一步就是将其设置为你的 <code>UIWindow</code> 的 <code>rootViewController</code>。这通常在 <code>AppDelegate</code> 的 <code>application(_:didFinishLaunchingWithOptions:)</code> 方法中完成。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application: UIApplication, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">didFinishLaunchingWithOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> launchOptions: [UIApplication.LaunchOptionsKey: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: UIScreen.main.bounds)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigationController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UINavigationController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rootViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: rootViewController)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigationController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeKeyAndVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过这几行代码，你的应用就拥有了一个功能完备的导航控制器。用户将从 <code>ViewController</code> 开始，并且可以通过导航栏进行页面切换。这比使用 <code>Storyboard</code> 更加灵活，让你对 UI 的控制力达到了 100%！💪</p><h2 id="导航栏的默认外观" tabindex="-1">导航栏的默认外观 <a class="header-anchor" href="#导航栏的默认外观" aria-label="Permalink to &quot;导航栏的默认外观&quot;">​</a></h2><p>当你创建一个 <code>UINavigationController</code> 时，它会自动为你的根视图控制器提供一个导航栏。这个导航栏默认会显示：</p><ul><li><strong>标题</strong>: 通常是当前视图控制器的 <code>title</code> 属性。</li><li><strong>返回按钮</strong>: 如果当前视图控制器不是导航栈的根视图控制器，会自动显示一个返回按钮，允许用户回到上一个页面。</li></ul><p>这些默认设置非常方便，让你无需编写额外代码就能获得基本的导航功能。例如，如果你在 <code>ViewController</code> 中设置了 <code>self.title = &quot;主页&quot;</code>，那么导航栏就会显示“主页”作为标题。</p><h2 id="导航控制器的优势" tabindex="-1">导航控制器的优势 <a class="header-anchor" href="#导航控制器的优势" aria-label="Permalink to &quot;导航控制器的优势&quot;">​</a></h2><p>使用 <code>UINavigationController</code> 带来了诸多优势，尤其是在管理复杂应用流程时：</p><ol><li><strong>结构化导航</strong>: 它提供了一个清晰的视图控制器层级结构，易于理解和维护。</li><li><strong>自动管理导航栏</strong>: 无需手动创建和管理导航栏，它会自动处理标题、返回按钮等元素。</li><li><strong>手势返回</strong>: 用户可以通过从屏幕左边缘滑动来返回上一个视图控制器，提升用户体验。</li><li><strong>代码控制</strong>: 纯代码实现让你对导航行为拥有完全的控制权，可以根据需求进行高度定制。</li></ol><p>据统计，超过 70% 的 iOS 应用都广泛使用了 <code>UINavigationController</code> 来实现其核心导航功能，这足以证明它的重要性和实用性。掌握它，你就能构建出专业且用户友好的 iOS 应用！✨</p>`,19)]))}const g=s(t,[["render",e]]);export{c as __pageData,g as default};
