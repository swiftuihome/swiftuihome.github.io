import{_ as s,c as a,o as i,ag as n}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"使用 .preference(key-value-) 设置值","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/2.2_使用 .preference(key-value-) 设置值.md","filePath":"advanced/2.2_使用 .preference(key-value-) 设置值.md"}'),l={name:"advanced/2.2_使用 .preference(key-value-) 设置值.md"};function r(t,e,p,h,k,d){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="使用-preference-key-value-设置值" tabindex="-1">使用 .preference(key-value-) 设置值 <a class="header-anchor" href="#使用-preference-key-value-设置值" aria-label="Permalink to &quot;使用 .preference(key-value-) 设置值&quot;">​</a></h1><blockquote><p>在 SwiftUI 中，<code>.preference(key:value:)</code> 是一个强大的工具，允许你将信息从视图树的子视图传递到父视图。这对于创建灵活且可配置的 UI 非常有用。让我们深入了解如何使用它！🚀</p></blockquote><h2 id="掌握-preference-key-value-的奥秘" tabindex="-1">掌握 <code>.preference(key:value:)</code> 的奥秘 <a class="header-anchor" href="#掌握-preference-key-value-的奥秘" aria-label="Permalink to &quot;掌握 \`.preference(key:value:)\` 的奥秘&quot;">​</a></h2><p><code>.preference(key:value:)</code> 修饰符附加到视图上，用于设置特定 <code>PreferenceKey</code> 的值。<code>PreferenceKey</code> 本身定义了值的类型以及如何合并来自不同子视图的值。你可以把它想象成一个信使，负责传递信息。</p><ul><li><strong>设置值</strong>: 使用 <code>.preference(key:value:)</code> 将特定值与视图关联。</li><li><strong>类型安全</strong>: <code>key</code> 确保你传递的值类型正确。</li><li><strong>视图层级</strong>: 信息沿着视图层级向上流动。</li></ul><h2 id="实战演练-设置-preference-值" tabindex="-1">实战演练：设置 Preference 值 <a class="header-anchor" href="#实战演练-设置-preference-值" aria-label="Permalink to &quot;实战演练：设置 Preference 值&quot;">​</a></h2><p>假设你想要知道一个文本视图的宽度。你可以创建一个自定义的 <code>PreferenceKey</code> 来存储这个宽度，并使用 <code>.preference(key:value:)</code> 在文本视图上设置它。这就像给视图贴上一个标签，上面写着它的宽度。📏</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WidthPreferenceKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferenceKey </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultValue: CGFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGFloat, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGFloat) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, SwiftUI!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GeometryReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Color.clear</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">preference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: WidthPreferenceKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: geometry.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="深入理解-preferencekey" tabindex="-1">深入理解 PreferenceKey <a class="header-anchor" href="#深入理解-preferencekey" aria-label="Permalink to &quot;深入理解 PreferenceKey&quot;">​</a></h2><p><code>PreferenceKey</code> 协议要求你定义两个关键部分：<code>defaultValue</code> 和 <code>reduce</code> 方法。<code>defaultValue</code> 是一个初始值，而 <code>reduce</code> 方法定义了如何合并来自多个子视图的值。这确保了即使有多个子视图设置了相同 <code>PreferenceKey</code>，你也能得到一个有意义的结果。</p><ul><li><strong>defaultValue</strong>: 初始值，确保即使没有设置值，也有一个默认值可用。</li><li><strong>reduce</strong>: 合并策略，定义如何处理来自多个子视图的值。</li></ul><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><p><code>.preference(key:value:)</code> 在许多场景中都非常有用。例如，你可以使用它来：</p><ol><li><strong>同步视图尺寸</strong>: 确保多个视图具有相同的尺寸。</li><li><strong>创建自定义布局</strong>: 根据子视图的需求调整父视图的布局。</li><li><strong>实现动态效果</strong>: 根据子视图的状态改变父视图的外观。</li></ol><p>通过巧妙地使用 <code>.preference(key:value:)</code>，你可以创建出更加灵活和强大的 SwiftUI 视图。记住，实践是最好的老师！动手尝试，你会发现更多有趣的应用。🎉</p>`,15)]))}const E=s(l,[["render",r]]);export{o as __pageData,E as default};
