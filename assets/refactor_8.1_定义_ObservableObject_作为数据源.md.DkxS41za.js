import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const b=JSON.parse('{"title":"定义 ObservableObject 作为数据源","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/8.1_定义`ObservableObject`作为数据源.md","filePath":"refactor/8.1_定义`ObservableObject`作为数据源.md"}'),l={name:"refactor/8.1_定义`ObservableObject`作为数据源.md"};function t(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="定义-observableobject-作为数据源" tabindex="-1">定义 <code>ObservableObject</code> 作为数据源 <a class="header-anchor" href="#定义-observableobject-作为数据源" aria-label="Permalink to &quot;定义 \`ObservableObject\` 作为数据源&quot;">​</a></h1><p>在 SwiftUI 中，<code>ObservableObject</code> 协议是构建响应式用户界面的基石。它允许你创建可以被 SwiftUI 视图观察的数据模型，当模型数据发生变化时，视图会自动更新。这使得数据驱动的 UI 开发变得简单而高效。🎉</p><h2 id="创建你的数据模型" tabindex="-1">创建你的数据模型 <a class="header-anchor" href="#创建你的数据模型" aria-label="Permalink to &quot;创建你的数据模型&quot;">​</a></h2><p>首先，你需要创建一个类，并让它遵循 <code>ObservableObject</code> 协议。这个类将包含你的应用程序需要管理的数据。使用 <code>@Published</code> 属性包装器来标记那些当它们的值改变时需要通知 SwiftUI 视图的属性。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;初始用户名&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLoggedIn: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>username</code> 和 <code>isLoggedIn</code> 都是 <code>@Published</code> 属性。这意味着当它们的值发生变化时，任何观察 <code>UserData</code> 实例的视图都会自动更新。</p><h2 id="为什么使用-observableobject" tabindex="-1">为什么使用 <code>ObservableObject</code>？ <a class="header-anchor" href="#为什么使用-observableobject" aria-label="Permalink to &quot;为什么使用 \`ObservableObject\`？&quot;">​</a></h2><p>使用 <code>ObservableObject</code> 可以帮助你将数据逻辑从视图中分离出来，使得你的代码更加模块化和可测试。此外，它还简化了状态管理，因为 SwiftUI 会自动处理视图的更新。</p><ul><li><strong>数据绑定</strong>: 允许视图直接绑定到数据模型。</li><li><strong>自动更新</strong>: 当数据模型改变时，视图自动更新。</li><li><strong>代码组织</strong>: 促进了清晰的代码结构和可维护性。</li></ul><h2 id="实践案例" tabindex="-1">实践案例 <a class="header-anchor" href="#实践案例" aria-label="Permalink to &quot;实践案例&quot;">​</a></h2><p>假设你正在开发一个用户认证系统。你可以创建一个 <code>AuthManager</code> 类，遵循 <code>ObservableObject</code> 协议，并包含用户认证状态和相关数据。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObservableObject </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isAuthenticated: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Published</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userEmail: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 模拟登录逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test@example.com&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isAuthenticated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            userEmail </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isAuthenticated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userEmail </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>现在，你可以在你的 SwiftUI 视图中使用 <code>@EnvironmentObject</code> 来访问和观察 <code>AuthManager</code> 实例，并根据用户的认证状态来更新 UI。这使得构建动态和响应式的用户界面变得非常容易。🚀</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>ObservableObject</code> 是 SwiftUI 中一个强大的工具，可以帮助你构建可维护和响应式的应用程序。通过将数据模型与视图分离，并利用 <code>@Published</code> 属性包装器，你可以轻松地管理应用程序的状态，并确保 UI 始终与数据保持同步。记住，良好的数据管理是构建优秀 SwiftUI 应用的关键！👍</p>`,15)]))}const o=i(l,[["render",t]]);export{b as __pageData,o as default};
