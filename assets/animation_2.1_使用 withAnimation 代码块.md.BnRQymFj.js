import{_ as a,c as s,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const k=JSON.parse('{"title":"2.1_使用 withAnimation 代码块","description":"","frontmatter":{},"headers":[],"relativePath":"animation/2.1_使用 withAnimation 代码块.md","filePath":"animation/2.1_使用 withAnimation 代码块.md"}'),t={name:"animation/2.1_使用 withAnimation 代码块.md"};function o(l,i,h,p,d,r){return n(),s("div",null,i[0]||(i[0]=[e(`<h1 id="_2-1-使用-withanimation-代码块" tabindex="-1">2.1_使用 withAnimation 代码块 <a class="header-anchor" href="#_2-1-使用-withanimation-代码块" aria-label="Permalink to &quot;2.1_使用 withAnimation 代码块&quot;">​</a></h1><h2 id="使用-withanimation-代码块-🚀" tabindex="-1">使用 withAnimation 代码块 🚀 <a class="header-anchor" href="#使用-withanimation-代码块-🚀" aria-label="Permalink to &quot;使用 withAnimation 代码块 🚀&quot;">​</a></h2><p><code>withAnimation</code> 代码块是 SwiftUI 中实现显式动画的关键！它允许你精确控制哪些状态变化会触发动画，以及动画如何执行。你可以把它想象成一个动画“作用域”，只有在这个作用域内发生的状态改变才会被赋予动画效果。</p><h2 id="基础用法-🎨" tabindex="-1">基础用法 🎨 <a class="header-anchor" href="#基础用法-🎨" aria-label="Permalink to &quot;基础用法 🎨&quot;">​</a></h2><p>使用 <code>withAnimation</code> 非常简单。你只需要将想要添加动画效果的代码放入 <code>withAnimation</code> 代码块中即可。例如：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 改变状态的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isExpanded.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>isExpanded</code> 状态的改变会触发一个默认的动画。是不是很简单？🎉</p><h2 id="动画配置-⚙️" tabindex="-1">动画配置 ⚙️ <a class="header-anchor" href="#动画配置-⚙️" aria-label="Permalink to &quot;动画配置 ⚙️&quot;">​</a></h2><p><code>withAnimation</code> 还可以接受一个 <code>Animation</code> 参数，让你自定义动画的曲线和时长。例如，你可以使用 <code>.easeInOut</code> 曲线和 0.5 秒的时长：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">withAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">easeInOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 改变状态的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样，<code>offset</code> 的改变就会以缓入缓出的方式，在 0.5 秒内完成动画。你可以根据需要选择不同的动画曲线，例如 <code>.linear</code>、<code>.spring</code> 等。</p><h2 id="实际应用-💡" tabindex="-1">实际应用 💡 <a class="header-anchor" href="#实际应用-💡" aria-label="Permalink to &quot;实际应用 💡&quot;">​</a></h2><p><code>withAnimation</code> 在实际开发中非常有用。例如，你可以用它来创建平滑的过渡效果、响应用户交互的动画，或者实现更复杂的动画序列。</p><p>以下是一些使用 <code>withAnimation</code> 的场景：</p><ol><li><strong>视图的显示和隐藏</strong>：使用 <code>opacity</code> 或 <code>scaleEffect</code> 配合 <code>withAnimation</code>，可以创建优雅的淡入淡出或缩放动画。</li><li><strong>布局的改变</strong>：改变视图的位置、大小或约束，并使用 <code>withAnimation</code>，可以实现平滑的布局过渡。</li><li><strong>颜色的改变</strong>：使用 <code>foregroundColor</code> 或 <code>background</code> 配合 <code>withAnimation</code>，可以创建颜色渐变的动画效果。</li></ol><p><code>withAnimation</code> 代码块是 SwiftUI 动画工具箱中的一个强大工具。通过灵活运用 <code>withAnimation</code>，你可以为你的应用添加各种各样的动画效果，提升用户体验。记住，动画应该服务于用户，而不是分散用户的注意力。适度使用动画，让你的应用更加生动有趣！😊</p>`,16)]))}const m=a(t,[["render",o]]);export{k as __pageData,m as default};
