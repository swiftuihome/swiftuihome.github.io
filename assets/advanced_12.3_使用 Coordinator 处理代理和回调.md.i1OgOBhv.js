import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"使用 Coordinator 处理代理和回调","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/12.3_使用 Coordinator 处理代理和回调.md","filePath":"advanced/12.3_使用 Coordinator 处理代理和回调.md"}'),e={name:"advanced/12.3_使用 Coordinator 处理代理和回调.md"};function l(p,s,r,h,k,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="使用-coordinator-处理代理和回调" tabindex="-1">使用 Coordinator 处理代理和回调 <a class="header-anchor" href="#使用-coordinator-处理代理和回调" aria-label="Permalink to &quot;使用 Coordinator 处理代理和回调&quot;">​</a></h1><blockquote><p>在 SwiftUI 中与 UIKit 或 AppKit 组件交互时，<code>Coordinator</code> 扮演着至关重要的角色。它充当 SwiftUI 视图和 UIKit/AppKit 视图之间的桥梁，尤其是在处理代理和回调时。让我们深入了解如何使用 <code>Coordinator</code> 来管理这些交互。🚀</p></blockquote><h2 id="什么是-coordinator" tabindex="-1">什么是 Coordinator？ <a class="header-anchor" href="#什么是-coordinator" aria-label="Permalink to &quot;什么是 Coordinator？&quot;">​</a></h2><p><code>Coordinator</code> 本质上是一个中间人，它允许你从 UIKit/AppKit 组件向 SwiftUI 传递信息。它是一个嵌套类，存在于你的 <code>UIViewControllerRepresentable</code> 或 <code>UIViewRepresentable</code> 结构体中。你可以把它看作是 SwiftUI 和 UIKit 之间的翻译器。</p><ul><li><strong>连接桥梁</strong>: <code>Coordinator</code> 允许 UIKit/AppKit 组件与 SwiftUI 视图进行通信。</li><li><strong>代理模式</strong>: 它通常用于处理 UIKit/AppKit 委托方法。</li><li><strong>数据传递</strong>: 允许将数据从 UIKit/AppKit 传递到 SwiftUI。</li></ul><h2 id="如何使用-coordinator" tabindex="-1">如何使用 Coordinator <a class="header-anchor" href="#如何使用-coordinator" aria-label="Permalink to &quot;如何使用 Coordinator&quot;">​</a></h2><p>要使用 <code>Coordinator</code>，你需要在你的 <code>Representable</code> 结构体中创建一个嵌套类。这个类需要符合 <code>NSObject</code> 协议，并且可以持有任何你需要的状态。</p><ol><li><strong>创建 Coordinator 类</strong>: 在你的 <code>UIViewControllerRepresentable</code> 或 <code>UIViewRepresentable</code> 结构体中，创建一个名为 <code>Coordinator</code> 的类。</li><li><strong>实现代理方法</strong>: 在 <code>Coordinator</code> 类中，实现 UIKit/AppKit 组件的代理方法。</li><li><strong>更新 SwiftUI 状态</strong>: 在代理方法中，更新 SwiftUI 视图的状态，从而触发视图的重新渲染。</li></ol><p>例如，假设你正在使用 <code>UITextField</code>，并且想要在文本更改时更新 SwiftUI 视图。你可以这样做：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTextField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewRepresentable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UITextField {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textField </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UITextField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        textField.delegate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.coordinator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textField</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiView: UITextField, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        uiView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeCoordinator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Coordinator {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Coordinator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Coordinator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UITextFieldDelegate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent: MyTextField</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent: MyTextField) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> textFieldDidChangeSelection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textField: UITextField) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            parent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textField.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="coordinator-的优势" tabindex="-1">Coordinator 的优势 <a class="header-anchor" href="#coordinator-的优势" aria-label="Permalink to &quot;Coordinator 的优势&quot;">​</a></h2><p>使用 <code>Coordinator</code> 有几个显著的优势：</p><ul><li><strong>清晰的分离</strong>: 它将 UIKit/AppKit 代码与 SwiftUI 代码分离，使代码更易于维护和测试。</li><li><strong>类型安全</strong>: 通过使用 <code>Coordinator</code>，你可以确保类型安全，避免在 UIKit/AppKit 和 SwiftUI 之间传递错误类型的数据。</li><li><strong>状态管理</strong>: <code>Coordinator</code> 允许你管理 UIKit/AppKit 组件的状态，并将其同步到 SwiftUI 视图。</li></ul><p>总而言之，<code>Coordinator</code> 是在 SwiftUI 中使用 UIKit/AppKit 组件时处理代理和回调的关键工具。通过使用 <code>Coordinator</code>，你可以构建更强大、更灵活的 SwiftUI 应用程序。🎉 记住，实践是最好的老师，所以尝试在你的项目中应用 <code>Coordinator</code>，你会发现它非常有用！</p>`,14)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
