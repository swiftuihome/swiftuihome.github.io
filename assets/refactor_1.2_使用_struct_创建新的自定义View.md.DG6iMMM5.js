import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"使用struct创建新的自定义View","description":"","frontmatter":{},"headers":[],"relativePath":"refactor/1.2_使用`struct`创建新的自定义View.md","filePath":"refactor/1.2_使用`struct`创建新的自定义View.md"}'),t={name:"refactor/1.2_使用`struct`创建新的自定义View.md"};function l(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用struct创建新的自定义view" tabindex="-1">使用<code>struct</code>创建新的自定义View <a class="header-anchor" href="#使用struct创建新的自定义view" aria-label="Permalink to &quot;使用\`struct\`创建新的自定义View&quot;">​</a></h1><p>当然！让我们一起探索如何使用 <code>struct</code> 在 SwiftUI 中创建新的自定义 View 吧！🎉</p><h2 id="创建自定义-view-的基础" tabindex="-1">创建自定义 View 的基础 <a class="header-anchor" href="#创建自定义-view-的基础" aria-label="Permalink to &quot;创建自定义 View 的基础&quot;">​</a></h2><p>在 SwiftUI 中，<code>struct</code> 是构建用户界面的基石。你可以使用 <code>struct</code> 来定义自己的 View，从而将 UI 代码模块化，提高代码的可读性和可维护性。使用 <code>struct</code> 创建的 View 是值类型，这意味着它们在传递时会被复制，这有助于避免意外的副作用。</p><ul><li><strong>声明 <code>struct</code></strong>: 使用 <code>struct</code> 关键字声明一个新的 View。</li><li><strong>遵循 <code>View</code> 协议</strong>: 让你的 <code>struct</code> 遵循 <code>View</code> 协议，这是 SwiftUI 中所有 View 的基础。</li><li><strong>实现 <code>body</code> 属性</strong>: 在 <code>struct</code> 中实现 <code>body</code> 属性，它是一个计算属性，返回 View 的内容。</li></ul><h2 id="示例-创建一个简单的卡片-view" tabindex="-1">示例：创建一个简单的卡片 View <a class="header-anchor" href="#示例-创建一个简单的卡片-view" aria-label="Permalink to &quot;示例：创建一个简单的卡片 View&quot;">​</a></h2><p>让我们创建一个简单的卡片 View，它包含一个标题和一个描述。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CardView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> description: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">alignment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .leading) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.headline)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fontWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.bold)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(description)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.subheadline)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.gray)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.white)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cornerRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在这个例子中，我们定义了一个名为 <code>CardView</code> 的 <code>struct</code>，它有两个属性：<code>title</code> 和 <code>description</code>。<code>body</code> 属性使用 <code>VStack</code> 来垂直排列标题和描述，并添加了一些样式，如背景颜色、圆角和阴影。</p><h2 id="如何使用自定义-view" tabindex="-1">如何使用自定义 View <a class="header-anchor" href="#如何使用自定义-view" aria-label="Permalink to &quot;如何使用自定义 View&quot;">​</a></h2><p>创建了自定义 View 之后，你可以在其他 View 中使用它，就像使用 SwiftUI 内置的 View 一样。</p><ol><li><strong>初始化</strong>: 创建 <code>CardView</code> 的实例，并传递标题和描述。</li><li><strong>添加到 UI</strong>: 将 <code>CardView</code> 添加到你的 UI 层次结构中。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        CardView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SwiftUI&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;使用 struct 创建自定义 View&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过这种方式，你可以将复杂的 UI 分解为更小的、可重用的组件，从而使你的代码更易于理解和维护。</p><h2 id="优势与实践" tabindex="-1">优势与实践 <a class="header-anchor" href="#优势与实践" aria-label="Permalink to &quot;优势与实践&quot;">​</a></h2><p>使用 <code>struct</code> 创建自定义 View 的优势在于：</p><ul><li><strong>代码重用</strong>: 可以在多个地方使用同一个 View。</li><li><strong>模块化</strong>: 将 UI 分解为独立的模块，提高代码的可读性。</li><li><strong>可维护性</strong>: 易于修改和维护，因为每个 View 都是独立的。</li></ul><p>记住，良好的组件化是构建大型 SwiftUI 应用的关键。通过使用 <code>struct</code> 创建自定义 View，你可以构建出更清晰、更易于维护的 UI 代码。🚀</p>`,18)]))}const o=i(t,[["render",l]]);export{c as __pageData,o as default};
