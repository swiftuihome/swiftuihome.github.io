import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"配置Package.swift文件","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/14.2_配置Package.swift文件.md","filePath":"custom_views/14.2_配置Package.swift文件.md"}'),p={name:"custom_views/14.2_配置Package.swift文件.md"};function l(t,s,h,k,r,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="配置package-swift文件" tabindex="-1">配置Package.swift文件 <a class="header-anchor" href="#配置package-swift文件" aria-label="Permalink to &quot;配置Package.swift文件&quot;">​</a></h1><h2 id="理解-package-swift" tabindex="-1">理解 Package.swift <a class="header-anchor" href="#理解-package-swift" aria-label="Permalink to &quot;理解 Package.swift&quot;">​</a></h2><p><code>Package.swift</code> 文件是 Swift 包的核心。它定义了包的名称、依赖项和目标。正确配置这个文件是创建可复用组件库的关键一步。 🚀</p><p>这个文件使用 Swift 语言编写，因此你可以利用 Swift 的强大功能来定义你的包结构。</p><h2 id="定义包和产品" tabindex="-1">定义包和产品 <a class="header-anchor" href="#定义包和产品" aria-label="Permalink to &quot;定义包和产品&quot;">​</a></h2><p>在 <code>Package.swift</code> 中，你需要首先定义你的包。这包括包的名称和支持的平台。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// swift-tools-version:5.5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PackageDescription</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> package</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCustomComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    platforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.v14),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.v11)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    products</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Products define the executables and libraries a package produces, and make them visible to other packages.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCustomComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCustomComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Dependencies declare other packages that this package depends on.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // .package(url: /* package url */, from: &quot;1.0.0&quot;),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Targets are the basic building blocks of a package. A target can define a module or a test suite.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Targets can depend on other targets in this package, and on products in packages this package depends on.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCustomComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCustomComponentsTests&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyCustomComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>在 <code>products</code> 部分，你声明了你的包将提供哪些产品。对于组件库，通常是一个库（<code>.library</code>）。</p><ul><li><code>name</code>: 这是你的库的名称，其他项目将通过这个名称引用你的库。</li><li><code>targets</code>: 指定这个产品包含哪些目标。</li></ul><h2 id="管理依赖项" tabindex="-1">管理依赖项 <a class="header-anchor" href="#管理依赖项" aria-label="Permalink to &quot;管理依赖项&quot;">​</a></h2><p>你的组件库可能需要依赖其他的 Swift 包。在 <code>dependencies</code> 部分，你可以声明这些外部依赖。</p><p>例如，如果你需要一个特定的网络库，你可以这样添加它：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/Alamofire/Alamofire.git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5.4.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>添加依赖后，记得在相应的 <code>target</code> 中也声明它。</p><h2 id="配置目标" tabindex="-1">配置目标 <a class="header-anchor" href="#配置目标" aria-label="Permalink to &quot;配置目标&quot;">​</a></h2><p><code>targets</code> 部分定义了包中的所有目标。每个目标都是一个独立的构建单元。</p><p>通常，你会有一个主目标用于你的组件代码，以及一个或多个测试目标。</p><ul><li><code>.target</code>: 这是你的主要代码所在的目标。 <ul><li><code>name</code>: 目标的名称，通常与库的名称相同。</li><li><code>dependencies</code>: 这个目标所依赖的其他目标或外部包产品。</li></ul></li><li><code>.testTarget</code>: 用于编写单元测试和 UI 测试。 <ul><li><code>name</code>: 测试目标的名称。</li><li><code>dependencies</code>: 测试目标需要依赖主目标才能测试其代码。</li></ul></li></ul><p>确保你的目标名称与实际的文件夹结构相匹配，例如，如果你的主目标是 <code>MyCustomComponents</code>，那么你的源代码应该放在 <code>Sources/MyCustomComponents</code> 目录下。 📁</p><p>通过精心配置 <code>Package.swift</code>，你将为你的 SwiftUI 组件库打下坚实的基础。这将确保你的组件能够被其他开发者轻松地集成和使用。 🚀 这是一个非常强大的工具，掌握它将大大提升你的开发效率！ 💯</p>`,20)]))}const o=a(p,[["render",l]]);export{E as __pageData,o as default};
