import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"11.2_viewDidLoad方法的使用","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/11.2_viewDidLoad方法的使用.md","filePath":"swift/uikit/basics/11.2_viewDidLoad方法的使用.md"}'),l={name:"swift/uikit/basics/11.2_viewDidLoad方法的使用.md"};function p(t,s,h,d,r,k){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_11-2-viewdidload方法的使用" tabindex="-1">11.2_viewDidLoad方法的使用 <a class="header-anchor" href="#_11-2-viewdidload方法的使用" aria-label="Permalink to &quot;11.2_viewDidLoad方法的使用&quot;">​</a></h1><blockquote><p>viewDidLoad 是 UIKit 框架中 <code>UIViewController</code> 生命周期中的一个关键方法。它在视图控制器的视图加载到内存后被调用，而且<strong>仅调用一次</strong>。你可以把它想象成视图控制器的“初始化”方法，在这里你可以进行各种设置和配置。</p></blockquote><h2 id="viewdidload-的作用和时机-⏰" tabindex="-1">viewDidLoad 的作用和时机 ⏰ <a class="header-anchor" href="#viewdidload-的作用和时机-⏰" aria-label="Permalink to &quot;viewDidLoad 的作用和时机 ⏰&quot;">​</a></h2><p>viewDidLoad 方法的主要作用是执行一次性的设置任务。例如：</p><ul><li><strong>初始化子视图</strong>：创建并添加 <code>UIView</code> 的子类，例如 <code>UILabel</code>、<code>UIButton</code> 等。</li><li><strong>设置视图属性</strong>：配置视图的颜色、字体、文本、约束等。</li><li><strong>加载数据</strong>：从网络或本地加载数据，并更新视图。</li><li><strong>添加手势识别器</strong>：为视图添加手势识别器，例如 <code>UITapGestureRecognizer</code>。</li></ul><p>viewDidLoad 方法在视图控制器的视图层次结构加载到内存后立即调用。这意味着，当 viewDidLoad 被调用时，视图控制器的 <code>view</code> 属性已经存在，你可以安全地访问和修改它。</p><h2 id="viewdidload-的使用示例-💡" tabindex="-1">viewDidLoad 的使用示例 💡 <a class="header-anchor" href="#viewdidload-的使用示例-💡" aria-label="Permalink to &quot;viewDidLoad 的使用示例 💡&quot;">​</a></h2><p>让我们看一个简单的例子，在 viewDidLoad 方法中创建一个 <code>UILabel</code> 并添加到视图控制器的视图中：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个 UILabel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myLabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UILabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myLabel.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myLabel.textColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIColor.red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myLabel.frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myLabel.textAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .center</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将 UILabel 添加到视图控制器的视图中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addSubview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myLabel)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置视图控制器的背景颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIColor.white</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在这个例子中，我们首先调用 <code>super.viewDidLoad()</code>，这是非常重要的，因为它允许父类执行必要的初始化操作。然后，我们创建了一个 <code>UILabel</code>，设置了它的文本、颜色、大小和位置，并将它添加到视图控制器的视图中。最后，我们设置了视图控制器的背景颜色。</p><h2 id="最佳实践和注意事项-✅" tabindex="-1">最佳实践和注意事项 ✅ <a class="header-anchor" href="#最佳实践和注意事项-✅" aria-label="Permalink to &quot;最佳实践和注意事项 ✅&quot;">​</a></h2><ul><li><strong>调用 <code>super.viewDidLoad()</code></strong>：务必在 viewDidLoad 方法中调用 <code>super.viewDidLoad()</code>，以确保父类能够正确地初始化。</li><li><strong>避免耗时操作</strong>：viewDidLoad 方法应该尽可能快地执行完成，避免执行耗时的操作，例如网络请求或大量的数据处理。如果需要执行耗时操作，可以考虑使用异步任务。</li><li><strong>使用约束进行布局</strong>：尽量使用 Auto Layout 约束来布局视图，而不是直接设置 frame。这样可以确保视图在不同的设备和屏幕尺寸上都能正确显示。</li><li><strong>只执行一次性设置</strong>：viewDidLoad 方法只会被调用一次，因此应该只在这里执行一次性的设置任务。对于需要频繁更新的视图属性，应该在其他方法中进行设置。</li></ul><h2 id="深入理解-viewdidload-🧠" tabindex="-1">深入理解 viewDidLoad 🧠 <a class="header-anchor" href="#深入理解-viewdidload-🧠" aria-label="Permalink to &quot;深入理解 viewDidLoad 🧠&quot;">​</a></h2><p>viewDidLoad 方法是视图控制器生命周期中的一个重要组成部分。理解它的作用和使用方法，可以帮助你更好地管理视图控制器的视图，并创建出更加流畅和高效的 iOS 应用程序。记住，viewDidLoad 是你初始化视图和设置属性的绝佳时机！🎉</p><h2 id="总结-📝" tabindex="-1">总结 📝 <a class="header-anchor" href="#总结-📝" aria-label="Permalink to &quot;总结 📝&quot;">​</a></h2><p>viewDidLoad 是一个强大的工具，可以让你在视图加载后进行各种设置和配置。通过合理地使用 viewDidLoad 方法，你可以创建出更加精美和功能强大的 iOS 应用程序。希望你能够充分利用 viewDidLoad 方法，打造出令人惊艳的 App！ 🤩</p>`,16)]))}const c=i(l,[["render",p]]);export{E as __pageData,c as default};
