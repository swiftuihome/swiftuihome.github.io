import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const g=JSON.parse('{"title":"手势识别(Tap, LongPress, Drag)","description":"","frontmatter":{},"headers":[],"relativePath":"base/11.4_手势识别(Tap, LongPress, Drag).md","filePath":"base/11.4_手势识别(Tap, LongPress, Drag).md"}'),p={name:"base/11.4_手势识别(Tap, LongPress, Drag).md"};function l(h,s,t,k,r,E){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="手势识别-tap-longpress-drag" tabindex="-1">手势识别(Tap, LongPress, Drag) <a class="header-anchor" href="#手势识别-tap-longpress-drag" aria-label="Permalink to &quot;手势识别(Tap, LongPress, Drag)&quot;">​</a></h1><p>在 SwiftUI 中，手势识别是实现用户交互的关键。它让你的应用能够响应用户的触摸、滑动等操作。理解并掌握手势，能让你的应用变得生动有趣。</p><p>手势识别器可以附加到任何视图上。这使得视图能够响应特定的用户输入。例如，你可以让一个图片在被点击时放大。</p><p>SwiftUI 提供了多种内置手势。它们涵盖了日常应用中常见的交互模式。这大大简化了开发过程。</p><h2 id="tap-手势-轻触的魔力-✨" tabindex="-1">Tap 手势：轻触的魔力 ✨ <a class="header-anchor" href="#tap-手势-轻触的魔力-✨" aria-label="Permalink to &quot;Tap 手势：轻触的魔力 ✨&quot;">​</a></h2><p>Tap 手势是最常见的一种。它用于检测用户的轻触操作。你可以轻松地为按钮或图片添加点击事件。</p><p>使用 <code>.onTapGesture</code> 修饰符即可实现。例如，一个简单的文本视图可以响应点击。当用户点击时，你可以更新视图状态。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onTapGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文本被点击了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>你还可以指定点击次数。例如，双击事件。这为你的应用增加了更多交互可能性。</p><h2 id="longpress-手势-长按的惊喜-⏳" tabindex="-1">LongPress 手势：长按的惊喜 ⏳ <a class="header-anchor" href="#longpress-手势-长按的惊喜-⏳" aria-label="Permalink to &quot;LongPress 手势：长按的惊喜 ⏳&quot;">​</a></h2><p>LongPress 手势用于检测用户长时间按压的操作。这在许多应用中都有广泛应用。例如，长按图片保存。</p><p>使用 <code>.onLongPressGesture</code> 修饰符来添加长按功能。你可以设置长按的最短持续时间。这提供了灵活的控制。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onLongPressGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minimumDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;长按了1.5秒！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onPressingChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { isPressing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;正在按压: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(isPressing)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个手势还提供了按压状态的回调。你可以根据按压状态更新UI。这能提供即时反馈。</p><h2 id="drag-手势-拖动的乐趣-➡️" tabindex="-1">Drag 手势：拖动的乐趣 ➡️ <a class="header-anchor" href="#drag-手势-拖动的乐趣-➡️" aria-label="Permalink to &quot;Drag 手势：拖动的乐趣 ➡️&quot;">​</a></h2><p>Drag 手势用于检测用户的拖动操作。这在需要移动视图或滑动内容时非常有用。例如，拖动一个卡片。</p><p>使用 <code>.gesture(DragGesture())</code> 来实现拖动。你可以获取拖动过程中的各种信息。包括起始位置、当前位置和拖动距离。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CGSize.zero</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.red)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(offset)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DragGesture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.translation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">onEnded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;拖动结束，位移: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(value.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">translation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>拖动手势提供了 <code>onChanged</code> 和 <code>onEnded</code> 回调。<code>onChanged</code> 在拖动过程中持续触发。<code>onEnded</code> 在拖动结束时触发。</p><h2 id="组合手势与并发-🤝" tabindex="-1">组合手势与并发 🤝 <a class="header-anchor" href="#组合手势与并发-🤝" aria-label="Permalink to &quot;组合手势与并发 🤝&quot;">​</a></h2><p>SwiftUI 允许你组合多个手势。你可以使用 <code>.simultaneousGesture</code> 或 <code>.sequencedGesture</code>。这提供了强大的手势处理能力。</p><ul><li><code>.simultaneousGesture</code> 允许两个手势同时被识别。例如，一个视图可以同时响应点击和拖动。</li><li><code>.sequencedGesture</code> 按照顺序识别手势。例如，先长按再拖动。</li></ul><p>掌握这些手势，你就能创建出响应灵敏、交互丰富的应用。用户体验将大大提升！🚀</p>`,23)]))}const o=i(p,[["render",l]]);export{g as __pageData,o as default};
