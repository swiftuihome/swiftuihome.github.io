import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const E=JSON.parse('{"title":"控制动画的开始与停止","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/6.3_控制动画的开始与停止.md","filePath":"custom_views/6.3_控制动画的开始与停止.md"}'),l={name:"custom_views/6.3_控制动画的开始与停止.md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="控制动画的开始与停止" tabindex="-1">控制动画的开始与停止 <a class="header-anchor" href="#控制动画的开始与停止" aria-label="Permalink to &quot;控制动画的开始与停止&quot;">​</a></h1><h2 id="控制动画状态" tabindex="-1">控制动画状态 <a class="header-anchor" href="#控制动画状态" aria-label="Permalink to &quot;控制动画状态&quot;">​</a></h2><p>在SwiftUI中，控制动画的开始与停止是实现动态用户体验的关键。你可以通过绑定状态变量来轻松管理加载指示器的动画。这使得你的组件更加灵活和响应式。</p><h2 id="实现动画控制" tabindex="-1">实现动画控制 <a class="header-anchor" href="#实现动画控制" aria-label="Permalink to &quot;实现动画控制&quot;">​</a></h2><p>要实现动画控制，你可以使用<code>@State</code>属性包装器。这个包装器允许视图响应状态变化。当状态改变时，SwiftUI会自动重新渲染视图，从而更新动画。</p><ul><li><strong>使用<code>@State</code>变量</strong>: 定义一个布尔类型的<code>@State</code>变量，例如<code>isAnimating</code>。</li><li><strong>绑定到视图</strong>: 将这个变量绑定到你的加载指示器视图。</li><li><strong>触发状态变化</strong>: 通过按钮或其他交互来切换<code>isAnimating</code>的值。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLoading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            CustomProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isAnimating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isLoading)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isLoading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;停止加载&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;开始加载&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                isLoading.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="动画的生命周期" tabindex="-1">动画的生命周期 <a class="header-anchor" href="#动画的生命周期" aria-label="Permalink to &quot;动画的生命周期&quot;">​</a></h2><p>理解动画的生命周期对于创建流畅的用户界面至关重要。当<code>isAnimating</code>从<code>false</code>变为<code>true</code>时，动画会启动。反之，当它从<code>true</code>变为<code>false</code>时，动画会停止。这种简单的切换机制提供了强大的控制力。</p><ul><li><strong>启动动画</strong>: 当数据开始加载时，将<code>isLoading</code>设置为<code>true</code>。</li><li><strong>停止动画</strong>: 当数据加载完成时，将<code>isLoading</code>设置为<code>false</code>。</li></ul><p>这种方法确保了加载指示器只在需要时显示，提升了用户体验。大约有85%的用户更喜欢有明确加载指示的应用程序。</p><h2 id="优化用户体验" tabindex="-1">优化用户体验 <a class="header-anchor" href="#优化用户体验" aria-label="Permalink to &quot;优化用户体验&quot;">​</a></h2><p>通过精确控制动画，你可以显著提升用户体验。一个响应迅速的加载指示器能让用户感到应用程序正在积极工作，而不是卡顿。</p><ol><li><strong>即时反馈</strong>: 当用户执行操作时，立即显示加载指示器。</li><li><strong>清晰的结束</strong>: 当操作完成时，立即停止动画并显示结果。</li><li><strong>避免过度动画</strong>: 仅在必要时使用动画，避免分散用户注意力。</li></ol><p>这种精细的控制让你的应用程序看起来更专业、更流畅。用户会欣赏这种对细节的关注！🚀✨</p>`,15)]))}const c=i(l,[["render",t]]);export{E as __pageData,c as default};
