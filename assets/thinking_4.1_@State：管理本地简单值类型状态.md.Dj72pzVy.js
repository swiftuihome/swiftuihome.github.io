import{_ as a,c as i,o as t,ag as e}from"./chunks/framework.Bw-5EFTY.js";const c=JSON.parse('{"title":"@State：管理本地简单值类型状态","description":"","frontmatter":{},"headers":[],"relativePath":"thinking/4.1_@State：管理本地简单值类型状态.md","filePath":"thinking/4.1_@State：管理本地简单值类型状态.md"}'),n={name:"thinking/4.1_@State：管理本地简单值类型状态.md"};function l(p,s,h,r,d,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="state-管理本地简单值类型状态" tabindex="-1">@State：管理本地简单值类型状态 <a class="header-anchor" href="#state-管理本地简单值类型状态" aria-label="Permalink to &quot;@State：管理本地简单值类型状态&quot;">​</a></h1><h2 id="掌握-state-本地状态管理的基石" tabindex="-1">掌握 @State：本地状态管理的基石 <a class="header-anchor" href="#掌握-state-本地状态管理的基石" aria-label="Permalink to &quot;掌握 @State：本地状态管理的基石&quot;">​</a></h2><p>在 SwiftUI 中，<code>@State</code> 是你管理视图本地简单值类型状态的强大工具。它让你的 UI 能够响应用户交互和数据变化，实现动态更新。想象一下，你的视图拥有了“记忆”！ 🧠</p><p>当你使用 <code>@State</code> 声明一个属性时，SwiftUI 会自动为这个属性分配存储空间。更棒的是，它会监控这个属性的变化。一旦 <code>@State</code> 变量的值发生改变，SwiftUI 就会自动重新渲染依赖于它的视图部分。这简直是魔法！ ✨</p><h2 id="state-的核心优势" tabindex="-1">@State 的核心优势 <a class="header-anchor" href="#state-的核心优势" aria-label="Permalink to &quot;@State 的核心优势&quot;">​</a></h2><p><code>@State</code> 专为管理视图内部的私有状态而设计。这意味着它非常适合那些不需要在多个视图之间共享的数据。例如，一个开关的开启/关闭状态，或者一个计数器的当前数值。</p><ul><li><strong>自动更新</strong>: 你无需手动调用任何方法来刷新 UI。SwiftUI 会为你处理一切。</li><li><strong>简单易用</strong>: 声明一个 <code>@State</code> 变量就像声明普通变量一样简单，只需添加 <code>@State</code> 关键字。</li><li><strong>性能优化</strong>: SwiftUI 足够智能，只会重新渲染真正需要更新的视图部分，效率极高。</li></ul><h2 id="如何使用-state" tabindex="-1">如何使用 @State <a class="header-anchor" href="#如何使用-state" aria-label="Permalink to &quot;如何使用 @State&quot;">​</a></h2><p>使用 <code>@State</code> 非常直观。你只需要在属性声明前加上 <code>@State</code> 关键字，并为其提供一个初始值。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tapCount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你点击了 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(tapCount)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 次&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                tapCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个例子中，<code>tapCount</code> 是一个 <code>@State</code> 变量。每次点击按钮，<code>tapCount</code> 都会增加，并且 <code>Text</code> 视图会自动更新以显示新的计数。这展示了 <code>tapCount</code> 如何驱动 UI 变化。</p><h2 id="最佳实践与注意事项" tabindex="-1">最佳实践与注意事项 <a class="header-anchor" href="#最佳实践与注意事项" aria-label="Permalink to &quot;最佳实践与注意事项&quot;">​</a></h2><p>为了充分发挥 <code>@State</code> 的优势，请记住以下几点：</p><ul><li><strong>私有性</strong>: 总是将 <code>@State</code> 属性声明为 <code>private</code>。这强调了它仅供当前视图内部使用的特性。</li><li><strong>值类型</strong>: <code>@State</code> 主要用于管理值类型（如 <code>Int</code>, <code>String</code>, <code>Bool</code>, <code>Struct</code> 等）。对于引用类型，你应该考虑使用 <code>@StateObject</code> 或 <code>@ObservedObject</code>。</li><li><strong>初始值</strong>: <code>@State</code> 变量必须有一个初始值。</li><li><strong>局部化</strong>: 尽量将 <code>@State</code> 变量放置在最需要它的视图中，避免过度提升状态。</li></ul><p>通过掌握 <code>@State</code>，你已经迈出了 SwiftUI 状态管理的第一步。它为你构建响应式和动态的 UI 奠定了坚实的基础。继续探索，你会发现更多令人兴奋的可能性！ 🚀</p>`,15)]))}const E=a(n,[["render",l]]);export{c as __pageData,E as default};
