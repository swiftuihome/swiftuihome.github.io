import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.ymCRTBvy.js";const c=JSON.parse('{"title":"1.5_修改SceneDelegate以编程方式设置根视图","description":"","frontmatter":{},"headers":[],"relativePath":"uikit/basics/1.5_修改SceneDelegate以编程方式设置根视图.md","filePath":"uikit/basics/1.5_修改SceneDelegate以编程方式设置根视图.md"}'),l={name:"uikit/basics/1.5_修改SceneDelegate以编程方式设置根视图.md"};function t(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_1-5-修改scenedelegate以编程方式设置根视图" tabindex="-1">1.5_修改SceneDelegate以编程方式设置根视图 <a class="header-anchor" href="#_1-5-修改scenedelegate以编程方式设置根视图" aria-label="Permalink to &quot;1.5_修改SceneDelegate以编程方式设置根视图&quot;">​</a></h1><p>在没有使用 Storyboard 的 iOS 项目中，你需要手动配置 <code>SceneDelegate</code> 来设置应用的根视图控制器。这允许你完全控制应用的启动流程和用户界面。让我们一步步来完成这个过程，确保你的应用能够正确显示内容。🎉</p><h2 id="理解-scenedelegate-的作用" tabindex="-1">理解 SceneDelegate 的作用 <a class="header-anchor" href="#理解-scenedelegate-的作用" aria-label="Permalink to &quot;理解 SceneDelegate 的作用&quot;">​</a></h2><p><code>SceneDelegate</code> 负责管理应用场景的生命周期。在 iOS 13 及更高版本中，它取代了 <code>AppDelegate</code> 的部分职责，特别是与 UIWindow 和视图层次结构相关的部分。你需要在这里创建 <code>UIWindow</code> 实例，并将根视图控制器分配给它。</p><h2 id="配置-uiwindow-和根视图控制器" tabindex="-1">配置 UIWindow 和根视图控制器 <a class="header-anchor" href="#配置-uiwindow-和根视图控制器" aria-label="Permalink to &quot;配置 UIWindow 和根视图控制器&quot;">​</a></h2><p>首先，打开你的 <code>SceneDelegate.swift</code> 文件。你会看到一个 <code>scene(_:willConnectTo:options:)</code> 方法。在这个方法中，你需要编写代码来创建 <code>UIWindow</code> 并设置根视图控制器。以下是一个示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene: UIScene, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">willConnectTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: UISceneSession, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionOptions: UIScene.ConnectionOptions) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowScene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scene </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIWindowScene) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 创建 UIWindow</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">windowScene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: windowScene)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 创建你的根视图控制器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换为你的实际视图控制器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. 创建 UINavigationController 并将根视图控制器放入其中 (可选)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigationController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UINavigationController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rootViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: viewController)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 4. 设置 window 的根视图控制器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rootViewController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigationController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 5. 显示 window</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeKeyAndVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这段代码做了以下几件事：</p><ol><li><strong>创建 <code>UIWindow</code></strong>: 使用 <code>UIWindowScene</code> 创建一个新的 <code>UIWindow</code> 实例。</li><li><strong>创建根视图控制器</strong>: 实例化你想要作为应用第一个显示的视图控制器。例如，<code>ViewController()</code>。</li><li><strong>创建 <code>UINavigationController</code> (可选)</strong>: 如果你的应用需要导航栏，可以将根视图控制器放入 <code>UINavigationController</code> 中。</li><li><strong>设置 <code>rootViewController</code></strong>: 将创建的视图控制器或导航控制器设置为 <code>window</code> 的 <code>rootViewController</code>。</li><li><strong>显示 <code>window</code></strong>: 调用 <code>makeKeyAndVisible()</code> 方法使 <code>window</code> 可见。</li></ol><h2 id="确保-uiwindow-被正确引用" tabindex="-1">确保 UIWindow 被正确引用 <a class="header-anchor" href="#确保-uiwindow-被正确引用" aria-label="Permalink to &quot;确保 UIWindow 被正确引用&quot;">​</a></h2><p>在 <code>SceneDelegate</code> 中，你需要声明一个 <code>UIWindow</code> 属性，以便在 <code>scene(_:willConnectTo:options:)</code> 方法中使用。确保你的 <code>SceneDelegate</code> 类包含以下属性：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window: UIWindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个属性用于存储对 <code>UIWindow</code> 实例的引用，这样系统才能正确显示你的应用界面。</p><h2 id="示例-设置一个简单的根视图控制器" tabindex="-1">示例：设置一个简单的根视图控制器 <a class="header-anchor" href="#示例-设置一个简单的根视图控制器" aria-label="Permalink to &quot;示例：设置一个简单的根视图控制器&quot;">​</a></h2><p>假设你有一个名为 <code>ViewController</code> 的视图控制器，你想要将其设置为根视图控制器。以下是 <code>ViewController.swift</code> 的一个简单示例：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UIKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewDidLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        view.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .white </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置背景颜色为白色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;首页&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 设置导航栏标题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在这个例子中，我们简单地设置了视图的背景颜色和导航栏标题。你可以根据你的需求添加更多的 UI 元素和逻辑。</p><h2 id="运行你的应用" tabindex="-1">运行你的应用 <a class="header-anchor" href="#运行你的应用" aria-label="Permalink to &quot;运行你的应用&quot;">​</a></h2><p>现在，运行你的应用。你应该能看到你设置的根视图控制器显示在屏幕上。如果没有显示，请检查你的代码，确保 <code>UIWindow</code> 和根视图控制器被正确创建和配置。🎉</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过修改 <code>SceneDelegate</code>，你可以完全控制应用的启动流程，并以编程方式设置根视图控制器。这为你提供了更大的灵活性和自定义能力，特别是在不使用 Storyboard 的项目中。记住，理解 <code>UIWindow</code> 和视图控制器的关系是关键。希望这个教程对你有所帮助！🚀</p>`,21)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
