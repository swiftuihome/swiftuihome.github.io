import{_ as e,c as t,o as l,ag as r}from"./chunks/framework.ymCRTBvy.js";const u=JSON.parse('{"title":"第31天 项目 5 第三部分","description":"","frontmatter":{},"headers":[],"relativePath":"100days/第31天_项目5第三部分.md","filePath":"100days/第31天_项目5第三部分.md"}'),i={name:"100days/第31天_项目5第三部分.md"};function a(n,o,d,s,c,p){return l(),t("div",null,o[0]||(o[0]=[r('<h1 id="第31天-项目-5-第三部分" tabindex="-1">第31天 项目 5 第三部分 <a class="header-anchor" href="#第31天-项目-5-第三部分" aria-label="Permalink to &quot;第31天 项目 5 第三部分&quot;">​</a></h1><p>德韦恩·“巨石”·约翰逊曾说过：“成功并不总是关乎伟大，而是关乎坚持。持续的努力会带来成功，伟大自会随之而来。”</p><p>显然，我希望能让你尽快且高效地掌握 SwiftUI，达到精通的程度，但这需要你付出大量的坚持。公平地说，现在已经是第 31 天了，你还在坚持学习，所以你已经履行了自己的那部分责任——做得好！</p><p>又一个项目完成了，现在是时候让你自己掌控学习进程了。没错，这就是项目中“需要努力”的部分，你需要在没有我帮助的情况下完成一些挑战，同时还要通过测试，确保你所学的知识已经融会贯通。</p><p>你能做到的！</p><p><strong>今天，你应该完成项目 5 的总结章节，完成复习部分，然后攻克所有三个挑战。</strong></p><ul><li>单词拼写游戏：总结</li><li>项目 5 复习：单词拼写游戏</li></ul><p>不如把你完成的应用程序录成视频，分享到网上吧？你应该为自己所有的努力感到骄傲！</p><h2 id="单词拼写游戏-总结" tabindex="-1">单词拼写游戏：总结 <a class="header-anchor" href="#单词拼写游戏-总结" aria-label="Permalink to &quot;单词拼写游戏：总结&quot;">​</a></h2><p><em>作者：Paul Hudson 2021 年 10 月 30 日</em></p><p>这个项目是我们进入下一个应用程序、学习更深入内容之前，最后一次复习 SwiftUI 基础知识的机会。即便如此，我们还是涵盖了一些实用的新知识，尤其是 <code>List</code>、<code>onAppear</code>、<code>Bundle</code>、<code>fatalError()</code>、<code>UITextChecker</code> 等等，而且你又多了一个可以自行扩展的应用程序。</p><p>在结束之前，我想特别提一下我对 <code>fatalError()</code> 的使用。如果你查看我在 GitHub 上的项目代码，或者阅读我一些更高级的教程，你会发现我经常依赖 <code>fatalError()</code>，将其作为一种在发生不可能出现的情况时强制代码停止运行的方式。这种技术的关键——使其避免成为鲁莽危险的操作的核心——在于<em>判断</em>某种特定情况何时应该是不可能发生的。这需要时间和实践来积累：并没有一份速成清单能列出所有适合使用 <code>fatalError()</code> 的场景，相反，你会在实践中逐渐摸索出来。</p><h2 id="复习所学内容" tabindex="-1">复习所学内容 <a class="header-anchor" href="#复习所学内容" aria-label="Permalink to &quot;复习所学内容&quot;">​</a></h2><p>任何人都能看完一门教程，但要记住所学的知识，就需要付出实际的努力。我的职责是确保你能从这些教程中收获尽可能多的知识，完成后面的练习题，帮助你检验自己的学习成果。</p><h2 id="挑战" tabindex="-1">挑战 <a class="header-anchor" href="#挑战" aria-label="Permalink to &quot;挑战&quot;">​</a></h2><p>学习编程最好的方法之一就是尽可能多地自己编写代码，所以这里有三种扩展这个应用程序的方式，你应该尝试一下，以确保自己完全理解其中的原理：</p><ol><li>不允许输入长度少于三个字母的答案，也不允许输入与起始单词完全相同的答案。</li><li>添加一个工具栏按钮，点击后调用 <code>startGame()</code> 方法，这样用户随时都可以重新开始游戏，获取一个新的单词。</li><li>在某处添加一个文本视图，用于跟踪并显示玩家针对某个基础单词的得分。具体的计分方式由你决定，但合理的方式可以涉及单词的数量及其字母的个数。</li></ol><h2 id="【练习题】单词拼写游戏" tabindex="-1">【练习题】单词拼写游戏 <a class="header-anchor" href="#【练习题】单词拼写游戏" aria-label="Permalink to &quot;【练习题】单词拼写游戏&quot;">​</a></h2><p>问题 1/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：我们可以使用 <code>listViewStyle()</code> 修饰符控制列表的视觉外观。</strong></li><li><strong>选项 2：<code>List</code> 会生成一个可滚动的行表格。</strong></li></ul><p>问题 2/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：如果 <code>guard</code> 检查失败，我们必须退出当前作用域。</strong></li><li><strong>选项 2：去除字符串中的空白字符会删除字符串中任何位置的空格和制表符。</strong></li></ul><p>问题 3/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：在一个函数内部，我们只能使用一次 <code>guard</code>。</strong></li><li><strong>选项 2：如果列表分区使用简单字符串作为标题，我们可以通过 <code>Section(&quot;某个字符串&quot;)</code> 的方式传入标题。</strong></li></ul><p>问题 4/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：我们可以直接通过数组创建 <code>List</code>。</strong></li><li><strong>选项 2：我们可以猜测应用程序包中某个文件的路径。</strong></li></ul><p>问题 5/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：如果某个方法的签名与闭包参数的签名相同，我们可以使用该方法来替代闭包。</strong></li><li><strong>选项 2：在 Swift 中，<code>\\m</code> 表示换行符。</strong></li></ul><p>问题 6/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：<code>NSNotFound</code> 是一个特殊值，表示某个 Swift 字符串无法转换为 Objective-C 字符串。</strong></li><li><strong>选项 2：我们可以使用 <code>onAppear()</code> 在视图显示时执行一个闭包。</strong></li></ul><p>问题 7/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：在 <code>List</code> 中可以混合使用静态行和动态行。</strong></li><li><strong>选项 2：对数组调用 <code>randomElement()</code> 方法，总能获取到一个元素。</strong></li></ul><p>问题 8/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：我们可以在 <code>List</code> 内部使用 <code>ForEach</code> 视图。</strong></li><li><strong>选项 2：要监听文本视图中回车键的点击事件，应添加 <code>onReturnPressed()</code> 修饰符。</strong></li></ul><p>问题 9/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：在循环中创建视图时，SwiftUI 需要知道如何唯一地标识每个视图。</strong></li><li><strong>选项 2：创建 <code>UITextChecker</code> 时，需要为其提供一份有效的英文单词列表，供其使用。</strong></li></ul><p>问题 10/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：如果知道文件的 URL，我们可以将文件加载为字符串。</strong></li><li><strong>选项 2：<code>fatalError()</code> 只有在问题非常严重时才会导致程序崩溃。</strong></li></ul><p>问题 11/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：所有 iOS 应用程序都有一个主包（main bundle）。</strong></li><li><strong>选项 2：在 <code>List</code> 的一行中放置两个视图，会隐式创建一个 <code>HStack</code>。</strong></li></ul><p>问题 12/12：以下哪些陈述是正确的？</p><ul><li><strong>选项 1：Objective-C 字符串与 Swift 字符串的工作方式完全相同。</strong></li><li><strong>选项 2：文本字段（Text Field）默认会将输入的文本大写。</strong></li></ul>',42)]))}const _=e(i,[["render",a]]);export{u as __pageData,_ as default};
