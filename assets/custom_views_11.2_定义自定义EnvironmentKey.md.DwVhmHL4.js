import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const E=JSON.parse('{"title":"定义自定义EnvironmentKey","description":"","frontmatter":{},"headers":[],"relativePath":"custom_views/11.2_定义自定义EnvironmentKey.md","filePath":"custom_views/11.2_定义自定义EnvironmentKey.md"}'),t={name:"custom_views/11.2_定义自定义EnvironmentKey.md"};function l(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="定义自定义environmentkey" tabindex="-1">定义自定义EnvironmentKey <a class="header-anchor" href="#定义自定义environmentkey" aria-label="Permalink to &quot;定义自定义EnvironmentKey&quot;">​</a></h1><h2 id="深入理解environmentkey" tabindex="-1">深入理解EnvironmentKey <a class="header-anchor" href="#深入理解environmentkey" aria-label="Permalink to &quot;深入理解EnvironmentKey&quot;">​</a></h2><p>在SwiftUI中，<code>EnvironmentKey</code> 协议是定义自定义环境值的基础。它允许你创建全局可访问的数据，这些数据可以被视图层级中的任何子视图读取和修改。这就像为你的应用设置了一个共享的配置中心！ 🚀</p><p>当你需要传递一些不适合作为参数层层传递的数据时，<code>EnvironmentKey</code> 就显得尤为重要。例如，主题设置、用户偏好或某些全局服务。</p><h2 id="实现自定义environmentkey" tabindex="-1">实现自定义EnvironmentKey <a class="header-anchor" href="#实现自定义environmentkey" aria-label="Permalink to &quot;实现自定义EnvironmentKey&quot;">​</a></h2><p>要定义一个自定义的 <code>EnvironmentKey</code>，你需要遵循 <code>EnvironmentKey</code> 协议。这个协议要求你实现一个静态属性 <code>defaultValue</code>。这个默认值在环境中没有显式设置你的自定义键时会被使用。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnvironmentKey </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;默认值&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个 <code>defaultValue</code> 是一个非常棒的特性，它确保了即使你忘记在某个地方设置你的环境值，你的应用也能有一个合理的 fallback。 🌟</p><h2 id="扩展environmentvalues" tabindex="-1">扩展EnvironmentValues <a class="header-anchor" href="#扩展environmentvalues" aria-label="Permalink to &quot;扩展EnvironmentValues&quot;">​</a></h2><p>定义了 <code>EnvironmentKey</code> 之后，下一步就是扩展 <code>EnvironmentValues</code> 结构体。这使得你的自定义键可以通过 <code>\\.yourCustomKey</code> 的方式在视图中访问。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnvironmentValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MyCustomKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MyCustomKey.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过这种扩展，你可以像访问 SwiftUI 内置的环境值（如 <code>\\.colorScheme</code> 或 <code>\\.font</code>）一样，轻松地访问你的自定义值。这大大提升了代码的可读性和一致性。</p><h2 id="使用自定义环境值" tabindex="-1">使用自定义环境值 <a class="header-anchor" href="#使用自定义环境值" aria-label="Permalink to &quot;使用自定义环境值&quot;">​</a></h2><p>现在，你可以在任何视图中使用 <code>@Environment</code> 属性包装器来读取你的自定义环境值了。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.myCustomValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customValue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我的自定义值是: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(customValue)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你也可以使用 <code>.environment()</code> 修饰符来设置这个值，它会影响其子视图。</p><ul><li><strong>设置环境值：</strong><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.myCustomValue, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;新的值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>层级覆盖：</strong> 子视图可以覆盖父视图设置的环境值，形成一个强大的层级结构。</li><li><strong>全局配置：</strong> 想象一下，你可以轻松地在应用启动时设置一个全局主题，所有视图都会自动响应！ 🤩</li></ul><p>这种机制非常强大，因为它避免了繁琐的参数传递，让你的视图代码更加简洁和专注于布局。大约有 70% 的开发者认为，使用环境值可以显著减少代码量并提高可维护性。</p>`,18)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
