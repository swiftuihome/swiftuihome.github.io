import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bw-5EFTY.js";const o=JSON.parse('{"title":"构建JSON请求体","description":"","frontmatter":{},"headers":[],"relativePath":"network/3.2_构建JSON请求体.md","filePath":"network/3.2_构建JSON请求体.md"}'),t={name:"network/3.2_构建JSON请求体.md"};function l(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="构建json请求体" tabindex="-1">构建JSON请求体 <a class="header-anchor" href="#构建json请求体" aria-label="Permalink to &quot;构建JSON请求体&quot;">​</a></h1><h2 id="构建json请求体-核心概念" tabindex="-1">构建JSON请求体：核心概念 <a class="header-anchor" href="#构建json请求体-核心概念" aria-label="Permalink to &quot;构建JSON请求体：核心概念&quot;">​</a></h2><p>在处理POST请求时，构建JSON请求体是至关重要的一步。它允许你将结构化数据发送到服务器。想象一下，你正在向一个在线商店提交订单，订单详情就需要通过JSON体来传递。 🛍️</p><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。它易于人阅读和编写，也易于机器解析和生成。因此，它成为网络通信的首选。</p><h2 id="定义数据结构" tabindex="-1">定义数据结构 <a class="header-anchor" href="#定义数据结构" aria-label="Permalink to &quot;定义数据结构&quot;">​</a></h2><p>首先，你需要定义一个Swift结构体。这个结构体将精确地映射你想要发送的JSON数据。例如，如果你要发送用户信息，可以这样定义：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Encodable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个<code>User</code>结构体遵循了<code>Encodable</code>协议。这意味着它可以被编码成其他格式，比如JSON。这是Swift Codable协议的强大之处！💪</p><h2 id="准备数据实例" tabindex="-1">准备数据实例 <a class="header-anchor" href="#准备数据实例" aria-label="Permalink to &quot;准备数据实例&quot;">​</a></h2><p>接下来，你需要创建这个结构体的一个实例。这个实例将包含你实际要发送的数据。例如，你可以创建一个新的用户：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zhangsan@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个<code>newUser</code>实例现在包含了所有必要的信息。它准备好被转换成JSON格式了。</p><h2 id="编码为json数据" tabindex="-1">编码为JSON数据 <a class="header-anchor" href="#编码为json数据" aria-label="Permalink to &quot;编码为JSON数据&quot;">​</a></h2><p>有了数据实例，下一步就是将其编码为JSON <code>Data</code>类型。这通常通过<code>JSONEncoder</code>来完成。<code>JSONEncoder</code>是Swift标准库的一部分，专门用于将<code>Encodable</code>类型编码为JSON。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSONEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoder.outputFormatting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .prettyPrinted </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选：为了可读性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newUser)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: jsonData, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;编码失败: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这段代码展示了如何将<code>newUser</code>实例编码为<code>jsonData</code>。<code>prettyPrinted</code>选项让输出的JSON更易读，这在调试时非常有用。大约有85%的开发者在开发阶段会使用此选项。</p><h2 id="验证json体" tabindex="-1">验证JSON体 <a class="header-anchor" href="#验证json体" aria-label="Permalink to &quot;验证JSON体&quot;">​</a></h2><p>编码完成后，你可以打印出JSON数据来验证其格式是否正确。确保所有的键值对都符合服务器的预期。</p><ul><li>检查键名是否与服务器API文档一致。</li><li>确认数据类型是否匹配（例如，数字而不是字符串）。</li><li>验证嵌套结构是否正确。</li></ul><p>一个常见的错误是数据类型不匹配，这可能导致服务器拒绝请求。仔细检查你的JSON体，确保它完美无缺！✨</p>`,20)]))}const c=i(t,[["render",l]]);export{o as __pageData,c as default};
