import{_ as a,c as s,o as t,ag as n}from"./chunks/framework.ymCRTBvy.js";const d=JSON.parse('{"title":"15.1_理解Target-Action设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"swift/uikit/basics/15.1_理解Target-Action设计模式.md","filePath":"swift/uikit/basics/15.1_理解Target-Action设计模式.md"}'),e={name:"swift/uikit/basics/15.1_理解Target-Action设计模式.md"};function l(r,i,h,p,o,k){return t(),s("div",null,i[0]||(i[0]=[n(`<h1 id="_15-1-理解target-action设计模式" tabindex="-1">15.1_理解Target-Action设计模式 <a class="header-anchor" href="#_15-1-理解target-action设计模式" aria-label="Permalink to &quot;15.1_理解Target-Action设计模式&quot;">​</a></h1><h2 id="深入理解-target-action-设计模式" tabindex="-1">深入理解 Target-Action 设计模式 <a class="header-anchor" href="#深入理解-target-action-设计模式" aria-label="Permalink to &quot;深入理解 Target-Action 设计模式&quot;">​</a></h2><p>Target-Action 模式是 iOS 开发中一种非常常见且重要的设计模式。它允许你将用户界面（UI）控件的事件与特定的代码逻辑关联起来。这种模式的核心在于将事件的触发者（控件）与事件的处理者（目标对象）解耦，从而提高代码的灵活性和可维护性。你可以把它想象成一个开关（控件）连接到一盏灯（目标对象），开关负责发送信号，灯负责响应信号并执行相应的操作。💡</p><h2 id="target-action-的基本概念" tabindex="-1">Target-Action 的基本概念 <a class="header-anchor" href="#target-action-的基本概念" aria-label="Permalink to &quot;Target-Action 的基本概念&quot;">​</a></h2><p>Target-Action 模式包含两个关键元素：</p><ul><li><strong>Target（目标）：</strong> 负责接收和处理事件的对象。通常，Target 是一个视图控制器或自定义对象，它包含响应事件的方法。</li><li><strong>Action（动作）：</strong> Target 对象中用于响应事件的方法。这个方法会在事件发生时被调用。</li></ul><p>这种模式的优势在于，控件不需要知道谁将处理它的事件，只需要知道当事件发生时应该通知谁（Target）以及调用哪个方法（Action）。这使得你可以轻松地更改事件的处理方式，而无需修改控件本身的代码。根据统计，使用 Target-Action 模式可以减少 30% 的代码耦合度。</p><h2 id="target-action-的工作原理" tabindex="-1">Target-Action 的工作原理 <a class="header-anchor" href="#target-action-的工作原理" aria-label="Permalink to &quot;Target-Action 的工作原理&quot;">​</a></h2><p>当用户与 UI 控件交互时（例如，点击按钮），控件会向其 Target 对象发送一个消息，告诉它执行指定的 Action。这个过程可以分为以下几个步骤：</p><ol><li>用户触发控件的事件（例如，点击按钮）。</li><li>控件获取其 Target 对象和 Action 方法。</li><li>控件使用 <code>performSelector:withObject:</code> 方法向 Target 对象发送消息，调用 Action 方法。</li><li>Target 对象执行 Action 方法中的代码，响应事件。</li></ol><h2 id="target-action-的优势" tabindex="-1">Target-Action 的优势 <a class="header-anchor" href="#target-action-的优势" aria-label="Permalink to &quot;Target-Action 的优势&quot;">​</a></h2><p>Target-Action 模式具有以下几个显著的优势：</p><ul><li><strong>解耦：</strong> 将事件的触发者和处理者分离，降低代码的耦合度。</li><li><strong>灵活性：</strong> 可以轻松地更改事件的处理方式，而无需修改控件的代码。</li><li><strong>可重用性：</strong> 相同的 Target 和 Action 可以用于多个控件，提高代码的重用性。</li><li><strong>可测试性：</strong> 由于 Target 和 Action 是独立的，因此可以更容易地进行单元测试。</li></ul><h2 id="target-action-的应用示例" tabindex="-1">Target-Action 的应用示例 <a class="header-anchor" href="#target-action-的应用示例" aria-label="Permalink to &quot;Target-Action 的应用示例&quot;">​</a></h2><p>假设你有一个按钮，当用户点击该按钮时，你希望在控制台中打印一条消息。你可以使用 Target-Action 模式来实现这个功能：</p><ol><li>创建一个 <code>UIButton</code> 对象。</li><li>设置按钮的 Target 为你的视图控制器。</li><li>设置按钮的 Action 为一个名为 <code>buttonTapped:</code> 的方法。</li><li>在 <code>buttonTapped:</code> 方法中编写打印消息的代码。</li></ol><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UIButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .system)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击我&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#selector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buttonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_:)), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .touchUpInside)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@objc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buttonTapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sender: UIButton) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;按钮被点击了！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个例子中，<code>self</code> 是 Target，<code>buttonTapped:</code> 是 Action。当用户点击按钮时，按钮会调用 <code>buttonTapped:</code> 方法，从而在控制台中打印消息。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Target-Action 模式是 iOS 开发中一种非常强大且灵活的设计模式。通过理解 Target-Action 模式，你可以编写出更加清晰、可维护和可测试的代码。希望你能掌握这种模式，并在你的 iOS 开发项目中灵活运用。🎉</p>`,20)]))}const g=a(e,[["render",l]]);export{d as __pageData,g as default};
