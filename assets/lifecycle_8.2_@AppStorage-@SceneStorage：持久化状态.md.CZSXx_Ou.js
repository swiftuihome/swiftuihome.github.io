import{_ as a,c as s,o as t,ag as i}from"./chunks/framework.Bw-5EFTY.js";const h=JSON.parse('{"title":"@AppStorage-@SceneStorage：持久化状态","description":"","frontmatter":{},"headers":[],"relativePath":"lifecycle/8.2_@AppStorage-@SceneStorage：持久化状态.md","filePath":"lifecycle/8.2_@AppStorage-@SceneStorage：持久化状态.md"}'),o={name:"lifecycle/8.2_@AppStorage-@SceneStorage：持久化状态.md"};function n(r,e,l,p,c,d){return t(),s("div",null,e[0]||(e[0]=[i('<h1 id="appstorage-scenestorage-持久化状态" tabindex="-1">@AppStorage-@SceneStorage：持久化状态 <a class="header-anchor" href="#appstorage-scenestorage-持久化状态" aria-label="Permalink to &quot;@AppStorage-@SceneStorage：持久化状态&quot;">​</a></h1><h2 id="appstorage-持久化你的数据-💾" tabindex="-1">@AppStorage：持久化你的数据 💾 <a class="header-anchor" href="#appstorage-持久化你的数据-💾" aria-label="Permalink to &quot;@AppStorage：持久化你的数据 💾&quot;">​</a></h2><p>想让你的 SwiftUI 应用记住用户的偏好设置吗？<code>@AppStorage</code> 就是你的好帮手！它能轻松地将数据存储到 <strong>UserDefaults</strong> 中，即使应用关闭再重启，数据依然存在。是不是很棒？🎉</p><ul><li><strong>简单易用</strong>: 只需要声明一个 <code>@AppStorage</code> 属性，SwiftUI 就会自动帮你处理数据的存储和读取。</li><li><strong>自动同步</strong>: 当属性值发生变化时，<code>@AppStorage</code> 会立即将新的值保存到 UserDefaults 中。</li><li><strong>支持多种数据类型</strong>: 可以存储 <code>Int</code>, <code>Double</code>, <code>String</code>, <code>Bool</code>, <code>URL</code> 等常见数据类型。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@AppStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这段代码声明了一个名为 <code>username</code> 的字符串属性，默认值为 &quot;Guest&quot;。每次 <code>username</code> 的值改变，都会自动保存到 UserDefaults 中，键名为 &quot;username&quot;。</p><h2 id="scenestorage-为每个场景保存状态-🎬" tabindex="-1">@SceneStorage：为每个场景保存状态 🎬 <a class="header-anchor" href="#scenestorage-为每个场景保存状态-🎬" aria-label="Permalink to &quot;@SceneStorage：为每个场景保存状态 🎬&quot;">​</a></h2><p><code>@SceneStorage</code> 类似于 <code>@AppStorage</code>，但它的作用范围更小，只在当前 <strong>Scene</strong> 中有效。Scene 可以理解为应用的一个窗口或标签页。这意味着，如果你的应用支持多窗口，每个窗口可以有自己独立的 <code>@SceneStorage</code> 数据。</p><ul><li><strong>场景隔离</strong>: 每个 Scene 拥有独立的数据存储空间，互不干扰。</li><li><strong>临时存储</strong>: 当 Scene 关闭时，<code>@SceneStorage</code> 存储的数据也会被清除。</li><li><strong>适用于临时状态</strong>: 适合存储一些临时的、与特定场景相关的数据，例如当前页面的滚动位置、选中的选项等。</li></ul><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@SceneStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;textInput&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textInput: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这段代码声明了一个名为 <code>textInput</code> 的字符串属性，默认值为空字符串。它存储在当前 Scene 的存储空间中，当 Scene 关闭时，数据也会被清除。</p><h2 id="如何选择-appstorage-vs-scenestorage-🤔" tabindex="-1">如何选择：@AppStorage vs @SceneStorage 🤔 <a class="header-anchor" href="#如何选择-appstorage-vs-scenestorage-🤔" aria-label="Permalink to &quot;如何选择：@AppStorage vs @SceneStorage 🤔&quot;">​</a></h2><p>选择哪个取决于你的需求！</p><ol><li><strong>数据持久性</strong>: <ul><li><code>@AppStorage</code>: 长期存储，应用重启后数据依然存在。</li><li><code>@SceneStorage</code>: 临时存储，Scene 关闭后数据丢失。</li></ul></li><li><strong>作用范围</strong>: <ul><li><code>@AppStorage</code>: 全局范围，整个应用都可以访问。</li><li><code>@SceneStorage</code>: 场景范围，只在当前 Scene 中有效。</li></ul></li></ol><p>总的来说，如果你需要存储用户的偏好设置、登录状态等需要长期保存的数据，选择 <code>@AppStorage</code>。如果只是需要存储一些临时的、与特定场景相关的数据，选择 <code>@SceneStorage</code>。</p><h2 id="实际应用场景举例-💡" tabindex="-1">实际应用场景举例 💡 <a class="header-anchor" href="#实际应用场景举例-💡" aria-label="Permalink to &quot;实际应用场景举例 💡&quot;">​</a></h2><ul><li><strong>@AppStorage</strong>: <ul><li>存储用户的主题偏好设置（亮色/暗色模式）。</li><li>记录用户是否已经看过新手引导。</li><li>保存用户的登录状态。</li></ul></li><li><strong>@SceneStorage</strong>: <ul><li>存储当前页面的滚动位置。</li><li>记录用户在表单中输入的内容（临时保存，防止意外丢失）。</li><li>保存用户在编辑器中打开的文件列表。</li></ul></li></ul><p>希望这些解释能帮助你更好地理解 <code>@AppStorage</code> 和 <code>@SceneStorage</code> 的用法！ 🚀 记住，选择合适的属性包装器，能让你的 SwiftUI 应用更加强大和用户友好。</p>',18)]))}const S=a(o,[["render",n]]);export{h as __pageData,S as default};
